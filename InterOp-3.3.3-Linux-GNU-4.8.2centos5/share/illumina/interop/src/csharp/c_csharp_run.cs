//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Run {

public class c_csharp_run {
  public static string library_version() {
    string ret = c_csharp_runPINVOKE.library_version();
    return ret;
  }

  public static cycle_range subtract(cycle_range lhs, uint first_cycle_of_read) {
    cycle_range ret = new cycle_range(c_csharp_runPINVOKE.subtract(cycle_range.getCPtr(lhs), first_cycle_of_read), true);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void list_metric_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_metric_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_metric_type(string_vector vec) {
    c_csharp_runPINVOKE.list_metric_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static metric_type parse_metric_type(string name) {
    metric_type ret = (metric_type)c_csharp_runPINVOKE.parse_metric_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(metric_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_1((int)value);
    return ret;
  }

  public static void list_metric_group(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_metric_group__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_metric_group(string_vector vec) {
    c_csharp_runPINVOKE.list_metric_group__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static metric_group parse_metric_group(string name) {
    metric_group ret = (metric_group)c_csharp_runPINVOKE.parse_metric_group(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(metric_group value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_2((int)value);
    return ret;
  }

  public static void list_tile_naming_method(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_tile_naming_method__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_tile_naming_method(string_vector vec) {
    c_csharp_runPINVOKE.list_tile_naming_method__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static tile_naming_method parse_tile_naming_method(string name) {
    tile_naming_method ret = (tile_naming_method)c_csharp_runPINVOKE.parse_tile_naming_method(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(tile_naming_method value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_3((int)value);
    return ret;
  }

  public static void list_dna_bases(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_dna_bases__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_dna_bases(string_vector vec) {
    c_csharp_runPINVOKE.list_dna_bases__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static dna_bases parse_dna_bases(string name) {
    dna_bases ret = (dna_bases)c_csharp_runPINVOKE.parse_dna_bases(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(dna_bases value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_4((int)value);
    return ret;
  }

  public static void list_surface_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_surface_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_surface_type(string_vector vec) {
    c_csharp_runPINVOKE.list_surface_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static surface_type parse_surface_type(string name) {
    surface_type ret = (surface_type)c_csharp_runPINVOKE.parse_surface_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(surface_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_5((int)value);
    return ret;
  }

  public static void list_instrument_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_instrument_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_instrument_type(string_vector vec) {
    c_csharp_runPINVOKE.list_instrument_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static instrument_type parse_instrument_type(string name) {
    instrument_type ret = (instrument_type)c_csharp_runPINVOKE.parse_instrument_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(instrument_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_6((int)value);
    return ret;
  }

  public static void list_metric_base_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_metric_base_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_metric_base_type(string_vector vec) {
    c_csharp_runPINVOKE.list_metric_base_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static metric_base_type parse_metric_base_type(string name) {
    metric_base_type ret = (metric_base_type)c_csharp_runPINVOKE.parse_metric_base_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(metric_base_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_7((int)value);
    return ret;
  }

  public static void list_plot_colors(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_plot_colors__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_plot_colors(string_vector vec) {
    c_csharp_runPINVOKE.list_plot_colors__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static plot_colors parse_plot_colors(string name) {
    plot_colors ret = (plot_colors)c_csharp_runPINVOKE.parse_plot_colors(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(plot_colors value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_8((int)value);
    return ret;
  }

  public static void list_bar_plot_options(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_bar_plot_options__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_bar_plot_options(string_vector vec) {
    c_csharp_runPINVOKE.list_bar_plot_options__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bar_plot_options parse_bar_plot_options(string name) {
    bar_plot_options ret = (bar_plot_options)c_csharp_runPINVOKE.parse_bar_plot_options(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(bar_plot_options value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_9((int)value);
    return ret;
  }

  public static void list_metric_data(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_metric_data__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_metric_data(string_vector vec) {
    c_csharp_runPINVOKE.list_metric_data__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static metric_data parse_metric_data(string name) {
    metric_data ret = (metric_data)c_csharp_runPINVOKE.parse_metric_data(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(metric_data value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_10((int)value);
    return ret;
  }

  public static void list_metric_feature_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_metric_feature_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_metric_feature_type(string_vector vec) {
    c_csharp_runPINVOKE.list_metric_feature_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static metric_feature_type parse_metric_feature_type(string name) {
    metric_feature_type ret = (metric_feature_type)c_csharp_runPINVOKE.parse_metric_feature_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(metric_feature_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_11((int)value);
    return ret;
  }

  public static void list_sub_tile_offset_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_sub_tile_offset_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_sub_tile_offset_type(string_vector vec) {
    c_csharp_runPINVOKE.list_sub_tile_offset_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static sub_tile_offset_type parse_sub_tile_offset_type(string name) {
    sub_tile_offset_type ret = (sub_tile_offset_type)c_csharp_runPINVOKE.parse_sub_tile_offset_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(sub_tile_offset_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_12((int)value);
    return ret;
  }

  public static void list_sub_tile_region_name(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_sub_tile_region_name__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_sub_tile_region_name(string_vector vec) {
    c_csharp_runPINVOKE.list_sub_tile_region_name__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static sub_tile_region_name parse_sub_tile_region_name(string name) {
    sub_tile_region_name ret = (sub_tile_region_name)c_csharp_runPINVOKE.parse_sub_tile_region_name(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(sub_tile_region_name value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_13((int)value);
    return ret;
  }

  public static void list_affine_transform_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_affine_transform_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_affine_transform_type(string_vector vec) {
    c_csharp_runPINVOKE.list_affine_transform_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static affine_transform_type parse_affine_transform_type(string name) {
    affine_transform_type ret = (affine_transform_type)c_csharp_runPINVOKE.parse_affine_transform_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(affine_transform_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_14((int)value);
    return ret;
  }

  public static void list_event_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_event_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_event_type(string_vector vec) {
    c_csharp_runPINVOKE.list_event_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static event_type parse_event_type(string name) {
    event_type ret = (event_type)c_csharp_runPINVOKE.parse_event_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(event_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_15((int)value);
    return ret;
  }

  public static void list_distortion_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_distortion_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_distortion_type(string_vector vec) {
    c_csharp_runPINVOKE.list_distortion_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static distortion_type parse_distortion_type(string name) {
    distortion_type ret = (distortion_type)c_csharp_runPINVOKE.parse_distortion_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(distortion_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_16((int)value);
    return ret;
  }

  public static void list_distortion_curve_type(string_vector vec, uint skip) {
    c_csharp_runPINVOKE.list_distortion_curve_type__SWIG_0(string_vector.getCPtr(vec), skip);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_distortion_curve_type(string_vector vec) {
    c_csharp_runPINVOKE.list_distortion_curve_type__SWIG_1(string_vector.getCPtr(vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public static distortion_curve_type parse_distortion_curve_type(string name) {
    distortion_curve_type ret = (distortion_curve_type)c_csharp_runPINVOKE.parse_distortion_curve_type(name);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(distortion_curve_type value) {
    string ret = c_csharp_runPINVOKE.to_string__SWIG_17((int)value);
    return ret;
  }

  public static readonly int INTEROP_UNKNOWN = c_csharp_runPINVOKE.INTEROP_UNKNOWN_get();
}

}
