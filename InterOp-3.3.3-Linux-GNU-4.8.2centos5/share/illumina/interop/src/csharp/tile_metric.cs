//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class tile_metric : base_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal tile_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.tile_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(tile_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~tile_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_tile_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public tile_metric() : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_0(), true) {
  }

  public tile_metric(tile_metric_header arg0) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_1(tile_metric_header.getCPtr(arg0)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(uint lane, uint tile, float cluster_density, float cluster_density_pf, float cluster_count, float cluster_count_pf, read_metric_vector read_metrics) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_2(lane, tile, cluster_density, cluster_density_pf, cluster_count, cluster_count_pf, read_metric_vector.getCPtr(read_metrics)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(uint lane, uint tile, float cluster_density, float cluster_density_pf, float cluster_count, float cluster_count_pf) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_3(lane, tile, cluster_density, cluster_density_pf, cluster_count, cluster_count_pf), true) {
  }

  public tile_metric(uint lane, uint tile, read_metric_vector read_metrics) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_4(lane, tile, read_metric_vector.getCPtr(read_metrics)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(uint lane, uint tile) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_5(lane, tile), true) {
  }

  public tile_metric(tile_metric metric, read_metric_vector read_metrics) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_6(tile_metric.getCPtr(metric), read_metric_vector.getCPtr(read_metrics)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(tile_metric metric) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_7(tile_metric.getCPtr(metric)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(uint lane, uint tile, float cluster_count, float cluster_count_pf, read_metric_vector read_metrics) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_8(lane, tile, cluster_count, cluster_count_pf, read_metric_vector.getCPtr(read_metrics)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tile_metric(uint lane, uint tile, float cluster_count, float cluster_count_pf) : this(c_csharp_metricsPINVOKE.new_tile_metric__SWIG_9(lane, tile, cluster_count, cluster_count_pf), true) {
  }

  public float cluster_density() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_density(swigCPtr);
    return ret;
  }

  public float cluster_density_k() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_density_k(swigCPtr);
    return ret;
  }

  public float cluster_density_pf() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_density_pf(swigCPtr);
    return ret;
  }

  public float cluster_density_pf_k() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_density_pf_k(swigCPtr);
    return ret;
  }

  public float cluster_count() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count(swigCPtr);
    return ret;
  }

  public float cluster_count_k() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count_k(swigCPtr);
    return ret;
  }

  public float cluster_count_m() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count_m(swigCPtr);
    return ret;
  }

  public float cluster_count_pf() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count_pf(swigCPtr);
    return ret;
  }

  public float cluster_count_pf_k() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count_pf_k(swigCPtr);
    return ret;
  }

  public float cluster_count_pf_m() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_cluster_count_pf_m(swigCPtr);
    return ret;
  }

  public float percent_pf() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_pf(swigCPtr);
    return ret;
  }

  public read_metric_vector read_metrics() {
    read_metric_vector ret = new read_metric_vector(c_csharp_metricsPINVOKE.tile_metric_read_metrics(swigCPtr), false);
    return ret;
  }

  public float percent_aligned(uint n) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_aligned(swigCPtr, n);
    return ret;
  }

  public float percent_phasing(uint n) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_phasing(swigCPtr, n);
    return ret;
  }

  public float percent_prephasing(uint n) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_prephasing(swigCPtr, n);
    return ret;
  }

  public float percent_aligned_at(uint number) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_aligned_at(swigCPtr, number);
    return ret;
  }

  public float percent_phasing_at(uint number) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_phasing_at(swigCPtr, number);
    return ret;
  }

  public float percent_prephasing_at(uint number) {
    float ret = c_csharp_metricsPINVOKE.tile_metric_percent_prephasing_at(swigCPtr, number);
    return ret;
  }

  public uint read_count() {
    uint ret = c_csharp_metricsPINVOKE.tile_metric_read_count(swigCPtr);
    return ret;
  }

  public bool is_dead_tile() {
    bool ret = c_csharp_metricsPINVOKE.tile_metric_is_dead_tile(swigCPtr);
    return ret;
  }

  public void update_phasing_if_missing(uint number, float phasing, float prephasing) {
    c_csharp_metricsPINVOKE.tile_metric_update_phasing_if_missing(swigCPtr, number, phasing, prephasing);
  }

  public float clusterDensity() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_clusterDensity(swigCPtr);
    return ret;
  }

  public float clusterDensityPf() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_clusterDensityPf(swigCPtr);
    return ret;
  }

  public float clusterCount() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_clusterCount(swigCPtr);
    return ret;
  }

  public float clusterCountPf() {
    float ret = c_csharp_metricsPINVOKE.tile_metric_clusterCountPf(swigCPtr);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.tile_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.tile_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.tile_metric_LATEST_VERSION_get();

}

}
