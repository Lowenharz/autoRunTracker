//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class flowcell_data : heatmap_data {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal flowcell_data(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_plotPINVOKE.flowcell_data_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(flowcell_data obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~flowcell_data() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_flowcell_data(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public flowcell_data() : this(c_csharp_plotPINVOKE.new_flowcell_data(), true) {
  }

  public void set_buffer(float[] data_buffer, uint[] id_buffer, uint lanes, uint swaths, uint tiles) {
    unsafe{ fixed ( float* swig_ptrTo_data_buffer = data_buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.flowcell_data_set_buffer(swigCPtr, (global::System.IntPtr)swig_ptrTo_data_buffer, (global::System.IntPtr)swig_ptrTo_id_buffer, lanes, swaths, tiles);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public void resize(uint lanes, uint swaths, uint tiles) {
    c_csharp_plotPINVOKE.flowcell_data_resize(swigCPtr, lanes, swaths, tiles);
  }

  public new void clear() {
    c_csharp_plotPINVOKE.flowcell_data_clear(swigCPtr);
  }

  public uint tile_at(uint index) {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_tile_at(swigCPtr, index);
    return ret;
  }

  public void set_data(uint lane_idx, uint loc, uint tile_id, float value) {
    c_csharp_plotPINVOKE.flowcell_data_set_data(swigCPtr, lane_idx, loc, tile_id, value);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint tile_id(uint lane_idx, uint loc) {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_tile_id(swigCPtr, lane_idx, loc);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_saxis(axis plot_axis) {
    c_csharp_plotPINVOKE.flowcell_data_set_saxis(swigCPtr, axis.getCPtr(plot_axis));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_label(string label) {
    c_csharp_plotPINVOKE.flowcell_data_set_label(swigCPtr, label);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public axis saxis() {
    axis ret = new axis(c_csharp_plotPINVOKE.flowcell_data_saxis(swigCPtr), false);
    return ret;
  }

  public void set_subtitle(string subtitle) {
    c_csharp_plotPINVOKE.flowcell_data_set_subtitle(swigCPtr, subtitle);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_range(float vmin, float vmax) {
    c_csharp_plotPINVOKE.flowcell_data_set_range(swigCPtr, vmin, vmax);
  }

  public string subtitle() {
    string ret = c_csharp_plotPINVOKE.flowcell_data_subtitle(swigCPtr);
    return ret;
  }

  public uint lane_count() {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_lane_count(swigCPtr);
    return ret;
  }

  public uint swath_count() {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_swath_count(swigCPtr);
    return ret;
  }

  public uint tile_count() {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_tile_count(swigCPtr);
    return ret;
  }

  public uint total_tile_count() {
    uint ret = c_csharp_plotPINVOKE.flowcell_data_total_tile_count(swigCPtr);
    return ret;
  }

}

}
