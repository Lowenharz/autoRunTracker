//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Comm {

using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class c_csharp_comm {
  public static uint compute_buffer_size(base_corrected_intensity_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_1(base_corrected_intensity_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_corrected_intensity_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_1(base_corrected_intensity_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_corrected_intensity_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_1((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_corrected_intensity_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_corrected_intensity_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_2(run_directory, base_corrected_intensity_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_corrected_intensity_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_3(run_directory, base_corrected_intensity_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_corrected_intensity_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_3(run_directory, base_corrected_intensity_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_corrected_intensity_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_4(run_directory, base_corrected_intensity_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_corrected_intensity_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_5(run_directory, base_corrected_intensity_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_error_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_2(base_error_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_error_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_2(base_error_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_error_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_2((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_error_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_error_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_4(run_directory, base_error_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_error_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_5(run_directory, base_error_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_error_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_6(run_directory, base_error_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_error_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_7(run_directory, base_error_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_error_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_8(run_directory, base_error_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_extraction_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_3(base_extraction_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_extraction_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_3(base_extraction_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_extraction_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_3((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_extraction_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_extraction_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_6(run_directory, base_extraction_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_extraction_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_7(run_directory, base_extraction_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_extraction_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_9(run_directory, base_extraction_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_extraction_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_10(run_directory, base_extraction_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_extraction_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_11(run_directory, base_extraction_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_image_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_4(base_image_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_image_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_4(base_image_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_image_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_4((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_image_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_image_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_8(run_directory, base_image_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_image_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_9(run_directory, base_image_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_image_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_12(run_directory, base_image_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_image_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_13(run_directory, base_image_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_image_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_14(run_directory, base_image_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_q_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_5(base_q_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_q_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_5(base_q_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_q_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_5((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_q_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_q_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_10(run_directory, base_q_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_q_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_11(run_directory, base_q_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_q_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_15(run_directory, base_q_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_16(run_directory, base_q_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_17(run_directory, base_q_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_tile_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_6(base_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_tile_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_6(base_tile_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_tile_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_6((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_tile_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_tile_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_12(run_directory, base_tile_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_tile_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_13(run_directory, base_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_tile_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_18(run_directory, base_tile_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_tile_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_19(run_directory, base_tile_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_tile_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_20(run_directory, base_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_index_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_7(base_index_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_index_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_7(base_index_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_index_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_7((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_index_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_index_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_14(run_directory, base_index_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_index_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_15(run_directory, base_index_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_index_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_21(run_directory, base_index_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_index_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_22(run_directory, base_index_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_index_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_23(run_directory, base_index_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_q_collapsed_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_8(base_q_collapsed_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_q_collapsed_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_8(base_q_collapsed_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_q_collapsed_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_8((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_q_collapsed_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_q_collapsed_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_16(run_directory, base_q_collapsed_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_q_collapsed_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_17(run_directory, base_q_collapsed_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_q_collapsed_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_24(run_directory, base_q_collapsed_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_collapsed_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_25(run_directory, base_q_collapsed_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_collapsed_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_26(run_directory, base_q_collapsed_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_q_by_lane_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_9(base_q_by_lane_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_q_by_lane_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_9(base_q_by_lane_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_q_by_lane_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_9((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_q_by_lane_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_q_by_lane_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_18(run_directory, base_q_by_lane_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_q_by_lane_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_19(run_directory, base_q_by_lane_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_q_by_lane_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_27(run_directory, base_q_by_lane_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_by_lane_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_28(run_directory, base_q_by_lane_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_by_lane_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_29(run_directory, base_q_by_lane_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_alignment_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_10(base_alignment_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_alignment_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_10(base_alignment_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_alignment_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_10((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_alignment_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_alignment_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_20(run_directory, base_alignment_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_alignment_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_21(run_directory, base_alignment_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_alignment_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_30(run_directory, base_alignment_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_alignment_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_31(run_directory, base_alignment_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_alignment_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_32(run_directory, base_alignment_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_basecalling_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_11(base_basecalling_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_basecalling_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_11(base_basecalling_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_basecalling_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_11((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_basecalling_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_basecalling_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_22(run_directory, base_basecalling_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_basecalling_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_23(run_directory, base_basecalling_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_basecalling_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_33(run_directory, base_basecalling_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_basecalling_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_34(run_directory, base_basecalling_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_basecalling_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_35(run_directory, base_basecalling_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_color_matrix_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_12(base_color_matrix_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_color_matrix_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_12(base_color_matrix_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_color_matrix_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_12((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_color_matrix_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_color_matrix_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_24(run_directory, base_color_matrix_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_color_matrix_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_25(run_directory, base_color_matrix_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_color_matrix_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_36(run_directory, base_color_matrix_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_color_matrix_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_37(run_directory, base_color_matrix_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_color_matrix_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_38(run_directory, base_color_matrix_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_distortion_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_13(base_distortion_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_distortion_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_13(base_distortion_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_distortion_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_13((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_distortion_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_distortion_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_26(run_directory, base_distortion_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_distortion_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_27(run_directory, base_distortion_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_distortion_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_39(run_directory, base_distortion_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_distortion_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_40(run_directory, base_distortion_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_distortion_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_41(run_directory, base_distortion_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_dynamic_phasing_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_14(base_dynamic_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_dynamic_phasing_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_14(base_dynamic_phasing_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_dynamic_phasing_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_14((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_dynamic_phasing_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_dynamic_phasing_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_28(run_directory, base_dynamic_phasing_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_dynamic_phasing_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_29(run_directory, base_dynamic_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_dynamic_phasing_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_42(run_directory, base_dynamic_phasing_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_dynamic_phasing_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_43(run_directory, base_dynamic_phasing_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_dynamic_phasing_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_44(run_directory, base_dynamic_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_event_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_15(base_event_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_event_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_15(base_event_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_event_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_15((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_event_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_event_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_30(run_directory, base_event_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_event_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_31(run_directory, base_event_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_event_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_45(run_directory, base_event_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_event_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_46(run_directory, base_event_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_event_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_47(run_directory, base_event_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_extended_tile_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_16(base_extended_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_extended_tile_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_16(base_extended_tile_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_extended_tile_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_16((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_extended_tile_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_extended_tile_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_32(run_directory, base_extended_tile_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_extended_tile_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_33(run_directory, base_extended_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_extended_tile_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_48(run_directory, base_extended_tile_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_extended_tile_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_49(run_directory, base_extended_tile_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_extended_tile_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_50(run_directory, base_extended_tile_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_fwhm_grid_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_17(base_fwhm_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_fwhm_grid_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_17(base_fwhm_grid_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_fwhm_grid_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_17((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_fwhm_grid_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_fwhm_grid_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_34(run_directory, base_fwhm_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_fwhm_grid_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_35(run_directory, base_fwhm_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_fwhm_grid_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_51(run_directory, base_fwhm_grid_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_fwhm_grid_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_52(run_directory, base_fwhm_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_fwhm_grid_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_53(run_directory, base_fwhm_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_pf_grid_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_18(base_pf_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_pf_grid_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_18(base_pf_grid_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_pf_grid_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_18((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_pf_grid_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_pf_grid_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_36(run_directory, base_pf_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_pf_grid_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_37(run_directory, base_pf_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_pf_grid_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_54(run_directory, base_pf_grid_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_pf_grid_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_55(run_directory, base_pf_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_pf_grid_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_56(run_directory, base_pf_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_phasing_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_19(base_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_phasing_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_19(base_phasing_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_phasing_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_19((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_phasing_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_phasing_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_38(run_directory, base_phasing_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_phasing_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_39(run_directory, base_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_phasing_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_57(run_directory, base_phasing_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_phasing_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_58(run_directory, base_phasing_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_phasing_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_59(run_directory, base_phasing_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_q_grid_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_20(base_q_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_q_grid_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_20(base_q_grid_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_q_grid_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_20((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_q_grid_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_q_grid_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_40(run_directory, base_q_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_q_grid_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_41(run_directory, base_q_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_q_grid_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_60(run_directory, base_q_grid_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_grid_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_61(run_directory, base_q_grid_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_q_grid_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_62(run_directory, base_q_grid_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_registration_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_21(base_registration_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_registration_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_21(base_registration_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_registration_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_21((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_registration_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_registration_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_42(run_directory, base_registration_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_registration_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_43(run_directory, base_registration_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_registration_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_63(run_directory, base_registration_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_registration_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_64(run_directory, base_registration_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_registration_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_65(run_directory, base_registration_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_run_diagnostics_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_22(base_run_diagnostics_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_run_diagnostics_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_22(base_run_diagnostics_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_run_diagnostics_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_22((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_run_diagnostics_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_run_diagnostics_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_44(run_directory, base_run_diagnostics_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_run_diagnostics_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_45(run_directory, base_run_diagnostics_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_run_diagnostics_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_66(run_directory, base_run_diagnostics_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_run_diagnostics_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_67(run_directory, base_run_diagnostics_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_run_diagnostics_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_68(run_directory, base_run_diagnostics_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint compute_buffer_size(base_static_run_metrics metrics) {
    uint ret = c_csharp_commPINVOKE.compute_buffer_size__SWIG_23(base_static_run_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint write_interop_to_buffer(base_static_run_metrics metrics, byte[] buffer, uint buffer_size) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      uint ret = c_csharp_commPINVOKE.write_interop_to_buffer__SWIG_23(base_static_run_metrics.getCPtr(metrics), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }}
  }

  public static void read_interop_from_buffer(byte[] buffer, uint buffer_size, base_static_run_metrics metrics) {
    unsafe{ fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_commPINVOKE.read_interop_from_buffer__SWIG_23((global::System.IntPtr)swig_ptrTo_buffer, buffer_size, base_static_run_metrics.getCPtr(metrics));
      if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void read_interop(string run_directory, base_static_run_metrics metrics, bool use_out) {
    c_csharp_commPINVOKE.read_interop__SWIG_46(run_directory, base_static_run_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void read_interop(string run_directory, base_static_run_metrics metrics) {
    c_csharp_commPINVOKE.read_interop__SWIG_47(run_directory, base_static_run_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool write_interop(string run_directory, base_static_run_metrics metrics, bool use_out, short version) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_69(run_directory, base_static_run_metrics.getCPtr(metrics), use_out, version);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_static_run_metrics metrics, bool use_out) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_70(run_directory, base_static_run_metrics.getCPtr(metrics), use_out);
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool write_interop(string run_directory, base_static_run_metrics metrics) {
    bool ret = c_csharp_commPINVOKE.write_interop__SWIG_71(run_directory, base_static_run_metrics.getCPtr(metrics));
    if (c_csharp_commPINVOKE.SWIGPendingException.Pending) throw c_csharp_commPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
