//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class basecalling_metric : base_cycle_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal basecalling_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.basecalling_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(basecalling_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~basecalling_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_basecalling_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public basecalling_metric() : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_0(), true) {
  }

  public basecalling_metric(basecalling_metric_header header) : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_1(basecalling_metric_header.getCPtr(header)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public basecalling_metric(uint lane, uint tile, uint cycle, float_vector centroids, float_vector covariances, float_vector weights, float mean_determinant) : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_2(lane, tile, cycle, float_vector.getCPtr(centroids), float_vector.getCPtr(covariances), float_vector.getCPtr(weights), mean_determinant), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public basecalling_metric(uint lane, uint tile, uint cycle, float_vector centroids, float_vector covariances, float_vector weights) : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_3(lane, tile, cycle, float_vector.getCPtr(centroids), float_vector.getCPtr(covariances), float_vector.getCPtr(weights)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public basecalling_metric(uint lane, uint tile, uint cycle, float_vector centroids, float_vector covariances) : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_4(lane, tile, cycle, float_vector.getCPtr(centroids), float_vector.getCPtr(covariances)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public basecalling_metric(uint lane, uint tile, uint cycle, float_vector centroids) : this(c_csharp_metricsPINVOKE.new_basecalling_metric__SWIG_5(lane, tile, cycle, float_vector.getCPtr(centroids)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(uint lane, uint tile, uint cycle, point2d_vector centroids, float_vector covariances, float_vector weights, float mean_determinant) {
    c_csharp_metricsPINVOKE.basecalling_metric_set__SWIG_0(swigCPtr, lane, tile, cycle, point2d_vector.getCPtr(centroids), float_vector.getCPtr(covariances), float_vector.getCPtr(weights), mean_determinant);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(uint lane, uint tile, uint cycle, point2d_vector centroids, float_vector covariances, float_vector weights) {
    c_csharp_metricsPINVOKE.basecalling_metric_set__SWIG_1(swigCPtr, lane, tile, cycle, point2d_vector.getCPtr(centroids), float_vector.getCPtr(covariances), float_vector.getCPtr(weights));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(uint lane, uint tile, uint cycle, point2d_vector centroids, float_vector covariances) {
    c_csharp_metricsPINVOKE.basecalling_metric_set__SWIG_2(swigCPtr, lane, tile, cycle, point2d_vector.getCPtr(centroids), float_vector.getCPtr(covariances));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(uint lane, uint tile, uint cycle, point2d_vector centroids) {
    c_csharp_metricsPINVOKE.basecalling_metric_set__SWIG_3(swigCPtr, lane, tile, cycle, point2d_vector.getCPtr(centroids));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float_vector centroids() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.basecalling_metric_centroids(swigCPtr), false);
    return ret;
  }

  public float_vector covariances() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.basecalling_metric_covariances(swigCPtr), false);
    return ret;
  }

  public float_vector weights() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.basecalling_metric_weights(swigCPtr), false);
    return ret;
  }

  public float mean_determinant() {
    float ret = c_csharp_metricsPINVOKE.basecalling_metric_mean_determinant(swigCPtr);
    return ret;
  }

  public float radius(uint base_index) {
    float ret = c_csharp_metricsPINVOKE.basecalling_metric_radius(swigCPtr, base_index);
    return ret;
  }

  public float area() {
    float ret = c_csharp_metricsPINVOKE.basecalling_metric_area(swigCPtr);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.basecalling_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.basecalling_metric_TYPE_get();
  public static readonly int DIM = c_csharp_metricsPINVOKE.basecalling_metric_DIM_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.basecalling_metric_LATEST_VERSION_get();

}

}
