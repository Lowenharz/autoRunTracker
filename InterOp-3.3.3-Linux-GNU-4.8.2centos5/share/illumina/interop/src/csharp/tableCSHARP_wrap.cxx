/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_table(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_table(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_table(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_ImportCustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_ImportCustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_index_out_of_bounds_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_index_out_of_bounds_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(const char *msg) {
    customExceptionCallback_index_out_of_bounds_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_channel_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_channel_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_channel_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception(const char *msg) {
    customExceptionCallback_invalid_channel_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_metric_type = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_metric_type(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_metric_type = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type(const char *msg) {
    customExceptionCallback_invalid_metric_type(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_parameter = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_parameter(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_parameter = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter(const char *msg) {
    customExceptionCallback_invalid_parameter(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_column_type = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_column_type(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_column_type = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type(const char *msg) {
    customExceptionCallback_invalid_column_type(msg);
  }


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    
SWIGINTERN std::map< unsigned long,unsigned long >::mapped_type const &std_map_Sl_uint64_t_Sc_uint64_t_Sg__getitem(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long >::key_type const &key){
        std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_uint64_t_Sg__setitem(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long >::key_type const &key,std::map< unsigned long,unsigned long >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_uint64_t_Sg__ContainsKey(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long >::key_type const &key){
        std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_uint64_t_Sg__Add(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long >::key_type const &key,std::map< unsigned long,unsigned long >::mapped_type const &val){
        std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned long, unsigned long >(key, val));
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_uint64_t_Sg__Remove(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long >::key_type const &key){
        std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *std_map_Sl_uint64_t_Sc_uint64_t_Sg__create_iterator_begin(std::map< uint64_t,uint64_t > *self){
        return new std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator(self->begin());
      }
SWIGINTERN std::map< unsigned long,unsigned long >::key_type const &std_map_Sl_uint64_t_Sc_uint64_t_Sg__get_next_key(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *swigiterator){
        std::map< unsigned long, unsigned long, std::less< unsigned long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_uint64_t_Sg__destroy_iterator(std::map< uint64_t,uint64_t > *self,std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *swigiterator){
        delete swigiterator;
      }

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/logic/table/create_imaging_table_columns.h"
#include "interop/logic/table/create_imaging_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::imaging_column > *new_std_vector_Sl_illumina_interop_model_table_imaging_column_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::table::imaging_column >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::table::imaging_column >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::table::imaging_column std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__getitemcopy(std::vector< illumina::interop::model::table::imaging_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::table::imaging_column const &std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__getitem(std::vector< illumina::interop::model::table::imaging_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__setitem(std::vector< illumina::interop::model::table::imaging_column > *self,int index,illumina::interop::model::table::imaging_column const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__AddRange(std::vector< illumina::interop::model::table::imaging_column > *self,std::vector< illumina::interop::model::table::imaging_column > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::table::imaging_column > *std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__GetRange(std::vector< illumina::interop::model::table::imaging_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::table::imaging_column >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Insert(std::vector< illumina::interop::model::table::imaging_column > *self,int index,illumina::interop::model::table::imaging_column const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__InsertRange(std::vector< illumina::interop::model::table::imaging_column > *self,int index,std::vector< illumina::interop::model::table::imaging_column > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__RemoveAt(std::vector< illumina::interop::model::table::imaging_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__RemoveRange(std::vector< illumina::interop::model::table::imaging_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::table::imaging_column > *std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Repeat(illumina::interop::model::table::imaging_column const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::table::imaging_column >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::table::imaging_column > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::table::imaging_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__SetRange(std::vector< illumina::interop::model::table::imaging_column > *self,int index,std::vector< illumina::interop::model::table::imaging_column > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "interop/logic/table/create_event_table_columns.h"
#include "interop/logic/table/create_event_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::event_column > *new_std_vector_Sl_illumina_interop_model_table_event_column_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::table::event_column >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::table::event_column >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::table::event_column std_vector_Sl_illumina_interop_model_table_event_column_Sg__getitemcopy(std::vector< illumina::interop::model::table::event_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::table::event_column const &std_vector_Sl_illumina_interop_model_table_event_column_Sg__getitem(std::vector< illumina::interop::model::table::event_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__setitem(std::vector< illumina::interop::model::table::event_column > *self,int index,illumina::interop::model::table::event_column const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__AddRange(std::vector< illumina::interop::model::table::event_column > *self,std::vector< illumina::interop::model::table::event_column > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::table::event_column > *std_vector_Sl_illumina_interop_model_table_event_column_Sg__GetRange(std::vector< illumina::interop::model::table::event_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::table::event_column >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__Insert(std::vector< illumina::interop::model::table::event_column > *self,int index,illumina::interop::model::table::event_column const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__InsertRange(std::vector< illumina::interop::model::table::event_column > *self,int index,std::vector< illumina::interop::model::table::event_column > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__RemoveAt(std::vector< illumina::interop::model::table::event_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__RemoveRange(std::vector< illumina::interop::model::table::event_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::table::event_column > *std_vector_Sl_illumina_interop_model_table_event_column_Sg__Repeat(illumina::interop::model::table::event_column const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::table::event_column >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::table::event_column > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::table::event_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__SetRange(std::vector< illumina::interop::model::table::event_column > *self,int index,std::vector< illumina::interop::model::table::event_column > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "interop/logic/table/create_run_diagnostics_table_columns.h"
#include "interop/logic/table/create_run_diagnostics_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::run_diagnostics_column > *new_std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::table::run_diagnostics_column >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::table::run_diagnostics_column >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::table::run_diagnostics_column std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__getitemcopy(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::table::run_diagnostics_column const &std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__getitem(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__setitem(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,illumina::interop::model::table::run_diagnostics_column const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__AddRange(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,std::vector< illumina::interop::model::table::run_diagnostics_column > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::table::run_diagnostics_column > *std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__GetRange(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::table::run_diagnostics_column >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Insert(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,illumina::interop::model::table::run_diagnostics_column const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__InsertRange(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,std::vector< illumina::interop::model::table::run_diagnostics_column > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__RemoveAt(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__RemoveRange(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::table::run_diagnostics_column > *std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Repeat(illumina::interop::model::table::run_diagnostics_column const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::table::run_diagnostics_column >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::table::run_diagnostics_column > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__SetRange(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int index,std::vector< illumina::interop::model::table::run_diagnostics_column > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_map_id_offset__SWIG_0___() {
  void * jresult ;
  std::map< uint64_t,uint64_t > *result = 0 ;
  
  result = (std::map< uint64_t,uint64_t > *)new std::map< uint64_t,uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_map_id_offset__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< unsigned long,unsigned long,std::less< unsigned long > > *arg1 = 0 ;
  std::map< uint64_t,uint64_t > *result = 0 ;
  
  arg1 = (std::map< unsigned long,unsigned long,std::less< unsigned long > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,unsigned long,std::less< unsigned long > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< uint64_t,uint64_t > *)new std::map< uint64_t,uint64_t >((std::map< unsigned long,unsigned long,std::less< unsigned long > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::size_type result;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  result = ((std::map< uint64_t,uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  bool result;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  result = (bool)((std::map< uint64_t,uint64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_Clear___(void * jarg1) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_getitem___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *arg2 = 0 ;
  std::map< unsigned long,unsigned long >::key_type temp2 ;
  std::map< unsigned long,unsigned long >::mapped_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< unsigned long,unsigned long >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< unsigned long,unsigned long >::mapped_type *) &std_map_Sl_uint64_t_Sc_uint64_t_Sg__getitem(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_setitem___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *arg2 = 0 ;
  std::map< unsigned long,unsigned long >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,unsigned long >::key_type temp2 ;
  std::map< unsigned long,unsigned long >::mapped_type temp3 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< unsigned long,unsigned long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< unsigned long,unsigned long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_uint64_t_Sc_uint64_t_Sg__setitem(arg1,(unsigned long const &)*arg2,(unsigned long const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_ContainsKey___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *arg2 = 0 ;
  std::map< unsigned long,unsigned long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< unsigned long,unsigned long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_uint64_t_Sg__ContainsKey(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_Add___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *arg2 = 0 ;
  std::map< unsigned long,unsigned long >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,unsigned long >::key_type temp2 ;
  std::map< unsigned long,unsigned long >::mapped_type temp3 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< unsigned long,unsigned long >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::map< unsigned long,unsigned long >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_uint64_t_Sc_uint64_t_Sg__Add(arg1,(unsigned long const &)*arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_Remove___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *arg2 = 0 ;
  std::map< unsigned long,unsigned long >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  temp2 = (std::map< unsigned long,unsigned long >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_uint64_t_Sg__Remove(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *result = 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  result = (std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *)std_map_Sl_uint64_t_Sc_uint64_t_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_get_next_key___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *) 0 ;
  std::map< unsigned long,unsigned long >::key_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  arg2 = (std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *)jarg2; 
  result = (std::map< unsigned long,unsigned long >::key_type *) &std_map_Sl_uint64_t_Sc_uint64_t_Sg__get_next_key(arg1,arg2);
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_map_id_offset_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *) 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  arg2 = (std::map< unsigned long,unsigned long,std::less< unsigned long > >::iterator *)jarg2; 
  std_map_Sl_uint64_t_Sc_uint64_t_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_map_id_offset___(void * jarg1) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  
  arg1 = (std::map< uint64_t,uint64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column__SWIG_1___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column__SWIG_2___(unsigned long jarg1, unsigned long jarg2, void * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column::string_vector *arg3 = 0 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::imaging_column::string_vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column::string_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column(arg1,arg2,(illumina::interop::model::table::imaging_column::string_vector const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_id__SWIG_0___(void * jarg1) {
  int jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::column_id result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = (illumina::interop::model::table::column_id)((illumina::interop::model::table::imaging_column const *)arg1)->id();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = (std::string *) &((illumina::interop::model::table::imaging_column const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_has_children___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = (bool)((illumina::interop::model::table::imaging_column const *)arg1)->has_children();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_offset__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->offset();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_subcolumns___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::imaging_column::string_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = (illumina::interop::model::table::imaging_column::string_vector *) &((illumina::interop::model::table::imaging_column const *)arg1)->subcolumns();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_full_name___(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t arg2 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::table::imaging_column const *)arg1)->full_name(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_offset__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_id__SWIG_1___(void * jarg1, int jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::column_id arg2 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  arg2 = (illumina::interop::model::table::column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_parse_header_for_id___(void * jarg1, char * jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_to_header__SWIG_0___(int jarg1) {
  char * jresult ;
  illumina::interop::model::table::column_id arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::column_id)jarg1; 
  result = illumina::interop::model::table::imaging_column::to_header(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_to_header__SWIG_1___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::imaging_column::to_header((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_to_name__SWIG_0___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::imaging_column::to_name((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_to_name__SWIG_1___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::imaging_column *arg1 = 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::model::table::imaging_column::to_name((illumina::interop::model::table::imaging_column const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_imaging_column___(void * jarg1) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_table___() {
  void * jresult ;
  illumina::interop::model::table::imaging_table *result = 0 ;
  
  result = (illumina::interop::model::table::imaging_table *)new illumina::interop::model::table::imaging_table();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_set_data___(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::imaging_table::data_vector_t *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::imaging_table::column_vector_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_table::column_vector_t & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::table::imaging_table::data_vector_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_table::data_vector_t & type is null", 0);
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_at__SWIG_0___(void * jarg1, unsigned long jarg2, int jarg3, unsigned long jarg4) {
  float jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::column_id arg3 ;
  size_t arg4 ;
  float result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::column_id)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = (float)((illumina::interop::model::table::imaging_table const *)arg1)->operator ()(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_at__SWIG_1___(void * jarg1, unsigned long jarg2, int jarg3) {
  float jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::column_id arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::column_id)jarg3; 
  try {
    result = (float)((illumina::interop::model::table::imaging_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_columns___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  illumina::interop::model::table::imaging_table::column_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  result = (illumina::interop::model::table::imaging_table::column_vector_t *) &((illumina::interop::model::table::imaging_table const *)arg1)->columns();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  result = (bool)((illumina::interop::model::table::imaging_table const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_clear___(void * jarg1) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_column_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::imaging_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_total_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->total_column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_table_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_imaging_table___(void * jarg1) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_table_id_less___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::imaging_table *arg1 = 0 ;
  illumina::interop::model::table::imaging_table_id_less *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_table const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::table::imaging_table_id_less *)new illumina::interop::model::table::imaging_table_id_less((illumina::interop::model::table::imaging_table const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_imaging_table_id_less___(void * jarg1) {
  illumina::interop::model::table::imaging_table_id_less *arg1 = (illumina::interop::model::table::imaging_table_id_less *) 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_table_id_less *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_invalid_column_type___(void * jarg1) {
  illumina::interop::model::invalid_column_type *arg1 = (illumina::interop::model::invalid_column_type *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_column_type *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  illumina::interop::model::table::imaging_column *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (illumina::interop::model::table::imaging_column *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::table::imaging_column const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::imaging_column > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::imaging_column > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::imaging_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::table::imaging_column > *)new std::vector< illumina::interop::model::table::imaging_column >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::table::imaging_column > *)new std::vector< illumina::interop::model::table::imaging_column >((std::vector< illumina::interop::model::table::imaging_column > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_imaging_column_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::table::imaging_column > *)new_std_vector_Sl_illumina_interop_model_table_imaging_column_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::imaging_column result;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::table::imaging_column((const illumina::interop::model::table::imaging_column &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::table::imaging_column *) &std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::imaging_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::imaging_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__setitem(arg1,arg2,(illumina::interop::model::table::imaging_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__AddRange(arg1,(std::vector< illumina::interop::model::table::imaging_column > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::table::imaging_column > *)std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::imaging_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::imaging_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Insert(arg1,arg2,(illumina::interop::model::table::imaging_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::table::imaging_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::table::imaging_column *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  arg1 = (illumina::interop::model::table::imaging_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_column const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::imaging_column > *)std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Repeat((illumina::interop::model::table::imaging_column const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_imaging_column_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::table::imaging_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_imaging_column_vector___(void * jarg1) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_imaging_table_data___(void * jarg1, void * jarg2, void * jarg3, float* jarg4, unsigned long jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::logic::table::row_offset_map_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t const & type is null", 0);
    return ;
  } 
  arg4 = jarg4;
  arg5 = (size_t)jarg5; 
  try {
    illumina::interop::logic::table::populate_imaging_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::imaging_column > const &)*arg2,(std::map< unsigned long,unsigned long,std::less< unsigned long > > const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_table_rows___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::logic::table::row_offset_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t & type is null", 0);
    return ;
  } 
  illumina::interop::logic::table::count_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_table_columns__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = 0 ;
  size_t result;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::imaging_column > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_imaging_table___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::imaging_table *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::table::imaging_table *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::imaging_table & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_imaging_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_list_imaging_table_metrics_to_load___(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::table::list_imaging_table_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_max_digits___() {
  unsigned int jresult ;
  ::uint32_t result;
  
  result = (::uint32_t)illumina::interop::logic::table::max_digits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_get_column_rounding___(int jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::column_id arg1 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::column_id)jarg1; 
  result = illumina::interop::logic::table::get_column_rounding(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_imaging_table_columns__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4, int jarg5) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< bool > *arg2 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg3 = 0 ;
  size_t arg4 ;
  illumina::interop::constants::layout_type arg5 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > & type is null", 0);
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::constants::layout_type)jarg5; 
  try {
    illumina::interop::logic::table::create_imaging_table_columns((std::vector< std::string > const &)*arg1,(std::vector< bool > const &)*arg2,*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_column_offsets__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_imaging_table_columns__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::imaging_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::imaging_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_imaging_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column__SWIG_1___(int jarg1) {
  void * jresult ;
  illumina::interop::model::table::event_column_id arg1 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_column_id)jarg1; 
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column__SWIG_2___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_id__SWIG_0___(void * jarg1) {
  int jresult ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  illumina::interop::model::table::event_column_id result;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  result = (illumina::interop::model::table::event_column_id)((illumina::interop::model::table::event_column const *)arg1)->id();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  result = (std::string *) &((illumina::interop::model::table::event_column const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_offset__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->offset();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_offset__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_id__SWIG_1___(void * jarg1, int jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  illumina::interop::model::table::event_column_id arg2 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  arg2 = (illumina::interop::model::table::event_column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_parse_header_for_id___(void * jarg1, char * jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_to_header__SWIG_0___(int jarg1) {
  char * jresult ;
  illumina::interop::model::table::event_column_id arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::event_column_id)jarg1; 
  result = illumina::interop::model::table::event_column::to_header(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_to_header__SWIG_1___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::event_column::to_header((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_to_name__SWIG_0___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::event_column::to_name((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_to_name__SWIG_1___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::event_column *arg1 = 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_column const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::model::table::event_column::to_name((illumina::interop::model::table::event_column const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_event_column___(void * jarg1) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_table___() {
  void * jresult ;
  illumina::interop::model::table::event_table *result = 0 ;
  
  result = (illumina::interop::model::table::event_table *)new illumina::interop::model::table::event_table();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_set_data___(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::event_table::data_vector_t *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::event_table::column_vector_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_table::column_vector_t & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::table::event_table::data_vector_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_table::data_vector_t & type is null", 0);
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_at___(void * jarg1, unsigned long jarg2, int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_column_id arg3 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::event_column_id)jarg3; 
  try {
    result = (::uint64_t)((illumina::interop::model::table::event_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_columns___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  illumina::interop::model::table::event_table::column_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  result = (illumina::interop::model::table::event_table::column_vector_t *) &((illumina::interop::model::table::event_table const *)arg1)->columns();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  result = (bool)((illumina::interop::model::table::event_table const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_clear___(void * jarg1) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_column_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::event_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_total_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->total_column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_table_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_event_table___(void * jarg1) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_table_id_less___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::event_table *arg1 = 0 ;
  illumina::interop::model::table::event_table_id_less *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_table *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_table const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::table::event_table_id_less *)new illumina::interop::model::table::event_table_id_less((illumina::interop::model::table::event_table const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_event_table_id_less___(void * jarg1) {
  illumina::interop::model::table::event_table_id_less *arg1 = (illumina::interop::model::table::event_table_id_less *) 0 ;
  
  arg1 = (illumina::interop::model::table::event_table_id_less *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  illumina::interop::model::table::event_column *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (illumina::interop::model::table::event_column *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_column const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::table::event_column const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::event_column > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::event_column > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::event_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::table::event_column > *)new std::vector< illumina::interop::model::table::event_column >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::table::event_column > *)new std::vector< illumina::interop::model::table::event_column >((std::vector< illumina::interop::model::table::event_column > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_event_column_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::table::event_column > *)new_std_vector_Sl_illumina_interop_model_table_event_column_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::event_column result;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_table_event_column_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::table::event_column((const illumina::interop::model::table::event_column &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::table::event_column *) &std_vector_Sl_illumina_interop_model_table_event_column_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::event_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::event_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__setitem(arg1,arg2,(illumina::interop::model::table::event_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::event_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_table_event_column_Sg__AddRange(arg1,(std::vector< illumina::interop::model::table::event_column > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::table::event_column > *)std_vector_Sl_illumina_interop_model_table_event_column_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::event_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::event_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__Insert(arg1,arg2,(illumina::interop::model::table::event_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::event_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::event_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::table::event_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::table::event_column *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  arg1 = (illumina::interop::model::table::event_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_column const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::event_column > *)std_vector_Sl_illumina_interop_model_table_event_column_Sg__Repeat((illumina::interop::model::table::event_column const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  std_vector_Sl_illumina_interop_model_table_event_column_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_event_column_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::event_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::event_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::table::event_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_event_column_vector___(void * jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_event_table_data___(void * jarg1, void * jarg2, void * jarg3, uint64_t* jarg4, unsigned long jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  ::uint64_t *arg4 = (::uint64_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::event_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::logic::table::row_offset_map_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t const & type is null", 0);
    return ;
  } 
  arg4 = jarg4;
  arg5 = (size_t)jarg5; 
  illumina::interop::logic::table::populate_event_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::event_column > const &)*arg2,(std::map< unsigned long,unsigned long,std::less< unsigned long > > const &)*arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_event_table_rows___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::logic::table::row_offset_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t & type is null", 0);
    return ;
  } 
  illumina::interop::logic::table::count_event_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_table_columns__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  size_t result;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::event_column > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_event_table___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::event_table *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::table::event_table *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::event_table & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_list_event_metrics___(void * jarg1) {
  illumina::interop::logic::table::event_description_vector_t *arg1 = 0 ;
  
  arg1 = (illumina::interop::logic::table::event_description_vector_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::event_description_vector_t & type is null", 0);
    return ;
  } 
  illumina::interop::logic::table::list_event_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_event_table_columns__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table_columns(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_column_offsets__SWIG_1___(void * jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::event_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_event_table_columns__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::event_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::event_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column__SWIG_1___(int jarg1) {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_column_id arg1 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column_id)jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column__SWIG_2___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column__SWIG_3___(unsigned long jarg1, unsigned long jarg2, void * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column::string_vector *arg3 = 0 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_column::string_vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column::string_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1,arg2,(illumina::interop::model::table::run_diagnostics_column::string_vector const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_id__SWIG_0___(void * jarg1) {
  int jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column_id result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column_id)((illumina::interop::model::table::run_diagnostics_column const *)arg1)->id();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = (std::string *) &((illumina::interop::model::table::run_diagnostics_column const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_has_children___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = (bool)((illumina::interop::model::table::run_diagnostics_column const *)arg1)->has_children();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_offset__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->offset();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_subcolumns___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column::string_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column::string_vector *) &((illumina::interop::model::table::run_diagnostics_column const *)arg1)->subcolumns();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_full_name___(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t arg2 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->full_name(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_offset__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_id__SWIG_1___(void * jarg1, int jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column_id arg2 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  arg2 = (illumina::interop::model::table::run_diagnostics_column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_parse_header_for_id___(void * jarg1, char * jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_to_header__SWIG_0___(int jarg1) {
  char * jresult ;
  illumina::interop::model::table::run_diagnostics_column_id arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column_id)jarg1; 
  result = illumina::interop::model::table::run_diagnostics_column::to_header(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_to_header__SWIG_1___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::run_diagnostics_column::to_header((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_to_name__SWIG_0___(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = illumina::interop::model::table::run_diagnostics_column::to_name((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_to_name__SWIG_1___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::model::table::run_diagnostics_column::to_name((illumina::interop::model::table::run_diagnostics_column const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_run_diagnostics_column___(void * jarg1) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_table___() {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_table *result = 0 ;
  
  result = (illumina::interop::model::table::run_diagnostics_table *)new illumina::interop::model::table::run_diagnostics_table();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_set_data___(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::run_diagnostics_table::data_vector_t *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_table::column_vector_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_table::column_vector_t & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::table::run_diagnostics_table::data_vector_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_table::data_vector_t & type is null", 0);
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_at___(void * jarg1, unsigned long jarg2, int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column_id arg3 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_column_id)jarg3; 
  try {
    result = (::uint64_t)((illumina::interop::model::table::run_diagnostics_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_columns___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  illumina::interop::model::table::run_diagnostics_table::column_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_table::column_vector_t *) &((illumina::interop::model::table::run_diagnostics_table const *)arg1)->columns();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  result = (bool)((illumina::interop::model::table::run_diagnostics_table const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_clear___(void * jarg1) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_column_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::run_diagnostics_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_total_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->total_column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_table_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_run_diagnostics_table___(void * jarg1) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_table *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (illumina::interop::model::table::run_diagnostics_column *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::table::run_diagnostics_column const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::run_diagnostics_column > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  result = ((std::vector< illumina::interop::model::table::run_diagnostics_column > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)new std::vector< illumina::interop::model::table::run_diagnostics_column >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)new std::vector< illumina::interop::model::table::run_diagnostics_column >((std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_new_run_diagnostics_column_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)new_std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::run_diagnostics_column result;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::table::run_diagnostics_column((const illumina::interop::model::table::run_diagnostics_column &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::table::run_diagnostics_column *) &std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::run_diagnostics_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__setitem(arg1,arg2,(illumina::interop::model::table::run_diagnostics_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__AddRange(arg1,(std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  illumina::interop::model::table::run_diagnostics_column *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_column *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Insert(arg1,arg2,(illumina::interop::model::table::run_diagnostics_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  arg1 = (illumina::interop::model::table::run_diagnostics_column *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_column const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Repeat((illumina::interop::model::table::run_diagnostics_column const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_run_diagnostics_column_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_delete_run_diagnostics_column_vector___(void * jarg1) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_run_diagnostics_table_data___(void * jarg1, void * jarg2, void * jarg3, uint64_t* jarg4, unsigned long jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  ::uint64_t *arg4 = (::uint64_t *) 0 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::logic::table::row_offset_map_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t const & type is null", 0);
    return ;
  } 
  arg4 = jarg4;
  arg5 = (size_t)jarg5; 
  illumina::interop::logic::table::populate_run_diagnostics_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg2,(std::map< unsigned long,unsigned long,std::less< unsigned long > > const &)*arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_run_diagnostics_table_rows___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::logic::table::row_offset_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::row_offset_map_t & type is null", 0);
    return ;
  } 
  illumina::interop::logic::table::count_run_diagnostics_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfTable_count_table_columns__SWIG_2___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  size_t result;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_run_diagnostics_table___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::table::run_diagnostics_table *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::run_diagnostics_table & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_list_run_diagnostics_metrics___(void * jarg1) {
  illumina::interop::logic::table::run_diagnostics_description_vector_t *arg1 = 0 ;
  
  arg1 = (illumina::interop::logic::table::run_diagnostics_description_vector_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::logic::table::run_diagnostics_description_vector_t & type is null", 0);
    return ;
  } 
  illumina::interop::logic::table::list_run_diagnostics_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_run_diagnostics_table_columns__SWIG_0___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table_columns(*arg1,(std::vector< bool > const &)*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_populate_column_offsets__SWIG_2___(void * jarg1) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfTable_create_run_diagnostics_table_columns__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_column_type_CustomExceptionRegisterCallback_invalid_column_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


#ifdef __cplusplus
}
#endif

