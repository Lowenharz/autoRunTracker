/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_metrics(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_metrics(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_metrics(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_ImportCustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_ImportCustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_index_out_of_bounds_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_index_out_of_bounds_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_index_out_of_bounds_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception(const char *msg) {
    customExceptionCallback_index_out_of_bounds_exception(msg);
  }


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include "interop/util/time.h"
#include "interop/constants/enum_description.h"
#include "interop/model/metric_base/metric_exceptions.h"
#include "interop/model/run/run_exceptions.h"
#include "interop/util/xml_exceptions.h"


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    
SWIGINTERN std::vector< illumina::interop::model::metrics::index_info > *new_std_vector_Sl_illumina_interop_model_metrics_index_info_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::index_info >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::index_info >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::index_info std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::index_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::index_info const &std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__getitem(std::vector< illumina::interop::model::metrics::index_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__setitem(std::vector< illumina::interop::model::metrics::index_info > *self,int index,illumina::interop::model::metrics::index_info const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__AddRange(std::vector< illumina::interop::model::metrics::index_info > *self,std::vector< illumina::interop::model::metrics::index_info > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_info > *std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__GetRange(std::vector< illumina::interop::model::metrics::index_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::index_info >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Insert(std::vector< illumina::interop::model::metrics::index_info > *self,int index,illumina::interop::model::metrics::index_info const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__InsertRange(std::vector< illumina::interop::model::metrics::index_info > *self,int index,std::vector< illumina::interop::model::metrics::index_info > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::index_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::index_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_info > *std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Repeat(illumina::interop::model::metrics::index_info const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::index_info >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::index_info > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::index_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__SetRange(std::vector< illumina::interop::model::metrics::index_info > *self,int index,std::vector< illumina::interop::model::metrics::index_info > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__getitem(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__setitem(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__ContainsKey(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__Add(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type const &val){
        std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned long, illumina::interop::model::metric_base::base_metric >(key, val));
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__Remove(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__create_iterator_begin(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self){
        return new std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator(self->begin());
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__get_next_key(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *swigiterator){
        std::map< unsigned long, illumina::interop::model::metric_base::base_metric, std::less< unsigned long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__destroy_iterator(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__getitem(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__setitem(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__ContainsKey(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__Add(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type const &val){
        std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned long, illumina::interop::model::metric_base::base_cycle_metric >(key, val));
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__Remove(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__create_iterator_begin(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self){
        return new std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator(self->begin());
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__get_next_key(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *swigiterator){
        std::map< unsigned long, illumina::interop::model::metric_base::base_cycle_metric, std::less< unsigned long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__destroy_iterator(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::read_metric > *new_std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::read_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::read_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::read_metric std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::read_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::read_metric const &std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::read_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,illumina::interop::model::metrics::read_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::read_metric > *self,std::vector< illumina::interop::model::metrics::read_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::read_metric > *std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::read_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,illumina::interop::model::metrics::read_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,std::vector< illumina::interop::model::metrics::read_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::read_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::read_metric > *std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Repeat(illumina::interop::model::metrics::read_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::read_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::read_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::read_metric > *self,int index,std::vector< illumina::interop::model::metrics::read_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_score_bin > *new_std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::q_score_bin >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::q_score_bin >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::q_score_bin std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::q_score_bin const &std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__getitem(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__setitem(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,illumina::interop::model::metrics::q_score_bin const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__AddRange(std::vector< illumina::interop::model::metrics::q_score_bin > *self,std::vector< illumina::interop::model::metrics::q_score_bin > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_score_bin > *std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__GetRange(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::q_score_bin >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Insert(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,illumina::interop::model::metrics::q_score_bin const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__InsertRange(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,std::vector< illumina::interop::model::metrics::q_score_bin > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_score_bin > *std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Repeat(illumina::interop::model::metrics::q_score_bin const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::q_score_bin >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::q_score_bin > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__SetRange(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int index,std::vector< illumina::interop::model::metrics::q_score_bin > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *new_std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__getitemcopy(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const &std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__getitem(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__setitem(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__AddRange(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__GetRange(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Insert(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__InsertRange(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__RemoveAt(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__RemoveRange(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Repeat(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Reverse__SWIG_0(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Reverse__SWIG_1(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__SetRange(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int index,std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_type > *new_std_vector_Sl_illumina_interop_constants_metric_type_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::constants::metric_type >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::constants::metric_type >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::constants::metric_type std_vector_Sl_illumina_interop_constants_metric_type_Sg__getitemcopy(std::vector< illumina::interop::constants::metric_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::constants::metric_type const &std_vector_Sl_illumina_interop_constants_metric_type_Sg__getitem(std::vector< illumina::interop::constants::metric_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__setitem(std::vector< illumina::interop::constants::metric_type > *self,int index,illumina::interop::constants::metric_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__AddRange(std::vector< illumina::interop::constants::metric_type > *self,std::vector< illumina::interop::constants::metric_type > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_type > *std_vector_Sl_illumina_interop_constants_metric_type_Sg__GetRange(std::vector< illumina::interop::constants::metric_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::constants::metric_type >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__Insert(std::vector< illumina::interop::constants::metric_type > *self,int index,illumina::interop::constants::metric_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__InsertRange(std::vector< illumina::interop::constants::metric_type > *self,int index,std::vector< illumina::interop::constants::metric_type > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__RemoveAt(std::vector< illumina::interop::constants::metric_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__RemoveRange(std::vector< illumina::interop::constants::metric_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_type > *std_vector_Sl_illumina_interop_constants_metric_type_Sg__Repeat(illumina::interop::constants::metric_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::constants::metric_type >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__Reverse__SWIG_0(std::vector< illumina::interop::constants::metric_type > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__Reverse__SWIG_1(std::vector< illumina::interop::constants::metric_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__SetRange(std::vector< illumina::interop::constants::metric_type > *self,int index,std::vector< illumina::interop::constants::metric_type > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_group > *new_std_vector_Sl_illumina_interop_constants_metric_group_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::constants::metric_group >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::constants::metric_group >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::constants::metric_group std_vector_Sl_illumina_interop_constants_metric_group_Sg__getitemcopy(std::vector< illumina::interop::constants::metric_group > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::constants::metric_group const &std_vector_Sl_illumina_interop_constants_metric_group_Sg__getitem(std::vector< illumina::interop::constants::metric_group > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__setitem(std::vector< illumina::interop::constants::metric_group > *self,int index,illumina::interop::constants::metric_group const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__AddRange(std::vector< illumina::interop::constants::metric_group > *self,std::vector< illumina::interop::constants::metric_group > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_group > *std_vector_Sl_illumina_interop_constants_metric_group_Sg__GetRange(std::vector< illumina::interop::constants::metric_group > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::constants::metric_group >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__Insert(std::vector< illumina::interop::constants::metric_group > *self,int index,illumina::interop::constants::metric_group const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__InsertRange(std::vector< illumina::interop::constants::metric_group > *self,int index,std::vector< illumina::interop::constants::metric_group > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__RemoveAt(std::vector< illumina::interop::constants::metric_group > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__RemoveRange(std::vector< illumina::interop::constants::metric_group > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::constants::metric_group > *std_vector_Sl_illumina_interop_constants_metric_group_Sg__Repeat(illumina::interop::constants::metric_group const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::constants::metric_group >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__Reverse__SWIG_0(std::vector< illumina::interop::constants::metric_group > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__Reverse__SWIG_1(std::vector< illumina::interop::constants::metric_group > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__SetRange(std::vector< illumina::interop::constants::metric_group > *self,int index,std::vector< illumina::interop::constants::metric_group > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *new_std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::corrected_intensity_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::corrected_intensity_metric std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::corrected_intensity_metric const &std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,illumina::interop::model::metrics::corrected_intensity_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,illumina::interop::model::metrics::corrected_intensity_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Repeat(illumina::interop::model::metrics::corrected_intensity_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int index,std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::error_metric > *new_std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::error_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::error_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::error_metric std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::error_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::error_metric const &std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::error_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,illumina::interop::model::metrics::error_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::error_metric > *self,std::vector< illumina::interop::model::metrics::error_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::error_metric > *std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::error_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,illumina::interop::model::metrics::error_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,std::vector< illumina::interop::model::metrics::error_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::error_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::error_metric > *std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Repeat(illumina::interop::model::metrics::error_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::error_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::error_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::error_metric > *self,int index,std::vector< illumina::interop::model::metrics::error_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extraction_metric > *new_std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::extraction_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::extraction_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::extraction_metric std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::extraction_metric const &std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,illumina::interop::model::metrics::extraction_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::extraction_metric > *self,std::vector< illumina::interop::model::metrics::extraction_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extraction_metric > *std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::extraction_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,illumina::interop::model::metrics::extraction_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,std::vector< illumina::interop::model::metrics::extraction_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extraction_metric > *std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Repeat(illumina::interop::model::metrics::extraction_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::extraction_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::extraction_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int index,std::vector< illumina::interop::model::metrics::extraction_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::image_metric > *new_std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::image_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::image_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::image_metric std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::image_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::image_metric const &std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::image_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,illumina::interop::model::metrics::image_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::image_metric > *self,std::vector< illumina::interop::model::metrics::image_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::image_metric > *std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::image_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,illumina::interop::model::metrics::image_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,std::vector< illumina::interop::model::metrics::image_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::image_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::image_metric > *std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Repeat(illumina::interop::model::metrics::image_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::image_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::image_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::image_metric > *self,int index,std::vector< illumina::interop::model::metrics::image_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_metric > *new_std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::q_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::q_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::q_metric std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::q_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::q_metric const &std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::q_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,illumina::interop::model::metrics::q_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::q_metric > *self,std::vector< illumina::interop::model::metrics::q_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_metric > *std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::q_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,illumina::interop::model::metrics::q_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::q_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_metric > *std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Repeat(illumina::interop::model::metrics::q_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::q_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::q_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::q_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::tile_metric > *new_std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::tile_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::tile_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::tile_metric std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::tile_metric const &std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,illumina::interop::model::metrics::tile_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::tile_metric > *self,std::vector< illumina::interop::model::metrics::tile_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::tile_metric > *std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::tile_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,illumina::interop::model::metrics::tile_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,std::vector< illumina::interop::model::metrics::tile_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::tile_metric > *std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Repeat(illumina::interop::model::metrics::tile_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::tile_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::tile_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::tile_metric > *self,int index,std::vector< illumina::interop::model::metrics::tile_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_metric > *new_std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::index_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::index_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::index_metric std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::index_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::index_metric const &std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::index_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,illumina::interop::model::metrics::index_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::index_metric > *self,std::vector< illumina::interop::model::metrics::index_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_metric > *std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::index_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,illumina::interop::model::metrics::index_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,std::vector< illumina::interop::model::metrics::index_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::index_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_metric > *std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Repeat(illumina::interop::model::metrics::index_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::index_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::index_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::index_metric > *self,int index,std::vector< illumina::interop::model::metrics::index_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_collapsed_metric > *new_std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::q_collapsed_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::q_collapsed_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::q_collapsed_metric std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::q_collapsed_metric const &std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,illumina::interop::model::metrics::q_collapsed_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_collapsed_metric > *std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::q_collapsed_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,illumina::interop::model::metrics::q_collapsed_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_collapsed_metric > *std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Repeat(illumina::interop::model::metrics::q_collapsed_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::q_collapsed_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_by_lane_metric > *new_std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::q_by_lane_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::q_by_lane_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::q_by_lane_metric std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::q_by_lane_metric const &std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,illumina::interop::model::metrics::q_by_lane_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_by_lane_metric > *std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::q_by_lane_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,illumina::interop::model::metrics::q_by_lane_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_by_lane_metric > *std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Repeat(illumina::interop::model::metrics::q_by_lane_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::q_by_lane_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    
SWIGINTERN std::vector< illumina::interop::model::metrics::point2d > *new_std_vector_Sl_illumina_interop_model_metrics_point2d_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::point2d >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::point2d >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::point2d std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::point2d > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::point2d const &std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__getitem(std::vector< illumina::interop::model::metrics::point2d > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__setitem(std::vector< illumina::interop::model::metrics::point2d > *self,int index,illumina::interop::model::metrics::point2d const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__AddRange(std::vector< illumina::interop::model::metrics::point2d > *self,std::vector< illumina::interop::model::metrics::point2d > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::point2d > *std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__GetRange(std::vector< illumina::interop::model::metrics::point2d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::point2d >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Insert(std::vector< illumina::interop::model::metrics::point2d > *self,int index,illumina::interop::model::metrics::point2d const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__InsertRange(std::vector< illumina::interop::model::metrics::point2d > *self,int index,std::vector< illumina::interop::model::metrics::point2d > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::point2d > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::point2d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::point2d > *std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Repeat(illumina::interop::model::metrics::point2d const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::point2d >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::point2d > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::point2d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__SetRange(std::vector< illumina::interop::model::metrics::point2d > *self,int index,std::vector< illumina::interop::model::metrics::point2d > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__getitem(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__setitem(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__ContainsKey(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__Add(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &key,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type const &val){
        std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned long, illumina::interop::model::metrics::event_metric >(key, val));
      }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__Remove(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &key){
        std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__create_iterator_begin(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self){
        return new std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator(self->begin());
      }
SWIGINTERN std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__get_next_key(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *swigiterator){
        std::map< unsigned long, illumina::interop::model::metrics::event_metric, std::less< unsigned long > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__destroy_iterator(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::alignment_metric > *new_std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::alignment_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::alignment_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::alignment_metric std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::alignment_metric const &std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,illumina::interop::model::metrics::alignment_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::alignment_metric > *self,std::vector< illumina::interop::model::metrics::alignment_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::alignment_metric > *std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::alignment_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,illumina::interop::model::metrics::alignment_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,std::vector< illumina::interop::model::metrics::alignment_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::alignment_metric > *std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Repeat(illumina::interop::model::metrics::alignment_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::alignment_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::alignment_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int index,std::vector< illumina::interop::model::metrics::alignment_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::basecalling_metric > *new_std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::basecalling_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::basecalling_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::basecalling_metric std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::basecalling_metric const &std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,illumina::interop::model::metrics::basecalling_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,std::vector< illumina::interop::model::metrics::basecalling_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::basecalling_metric > *std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::basecalling_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,illumina::interop::model::metrics::basecalling_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,std::vector< illumina::interop::model::metrics::basecalling_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::basecalling_metric > *std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Repeat(illumina::interop::model::metrics::basecalling_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::basecalling_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::basecalling_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int index,std::vector< illumina::interop::model::metrics::basecalling_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::color_matrix_metric > *new_std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::color_matrix_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::color_matrix_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::color_matrix_metric std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::color_matrix_metric const &std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,illumina::interop::model::metrics::color_matrix_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,std::vector< illumina::interop::model::metrics::color_matrix_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::color_matrix_metric > *std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::color_matrix_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,illumina::interop::model::metrics::color_matrix_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,std::vector< illumina::interop::model::metrics::color_matrix_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::color_matrix_metric > *std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Repeat(illumina::interop::model::metrics::color_matrix_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::color_matrix_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int index,std::vector< illumina::interop::model::metrics::color_matrix_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::distortion_metric > *new_std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::distortion_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::distortion_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::distortion_metric std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::distortion_metric const &std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,illumina::interop::model::metrics::distortion_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::distortion_metric > *self,std::vector< illumina::interop::model::metrics::distortion_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::distortion_metric > *std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::distortion_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,illumina::interop::model::metrics::distortion_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,std::vector< illumina::interop::model::metrics::distortion_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::distortion_metric > *std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Repeat(illumina::interop::model::metrics::distortion_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::distortion_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::distortion_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int index,std::vector< illumina::interop::model::metrics::distortion_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *new_std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::dynamic_phasing_metric std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::dynamic_phasing_metric const &std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,illumina::interop::model::metrics::dynamic_phasing_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,illumina::interop::model::metrics::dynamic_phasing_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Repeat(illumina::interop::model::metrics::dynamic_phasing_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int index,std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::event_metric > *new_std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::event_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::event_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::event_metric std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::event_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::event_metric const &std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::event_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,illumina::interop::model::metrics::event_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::event_metric > *self,std::vector< illumina::interop::model::metrics::event_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::event_metric > *std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::event_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,illumina::interop::model::metrics::event_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,std::vector< illumina::interop::model::metrics::event_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::event_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::event_metric > *std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Repeat(illumina::interop::model::metrics::event_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::event_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::event_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::event_metric > *self,int index,std::vector< illumina::interop::model::metrics::event_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extended_tile_metric > *new_std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::extended_tile_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::extended_tile_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::extended_tile_metric std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::extended_tile_metric const &std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,illumina::interop::model::metrics::extended_tile_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,std::vector< illumina::interop::model::metrics::extended_tile_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extended_tile_metric > *std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::extended_tile_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,illumina::interop::model::metrics::extended_tile_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,std::vector< illumina::interop::model::metrics::extended_tile_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::extended_tile_metric > *std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Repeat(illumina::interop::model::metrics::extended_tile_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::extended_tile_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int index,std::vector< illumina::interop::model::metrics::extended_tile_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *new_std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::fwhm_grid_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::fwhm_grid_metric std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::fwhm_grid_metric const &std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,illumina::interop::model::metrics::fwhm_grid_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,illumina::interop::model::metrics::fwhm_grid_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Repeat(illumina::interop::model::metrics::fwhm_grid_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::pf_grid_metric > *new_std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::pf_grid_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::pf_grid_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::pf_grid_metric std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::pf_grid_metric const &std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,illumina::interop::model::metrics::pf_grid_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,std::vector< illumina::interop::model::metrics::pf_grid_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::pf_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::pf_grid_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,illumina::interop::model::metrics::pf_grid_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::pf_grid_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::pf_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Repeat(illumina::interop::model::metrics::pf_grid_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::pf_grid_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::pf_grid_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::phasing_metric > *new_std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::phasing_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::phasing_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::phasing_metric std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::phasing_metric const &std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,illumina::interop::model::metrics::phasing_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::phasing_metric > *self,std::vector< illumina::interop::model::metrics::phasing_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::phasing_metric > *std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::phasing_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,illumina::interop::model::metrics::phasing_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,std::vector< illumina::interop::model::metrics::phasing_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::phasing_metric > *std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Repeat(illumina::interop::model::metrics::phasing_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::phasing_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::phasing_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int index,std::vector< illumina::interop::model::metrics::phasing_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_grid_metric > *new_std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::q_grid_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::q_grid_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::q_grid_metric std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::q_grid_metric const &std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,illumina::interop::model::metrics::q_grid_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,std::vector< illumina::interop::model::metrics::q_grid_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::q_grid_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,illumina::interop::model::metrics::q_grid_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_grid_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_grid_metric > *std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Repeat(illumina::interop::model::metrics::q_grid_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::q_grid_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::q_grid_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int index,std::vector< illumina::interop::model::metrics::q_grid_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::registration_metric > *new_std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::registration_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::registration_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::registration_metric std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::registration_metric const &std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,illumina::interop::model::metrics::registration_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::registration_metric > *self,std::vector< illumina::interop::model::metrics::registration_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::registration_metric > *std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::registration_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,illumina::interop::model::metrics::registration_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,std::vector< illumina::interop::model::metrics::registration_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::registration_metric > *std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Repeat(illumina::interop::model::metrics::registration_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::registration_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::registration_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::registration_metric > *self,int index,std::vector< illumina::interop::model::metrics::registration_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *new_std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::run_diagnostics_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::run_diagnostics_metric std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::run_diagnostics_metric const &std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,illumina::interop::model::metrics::run_diagnostics_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,illumina::interop::model::metrics::run_diagnostics_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Repeat(illumina::interop::model::metrics::run_diagnostics_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int index,std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::static_run_metric > *new_std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::metrics::static_run_metric >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::metrics::static_run_metric >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::metrics::static_run_metric std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__getitemcopy(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::metrics::static_run_metric const &std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__getitem(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__setitem(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,illumina::interop::model::metrics::static_run_metric const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__AddRange(std::vector< illumina::interop::model::metrics::static_run_metric > *self,std::vector< illumina::interop::model::metrics::static_run_metric > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::static_run_metric > *std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__GetRange(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::metrics::static_run_metric >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Insert(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,illumina::interop::model::metrics::static_run_metric const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__InsertRange(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,std::vector< illumina::interop::model::metrics::static_run_metric > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__RemoveAt(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__RemoveRange(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::metrics::static_run_metric > *std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Repeat(illumina::interop::model::metrics::static_run_metric const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::metrics::static_run_metric >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::metrics::static_run_metric > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__SetRange(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int index,std::vector< illumina::interop::model::metrics::static_run_metric > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_index_out_of_bounds_exception___(void * jarg1) {
  illumina::interop::model::index_out_of_bounds_exception *arg1 = (illumina::interop::model::index_out_of_bounds_exception *) 0 ;
  
  arg1 = (illumina::interop::model::index_out_of_bounds_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_csharp_date_time__SWIG_0___(unsigned long jarg1) {
  void * jresult ;
  ::uint64_t arg1 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  arg1 = (::uint64_t)jarg1; 
  result = (illumina::interop::util::csharp_date_time *)new illumina::interop::util::csharp_date_time(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_csharp_date_time__SWIG_1___() {
  void * jresult ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  result = (illumina::interop::util::csharp_date_time *)new illumina::interop::util::csharp_date_time();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_unix__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  result = (::uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->to_unix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_seconds__SWIG_0___(void * jarg1) {
  double jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  double result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  result = (double)((illumina::interop::util::csharp_date_time const *)arg1)->to_seconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_unix__SWIG_1___(unsigned long jarg1) {
  unsigned long jresult ;
  ::uint64_t arg1 ;
  ::uint64_t result;
  
  arg1 = (::uint64_t)jarg1; 
  result = (::uint64_t)illumina::interop::util::csharp_date_time::to_unix(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_seconds__SWIG_1___(unsigned long jarg1) {
  double jresult ;
  ::uint64_t arg1 ;
  double result;
  
  arg1 = (::uint64_t)jarg1; 
  result = (double)illumina::interop::util::csharp_date_time::to_seconds(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_csharp___(unsigned long jarg1) {
  void * jresult ;
  ::uint64_t arg1 ;
  illumina::interop::util::csharp_date_time result;
  
  arg1 = (::uint64_t)jarg1; 
  result = illumina::interop::util::csharp_date_time::to_csharp(arg1);
  jresult = new illumina::interop::util::csharp_date_time((const illumina::interop::util::csharp_date_time &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_value_set___(void * jarg1, unsigned long jarg2) {
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t arg2 ;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  arg2 = (::uint64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_value_get___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  result = (::uint64_t) ((arg1)->value);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_int___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  uint64_t result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  result = (uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->operator uint64_t();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_to_binary___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  result = (::uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->to_binary();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_csharp_date_time_equals___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  illumina::interop::util::csharp_date_time *arg2 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  arg2 = (illumina::interop::util::csharp_date_time *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::util::csharp_date_time const & type is null", 0);
    return 0;
  } 
  result = (bool)((illumina::interop::util::csharp_date_time const *)arg1)->operator ==((illumina::interop::util::csharp_date_time const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_csharp_date_time___(void * jarg1) {
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  
  arg1 = (illumina::interop::util::csharp_date_time *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_empty_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::empty_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::empty_header *)new illumina::interop::model::metric_base::empty_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_empty_header___(void * jarg1) {
  illumina::interop::model::metric_base::empty_header *arg1 = (illumina::interop::model::metric_base::empty_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::empty_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric_header result;
  
  result = illumina::interop::model::metric_base::base_metric_header::default_header();
  jresult = new illumina::interop::model::metric_base::base_metric_header((const illumina::interop::model::metric_base::base_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_metric_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_metric_header *)new illumina::interop::model::metric_base::base_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_metric_header___(void * jarg1) {
  illumina::interop::model::metric_base::base_metric_header *arg1 = (illumina::interop::model::metric_base::base_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_empty_metric___() {
  void * jresult ;
  illumina::interop::model::metric_base::empty_metric *result = 0 ;
  
  result = (illumina::interop::model::metric_base::empty_metric *)new illumina::interop::model::metric_base::empty_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_empty_metric___(void * jarg1) {
  illumina::interop::model::metric_base::empty_metric *arg1 = (illumina::interop::model::metric_base::empty_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::empty_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_LANE_BIT_COUNT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::LANE_BIT_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_TILE_BIT_COUNT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::TILE_BIT_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_CYCLE_BIT_COUNT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::CYCLE_BIT_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_READ_BIT_COUNT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::READ_BIT_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_RESERVED_BIT_COUNT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::RESERVED_BIT_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_READ_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::READ_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_CYCLE_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::CYCLE_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_EVENT_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::EVENT_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_TILE_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::TILE_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_LANE_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_metric::LANE_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_metric__SWIG_0___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_metric__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_metric__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_set_base___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_id___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->id();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_tile_hash___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->tile_hash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_create_id__SWIG_0___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::create_id(arg1,arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_create_id__SWIG_1___(unsigned long jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::create_id(arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_lane_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::lane_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_tile_hash_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::tile_hash_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_tile_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::tile_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_lane___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->lane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_tile___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->tile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_number___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->number(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_section___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->section(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_surface___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->surface(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_swath___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->swath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_phyiscalLocationIndex___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  bool arg6 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationIndex(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_phyiscalLocationColumn___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  bool arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationColumn(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_phyiscalLocationRow___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationRow(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_physical_location_index___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  bool arg6 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = ((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_index(arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_physical_location_column___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  bool arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_column(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_physical_location_row___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_row(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::base_metric::suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_metric___(void * jarg1) {
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_cycle_metric_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_cycle_metric_header *)new illumina::interop::model::metric_base::base_cycle_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric_header result;
  
  result = illumina::interop::model::metric_base::base_cycle_metric_header::default_header();
  jresult = new illumina::interop::model::metric_base::base_cycle_metric_header((const illumina::interop::model::metric_base::base_cycle_metric_header &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_header_max_cycle___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_cycle_metric_header const *)arg1)->max_cycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_cycle_metric_header___(void * jarg1) {
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_cycle_metric__SWIG_0___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_cycle_metric__SWIG_1___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_cycle_metric__SWIG_2___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_cycle_metric__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_set_base__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_set_base__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_cycle___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->cycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_id___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->id();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_cycle_hash___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->cycle_hash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_cycle_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::cycle_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_reserved_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::reserved_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_create_id___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::create_id(arg1,arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_cycle_metric___(void * jarg1) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_read_metric_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_read_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_read_metric_header *)new illumina::interop::model::metric_base::base_read_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_read_metric_header result;
  
  result = illumina::interop::model::metric_base::base_read_metric_header::default_header();
  jresult = new illumina::interop::model::metric_base::base_read_metric_header((const illumina::interop::model::metric_base::base_read_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_read_metric_header___(void * jarg1) {
  illumina::interop::model::metric_base::base_read_metric_header *arg1 = (illumina::interop::model::metric_base::base_read_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_read_metric___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_read_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_read_metric *)new illumina::interop::model::metric_base::base_read_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_set_base__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_set_base__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_read___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_read_metric const *)arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_id___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_read_metric const *)arg1)->id();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_create_id___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_read_metric::create_id(arg1,arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_read_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_read_metric::read_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_read_metric___(void * jarg1) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metric_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_static_run_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_static_run_metric_header *)new illumina::interop::model::metric_base::base_static_run_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_static_run_metric_header___(void * jarg1) {
  illumina::interop::model::metric_base::base_static_run_metric_header *arg1 = (illumina::interop::model::metric_base::base_static_run_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_CHANNEL_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_static_run_metric::CHANNEL_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_DISTORTION_BIT_SHIFT_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::base_static_run_metric::DISTORTION_BIT_SHIFT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metric___(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg1 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_static_run_metric *)new illumina::interop::model::metric_base::base_static_run_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_set_base___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t arg4 ;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::base_static_run_metric::suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_id___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::id_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->id();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_create_id___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::id_t)illumina::interop::model::metric_base::base_static_run_metric::create_id(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_camera___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::count_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->camera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_channel___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::count_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->channel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_distortion_type___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->distortion_type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_lane___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (uint32_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->lane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_tile___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  result = (uint32_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->tile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_static_run_metric___(void * jarg1) {
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_event_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_event_metric_header *)new illumina::interop::model::metric_base::base_event_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_event_metric_header result;
  
  result = illumina::interop::model::metric_base::base_event_metric_header::default_header();
  jresult = new illumina::interop::model::metric_base::base_event_metric_header((const illumina::interop::model::metric_base::base_event_metric_header &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_header_max_cycle___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric_header *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_event_metric_header const *)arg1)->max_cycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_event_metric_header___(void * jarg1) {
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric__SWIG_0___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::constants::event_type arg4 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::constants::event_type)jarg4; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric__SWIG_1___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric__SWIG_3___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metric__SWIG_4___() {
  void * jresult ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_set_base__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_set_base__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  (arg1)->set_base(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_event_type__SWIG_0___(void * jarg1) {
  int jresult ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::constants::event_type result;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  result = (illumina::interop::constants::event_type)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->event_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_event_type_long___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  result = (::uint64_t)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->event_type_long();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_event_type__SWIG_1___(void * jarg1, int jarg2) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::constants::event_type arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  arg2 = (illumina::interop::constants::event_type)jarg2; 
  (arg1)->event_type(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_id___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->id();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_create_id___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t arg4 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::id_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_event_metric::create_id(arg1,arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_event_metric___(void * jarg1) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::point2d *arg1 = 0 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d((illumina::interop::model::metrics::point2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_x___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::point2d *)jarg1; 
  result = (float)((illumina::interop::model::metrics::point2d const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_y___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::point2d *)jarg1; 
  result = (float)((illumina::interop::model::metrics::point2d const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_point2d___(void * jarg1) {
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::point2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  illumina::interop::model::metrics::index_info *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::index_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_info const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::index_info const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_info > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_info > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_info_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::index_info > *)new std::vector< illumina::interop::model::metrics::index_info >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_info_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_info > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::index_info > *)new std::vector< illumina::interop::model::metrics::index_info >((std::vector< illumina::interop::model::metrics::index_info > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_info_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_info > *)new_std_vector_Sl_illumina_interop_model_metrics_index_info_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_info result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::index_info((const illumina::interop::model::metrics::index_info &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::index_info *) &std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_info *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::index_info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_info const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::index_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_info > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::index_info > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_info > *)std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_info *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::index_info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_info const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::index_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_info > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::index_info > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_info const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_info > *)std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Repeat((illumina::interop::model::metrics::index_info const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_info > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::index_info > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_index_info_vector___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_info > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric_map__SWIG_0___() {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *result = 0 ;
  
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric_map__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *result = 0 ;
  
  arg1 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_metric >((std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::size_type result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  result = ((std::map< uint64_t,illumina::interop::model::metric_base::base_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metric_base::base_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_Clear___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_getitem___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type temp2 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__getitem(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_setitem___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__setitem(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_metric const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_ContainsKey___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__ContainsKey(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_Add___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__Add(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_Remove___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__Remove(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  result = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_get_next_key___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *)jarg2; 
  result = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric >::key_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__get_next_key(arg1,arg2);
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_map_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_metric,std::less< unsigned long > >::iterator *)jarg2; 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_tile_metric_map___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_cycle_metric_map__SWIG_0___() {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *result = 0 ;
  
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_cycle_metric_map__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *result = 0 ;
  
  arg1 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric >((std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::size_type result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  result = ((std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_Clear___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_getitem___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type temp2 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__getitem(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_setitem___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__setitem(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_cycle_metric const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_ContainsKey___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__ContainsKey(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_Add___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__Add(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_cycle_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_Remove___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__Remove(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  result = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_get_next_key___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *)jarg2; 
  result = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::key_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__get_next_key(arg1,arg2);
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_cycle_metric_map_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric,std::less< unsigned long > >::iterator *)jarg2; 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_cycle_metric_map___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  illumina::interop::model::metrics::read_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::read_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::read_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::read_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::read_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::read_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::read_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::read_metric > *)new std::vector< illumina::interop::model::metrics::read_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::read_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::read_metric > *)new std::vector< illumina::interop::model::metrics::read_metric >((std::vector< illumina::interop::model::metrics::read_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::read_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::read_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::read_metric((const illumina::interop::model::metrics::read_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::read_metric *) &std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::read_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::read_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::read_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::read_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::read_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::read_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::read_metric > *)std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::read_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::read_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::read_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::read_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::read_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::read_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::read_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::read_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::read_metric > *)std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Repeat((illumina::interop::model::metrics::read_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::read_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::read_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_read_metric_vector___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  illumina::interop::model::metrics::q_score_bin *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_score_bin *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_bin const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::q_score_bin const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_score_bin > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_score_bin > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_score_bin >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)new std::vector< illumina::interop::model::metrics::q_score_bin >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)new std::vector< illumina::interop::model::metrics::q_score_bin >((std::vector< illumina::interop::model::metrics::q_score_bin > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)new_std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_score_bin result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::q_score_bin((const illumina::interop::model::metrics::q_score_bin &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_score_bin *) &std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_score_bin *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_score_bin *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_bin const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::q_score_bin const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::q_score_bin > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_score_bin *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_score_bin *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_bin const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::q_score_bin const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_score_bin > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_bin *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_bin const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Repeat((illumina::interop::model::metrics::q_score_bin const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_score_bin > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_score_bin_vector___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_name_pair__SWIG_0___() {
  void * jresult ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_name_pair__SWIG_1___(int jarg1, char * jarg2) {
  void * jresult ;
  illumina::interop::constants::metric_type arg1 ;
  std::string arg2 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_name_pair__SWIG_2___(void * jarg1) {
  void * jresult ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< illumina::interop::constants::metric_type,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >((std::pair< illumina::interop::constants::metric_type,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_name_pair_first_set___(void * jarg1, int jarg2) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_name_pair_first_get___(void * jarg1) {
  int jresult ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  illumina::interop::constants::metric_type result;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1; 
  result = (illumina::interop::constants::metric_type) ((arg1)->first);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_name_pair_second_set___(void * jarg1, char * jarg2) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_name_pair_second_get___(void * jarg1) {
  char * jresult ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_metric_type_name_pair___(void * jarg1) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description__SWIG_0___() {
  void * jresult ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description__SWIG_1___(int jarg1, char * jarg2) {
  void * jresult ;
  illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >(arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description__SWIG_2___(void * jarg1) {
  void * jresult ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< illumina::interop::constants::metric_type,std::string > const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >((std::pair< illumina::interop::constants::metric_type,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_value___(void * jarg1) {
  int jresult ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t result;
  
  arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg1; 
  result = (illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t)((illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const *)arg1)->value();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg1; 
  result = (std::string *) &((illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const *)arg1)->description();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_metric_type_description___(void * jarg1) {
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  
  arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_description_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)new_std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > result;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >((const illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) &std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__setitem(arg1,arg2,(illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__AddRange(arg1,(std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Insert(arg1,arg2,(illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Repeat((illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_description_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_metric_type_description_vector___(void * jarg1) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Add___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  illumina::interop::constants::metric_type *arg2 = 0 ;
  illumina::interop::constants::metric_type temp2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  temp2 = (illumina::interop::constants::metric_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((illumina::interop::constants::metric_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_type > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_type > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::metric_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  result = (std::vector< illumina::interop::constants::metric_type > *)new std::vector< illumina::interop::constants::metric_type >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = 0 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_type > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::constants::metric_type > *)new std::vector< illumina::interop::constants::metric_type >((std::vector< illumina::interop::constants::metric_type > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_type_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::constants::metric_type > *)new_std_vector_Sl_illumina_interop_constants_metric_type_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_type result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::metric_type)std_vector_Sl_illumina_interop_constants_metric_type_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_type *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::metric_type *) &std_vector_Sl_illumina_interop_constants_metric_type_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_type *arg3 = 0 ;
  illumina::interop::constants::metric_type temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::metric_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__setitem(arg1,arg2,(enum illumina::interop::constants::metric_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< illumina::interop::constants::metric_type > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (std::vector< illumina::interop::constants::metric_type > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_constants_metric_type_Sg__AddRange(arg1,(std::vector< enum illumina::interop::constants::metric_type > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::constants::metric_type > *)std_vector_Sl_illumina_interop_constants_metric_type_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_type *arg3 = 0 ;
  illumina::interop::constants::metric_type temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::metric_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__Insert(arg1,arg2,(enum illumina::interop::constants::metric_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::metric_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::metric_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__InsertRange(arg1,arg2,(std::vector< enum illumina::interop::constants::metric_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::constants::metric_type *arg1 = 0 ;
  int arg2 ;
  illumina::interop::constants::metric_type temp1 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  temp1 = (illumina::interop::constants::metric_type)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::constants::metric_type > *)std_vector_Sl_illumina_interop_constants_metric_type_Sg__Repeat((enum illumina::interop::constants::metric_type const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  std_vector_Sl_illumina_interop_constants_metric_type_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_type_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::metric_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::metric_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__SetRange(arg1,arg2,(std::vector< enum illumina::interop::constants::metric_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_metric_type_vector___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Add___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  illumina::interop::constants::metric_group *arg2 = 0 ;
  illumina::interop::constants::metric_group temp2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  temp2 = (illumina::interop::constants::metric_group)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((illumina::interop::constants::metric_group const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_group > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_group > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::metric_group >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_group_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  result = (std::vector< illumina::interop::constants::metric_group > *)new std::vector< illumina::interop::constants::metric_group >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_group_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::constants::metric_group > *)new std::vector< illumina::interop::constants::metric_group >((std::vector< illumina::interop::constants::metric_group > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_metric_group_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::constants::metric_group > *)new_std_vector_Sl_illumina_interop_constants_metric_group_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_group result;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::metric_group)std_vector_Sl_illumina_interop_constants_metric_group_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_group *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::metric_group *) &std_vector_Sl_illumina_interop_constants_metric_group_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_group *arg3 = 0 ;
  illumina::interop::constants::metric_group temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::metric_group)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__setitem(arg1,arg2,(enum illumina::interop::constants::metric_group const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< illumina::interop::constants::metric_group > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (std::vector< illumina::interop::constants::metric_group > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_constants_metric_group_Sg__AddRange(arg1,(std::vector< enum illumina::interop::constants::metric_group > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::constants::metric_group > *)std_vector_Sl_illumina_interop_constants_metric_group_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  illumina::interop::constants::metric_group *arg3 = 0 ;
  illumina::interop::constants::metric_group temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::metric_group)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__Insert(arg1,arg2,(enum illumina::interop::constants::metric_group const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::metric_group > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::metric_group > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__InsertRange(arg1,arg2,(std::vector< enum illumina::interop::constants::metric_group > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::constants::metric_group *arg1 = 0 ;
  int arg2 ;
  illumina::interop::constants::metric_group temp1 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  temp1 = (illumina::interop::constants::metric_group)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::constants::metric_group > *)std_vector_Sl_illumina_interop_constants_metric_group_Sg__Repeat((enum illumina::interop::constants::metric_group const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  std_vector_Sl_illumina_interop_constants_metric_group_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_metric_group_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::metric_group > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::metric_group > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__SetRange(arg1,arg2,(std::vector< enum illumina::interop::constants::metric_group > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_metric_group_vector___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::corrected_intensity_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::corrected_intensity_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *arg7 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg8 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & type is null", 0);
    return 0;
  } 
  arg7 = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5,(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg6,(illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t const &)*arg7,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float* jarg6, uint16_t* jarg7, uint32_t* jarg8) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t arg7 = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t arg8 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6;
  arg7 = jarg7;
  arg8 = jarg8;
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_4___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg4,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_5___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, uint16_t* jarg4, uint32_t* jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t arg4 = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t arg5 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4;
  arg5 = jarg5;
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_corrected_intensity_metric__SWIG_6___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_set___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg5);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_average_cycle_intensity___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->average_cycle_intensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_all___(void * jarg1, int jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_all_float___(void * jarg1, int jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all_float(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_called___(void * jarg1, int jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_called(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_called_counts_array___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->called_counts_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_called_array__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_called_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_all_array___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_called_counts___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->called_counts(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_no_calls___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->no_calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_signal_to_noise___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->signal_to_noise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_total_calls__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_calls(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_total_calls__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_total_intensity___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_intensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_total_called_intensity___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_called_intensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percent_base___(void * jarg1, int jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_base(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percent_bases___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_bases();
  jresult = new illumina::interop::model::metrics::corrected_intensity_metric::float_array_t((const illumina::interop::model::metrics::corrected_intensity_metric::float_array_t &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percent_nocall___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_nocall();
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_corrected_int_called_array__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & type is null", 0);
    return ;
  } 
  (arg1)->corrected_int_called_array((illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_any_valid_called_int___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->any_valid_called_int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_averageCycleIntensity___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->averageCycleIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_correctedIntAll__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_correctedIntCalled__SWIG_0___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntCalled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_correctedIntCalled__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntCalled();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_correctedIntAll__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntAll();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_calledCounts__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->calledCounts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_noCalls___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->noCalls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percentBase___(void * jarg1, long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::difference_type arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric::difference_type)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentBase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_calledCounts__SWIG_1___(void * jarg1, long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::difference_type arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric::difference_type)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->calledCounts(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_signalToNoise___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->signalToNoise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_totalCalls__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalls(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_totalCalls__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_totalIntensity___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_totalCalledIntensity___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalledIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percentIntensity___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentIntensity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_percentCalledIntensity___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentCalledIntensity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::corrected_intensity_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_corrected_intensity_metric___(void * jarg1) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_MAX_MISMATCH_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::error_metric::MAX_MISMATCH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::error_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::error_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_error_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_error_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_error_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_error_rate___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::error_metric const *)arg1)->error_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_mismatch_cluster_count___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_cluster_count(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_mismatch_count___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_mismatch_cluster_counts___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  illumina::interop::model::metrics::error_metric::uint_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  result = (illumina::interop::model::metrics::error_metric::uint_array_t *) &((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_cluster_counts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_errorRate___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::error_metric const *)arg1)->errorRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::error_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_error_metric___(void * jarg1) {
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_MAX_CHANNELS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extraction_metric_header::MAX_CHANNELS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric_header___(unsigned short jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::extraction_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric_header *)new illumina::interop::model::metrics::extraction_metric_header(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_channel_count__SWIG_0___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  illumina::interop::model::metrics::extraction_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric_header::ushort_t)((illumina::interop::model::metrics::extraction_metric_header const *)arg1)->channel_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_channel_count__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->channel_count(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::extraction_metric_header > result;
  
  result = illumina::interop::model::metrics::extraction_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::extraction_metric_header((const illumina::interop::model::metrics::extraction_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_extraction_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_MAX_CHANNELS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extraction_metric::MAX_CHANNELS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extraction_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extraction_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric((illumina::interop::model::metrics::extraction_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  arg6 = (illumina::interop::model::metrics::extraction_metric::float_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, uint16_t* jarg5, float* jarg6, unsigned int jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t)jarg4; 
  arg5 = jarg5;
  arg6 = jarg6;
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_4___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, uint16_t* jarg5, float* jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t)jarg4; 
  arg5 = jarg5;
  arg6 = jarg6;
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_5___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = (illumina::interop::util::csharp_date_time *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null illumina::interop::util::csharp_date_time const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  arg6 = (illumina::interop::model::metrics::extraction_metric::float_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_6___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, uint16_t* jarg5, float* jarg6, unsigned int jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = (illumina::interop::util::csharp_date_time *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null illumina::interop::util::csharp_date_time const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5;
  arg6 = jarg6;
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_7___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, uint16_t* jarg5, float* jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = (illumina::interop::util::csharp_date_time *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null illumina::interop::util::csharp_date_time const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5;
  arg6 = jarg6;
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extraction_metric__SWIG_8___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::extraction_metric::float_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg4,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_set__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned long jarg5, void * jarg6, void * jarg7) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg5 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg7 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::ulong_t)jarg5; 
  arg6 = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & type is null", 0);
    return ;
  } 
  arg7 = (illumina::interop::model::metrics::extraction_metric::float_array_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,arg5,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg6,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_set__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & type is null", 0);
    return ;
  } 
  arg6 = (illumina::interop::model::metrics::extraction_metric::float_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_date_time__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_date_time_csharp___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::util::csharp_date_time *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time_csharp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_date_time_csharp_raw___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time_csharp_raw();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_max_intensity___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->max_intensity(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_focus_score___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::extraction_metric const *)arg1)->focus_score(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_max_intensity_values___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->max_intensity_values();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_focus_scores___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::float_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->focus_scores();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_channel_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::extraction_metric const *)arg1)->channel_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_focusScore___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::extraction_metric const *)arg1)->focusScore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_dateTime___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->dateTime();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_focusScores___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::float_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->focusScores();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_date_time__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::ulong_t)jarg2; 
  (arg1)->date_time(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_is_any_p90_zero___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::extraction_metric const *)arg1)->is_any_p90_zero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::extraction_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_extraction_metric___(void * jarg1) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_MAX_CHANNELS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::image_metric_header::MAX_CHANNELS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_image_metric_header___(unsigned short jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::image_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header *)new illumina::interop::model::metrics::image_metric_header(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_channelCount___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  illumina::interop::model::metrics::image_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header::ushort_t)((illumina::interop::model::metrics::image_metric_header const *)arg1)->channelCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_channel_count__SWIG_0___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  illumina::interop::model::metrics::image_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header::ushort_t)((illumina::interop::model::metrics::image_metric_header const *)arg1)->channel_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_channel_count__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->channel_count(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::image_metric_header > result;
  
  result = illumina::interop::model::metrics::image_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::image_metric_header((const illumina::interop::model::metrics::image_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_image_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_MAX_CHANNELS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::image_metric::MAX_CHANNELS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::image_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::image_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_image_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_image_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric((illumina::interop::model::metrics::image_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_image_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::image_metric::ushort_array_t *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  arg6 = (illumina::interop::model::metrics::image_metric::ushort_array_t *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric::ushort_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::image_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::image_metric::ushort_array_t const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_image_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, uint16_t* jarg5, uint16_t* jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  illumina::interop::model::metrics::image_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::image_metric::ushort_pointer_t) (illumina::interop::model::metrics::image_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::image_metric::ushort_pointer_t arg6 = (illumina::interop::model::metrics::image_metric::ushort_pointer_t) (illumina::interop::model::metrics::image_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = jarg5;
  arg6 = jarg6;
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_min_contrast___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->min_contrast(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_max_contrast___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->max_contrast(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_min_contrast_array___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->min_contrast_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_max_contrast_array___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->max_contrast_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_channel_count___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->channel_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_is_any_channel_blank___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::image_metric const *)arg1)->is_any_channel_blank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_minContrast__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->minContrast(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_maxContrast__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->maxContrast(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_minContrast__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->minContrast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_maxContrast__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->maxContrast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_channelCount___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->channelCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::image_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_image_metric___(void * jarg1) {
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin__SWIG_0___(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg2 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg3 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg3; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin__SWIG_1___(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg2; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin__SWIG_2___(unsigned short jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_bin__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_lower___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin *)jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->lower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_upper___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin *)jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->upper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_bin_value___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin *)jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_score_bin___(void * jarg1) {
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_bin *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_MAX_Q_BINS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_score_header::MAX_Q_BINS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_header__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_score_header *)new illumina::interop::model::metrics::q_score_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_score_header__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_score_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_score_header *)new illumina::interop::model::metrics::q_score_header((illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_bin_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_score_bin *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->bin_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_get_bins___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  result = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->get_bins();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_bins___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  result = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *) &(arg1)->bins();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_bin_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->bin_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_q_val_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->q_val_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_index_for_q_value___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->index_for_q_value(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_binCount___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->binCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header result;
  
  result = illumina::interop::model::metrics::q_score_header::default_header();
  jresult = new illumina::interop::model::metrics::q_score_header((const illumina::interop::model::metrics::q_score_header &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_binAt___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::q_score_bin *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->binAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_score_header___(void * jarg1) {
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_MAX_Q_BINS_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_metric::MAX_Q_BINS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric((illumina::interop::model::metrics::q_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg4 = 0 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::q_metric::uint32_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::uint32_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, uint32_t* jarg4, unsigned int jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint_pointer_t arg4 = (illumina::interop::model::metrics::q_metric::uint_pointer_t) (illumina::interop::model::metrics::q_metric::uint_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4;
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_set___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::q_metric::uint32_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::uint32_vector const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_qscore_hist__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->qscore_hist(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_qscore_hist__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (illumina::interop::model::metrics::q_metric::uint32_vector *) &((illumina::interop::model::metrics::q_metric const *)arg1)->qscore_hist();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::q_metric const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_sum_qscore___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->sum_qscore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_sum_qscore_cumulative___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->sum_qscore_cumulative();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_total_over_qscore__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_total_over_qscore__SWIG_1___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_total_over_qscore_cumulative__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore_cumulative(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_percent_over_qscore__SWIG_0___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_percent_over_qscore_cumulative__SWIG_0___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore_cumulative(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_total_over_qscore_cumulative__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore_cumulative(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_percent_over_qscore__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  float jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_percent_over_qscore_cumulative__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  float jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore_cumulative(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_median__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg2 = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->median((illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_median__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->median();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_is_cumulative_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::q_metric const *)arg1)->is_cumulative_empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_accumulate___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return ;
  } 
  (arg1)->accumulate((illumina::interop::model::metrics::q_metric const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_compress___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::header_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_metric::header_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::header_type const & type is null", 0);
    return ;
  } 
  (arg1)->compress((illumina::interop::model::metrics::q_metric::header_type const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_qscoreHist__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->qscoreHist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_qscoreHist__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  result = (illumina::interop::model::metrics::q_metric::uint32_vector *) &((illumina::interop::model::metrics::q_metric const *)arg1)->qscoreHist();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::q_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_metric___(void * jarg1) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric_header___(float jarg1) {
  void * jresult ;
  float arg1 ;
  illumina::interop::model::metrics::tile_metric_header *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::metrics::tile_metric_header *)new illumina::interop::model::metrics::tile_metric_header(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_header_density___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric_header *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric_header const *)arg1)->density();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::tile_metric_header > result;
  
  result = illumina::interop::model::metrics::tile_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::tile_metric_header((const illumina::interop::model::metrics::tile_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_tile_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric__SWIG_0___(unsigned int jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric__SWIG_1___(unsigned int jarg1, float jarg2, float jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric__SWIG_2___(unsigned int jarg1, float jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric__SWIG_3___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_read_metric__SWIG_4___() {
  void * jresult ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_read___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  illumina::interop::model::metrics::read_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  result = (illumina::interop::model::metrics::read_metric::uint_t)((illumina::interop::model::metrics::read_metric const *)arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_aligned__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_aligned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_phasing__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_phasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_prephasing__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_prephasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_aligned__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_aligned(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_phasing__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_phasing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_read_metric_percent_prephasing__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_prephasing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_read_metric___(void * jarg1) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::read_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::tile_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::tile_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, void * jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg7 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (illumina::interop::model::metrics::tile_metric::read_metric_vector *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_4___(unsigned int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg3 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::tile_metric::read_metric_vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_5___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_6___(void * jarg1, void * jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg2 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::metrics::tile_metric::read_metric_vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric const &)*arg1,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_7___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_8___(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg5 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (illumina::interop::model::metrics::tile_metric::read_metric_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_tile_metric__SWIG_9___(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_density___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_density_k___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_k();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_density_pf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_density_pf_k___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_pf_k();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count_k___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_k();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count_m___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_m();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count_pf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count_pf_k___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf_k();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_cluster_count_pf_m___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf_m();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_pf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_read_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (illumina::interop::model::metrics::tile_metric::read_metric_vector *) &((illumina::interop::model::metrics::tile_metric const *)arg1)->read_metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_aligned___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_aligned(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_phasing___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_phasing(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_prephasing___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_prephasing(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_aligned_at___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_aligned_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_phasing_at___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_phasing_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_percent_prephasing_at___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_prephasing_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_read_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::tile_metric const *)arg1)->read_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_is_dead_tile___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::tile_metric const *)arg1)->is_dead_tile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_update_phasing_if_missing___(void * jarg1, unsigned long jarg2, float jarg3, float jarg4) {
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->update_phasing_if_missing(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_clusterDensity___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterDensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_clusterDensityPf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterDensityPf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_clusterCount___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_clusterCountPf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterCountPf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::tile_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_tile_metric___(void * jarg1) {
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_info__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  result = (illumina::interop::model::metrics::index_info *)new illumina::interop::model::metrics::index_info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_info__SWIG_1___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ::uint64_t arg4 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (::uint64_t)jarg4; 
  result = (illumina::interop::model::metrics::index_info *)new illumina::interop::model::metrics::index_info((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_index_seq___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->index_seq();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_sample_id___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->sample_id();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_sample_proj___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->sample_proj();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_cluster_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = (::uint64_t)((illumina::interop::model::metrics::index_info const *)arg1)->cluster_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_is_dual___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::index_info const *)arg1)->is_dual();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_index1___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->index1();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_index2___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->index2();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_info_unique_id___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->unique_id();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_index_info___(void * jarg1) {
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_metric_header___() {
  void * jresult ;
  illumina::interop::model::metrics::index_metric_header *result = 0 ;
  
  result = (illumina::interop::model::metrics::index_metric_header *)new illumina::interop::model::metrics::index_metric_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_header_index_order__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric_header *)jarg1; 
  result = (std::vector< std::string > *) &((illumina::interop::model::metrics::index_metric_header const *)arg1)->index_order();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_header_index_order__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric_header *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->index_order((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metrics::index_metric_header result;
  
  result = illumina::interop::model::metrics::index_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::index_metric_header((const illumina::interop::model::metrics::index_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_index_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::index_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::index_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::index_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric((illumina::interop::model::metrics::index_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_index_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::index_metric::index_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::index_metric::index_array_t *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric::index_array_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::index_metric::index_array_t const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::index_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::index_metric const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_indices__SWIG_0___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metrics::index_info *) &((illumina::interop::model::metrics::index_metric const *)arg1)->indices(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_indices__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  illumina::interop::model::metrics::index_metric::index_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric *)jarg1; 
  result = (illumina::interop::model::metrics::index_metric::index_array_t *) &((illumina::interop::model::metrics::index_metric const *)arg1)->indices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::index_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_index_metric___(void * jarg1) {
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_collapsed_header__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_collapsed_header *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_collapsed_header *)new illumina::interop::model::metrics::q_collapsed_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_collapsed_header__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_collapsed_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_collapsed_header *)new illumina::interop::model::metrics::q_collapsed_header((illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_header_default_header___() {
  void * jresult ;
  illumina::interop::model::metrics::q_collapsed_header result;
  
  result = illumina::interop::model::metrics::q_collapsed_header::default_header();
  jresult = new illumina::interop::model::metrics::q_collapsed_header((const illumina::interop::model::metrics::q_collapsed_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::q_collapsed_header *arg1 = (illumina::interop::model::metrics::q_collapsed_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_collapsed_header___(void * jarg1) {
  illumina::interop::model::metrics::q_collapsed_header *arg1 = (illumina::interop::model::metrics::q_collapsed_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_collapsed_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_collapsed_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_collapsed_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_collapsed_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_collapsed_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric((illumina::interop::model::metrics::q_collapsed_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_collapsed_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg6 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg6; 
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_q20___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->q20();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_q30___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->q30();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_total___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->total();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_median_qscore___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->median_qscore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_median_qscore_flt___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->median_qscore_flt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_cumulative_q20___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_q20();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_cumulative_q30___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_q30();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_cumulative_total___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_total();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_percent_over_q20___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->percent_over_q20();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_percent_over_q30___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->percent_over_q30();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_cumulative_percent_over_q20___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_percent_over_q20();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_cumulative_percent_over_q30___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_percent_over_q30();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_accumulate___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric const & type is null", 0);
    return ;
  } 
  (arg1)->accumulate((illumina::interop::model::metrics::q_collapsed_metric const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::q_collapsed_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::q_collapsed_metric::suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_collapsed_metric___(void * jarg1) {
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_by_lane_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_by_lane_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_by_lane_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_by_lane_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_by_lane_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_by_lane_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric((illumina::interop::model::metrics::q_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_by_lane_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg4 = 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::q_metric::uint32_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric::uint32_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_by_lane_metric_accumulate_by_lane___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::q_by_lane_metric *arg1 = (illumina::interop::model::metrics::q_by_lane_metric *) 0 ;
  illumina::interop::model::metrics::q_metric *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return ;
  } 
  (arg1)->accumulate_by_lane((illumina::interop::model::metrics::q_metric const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_by_lane_metric_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::q_by_lane_metric::suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_by_lane_metric___(void * jarg1) {
  illumina::interop::model::metrics::q_by_lane_metric *arg1 = (illumina::interop::model::metrics::q_by_lane_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_corrected_intensity_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_corrected_intensity_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_corrected_intensity_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_corrected_intensity_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_corrected_intensity_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_corrected_intensity_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::corrected_intensity_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_corrected_intensity_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_corrected_intensity_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_corrected_intensity_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::corrected_intensity_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::corrected_intensity_metric((const illumina::interop::model::metrics::corrected_intensity_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::corrected_intensity_metric *) &std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::corrected_intensity_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::corrected_intensity_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::corrected_intensity_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Repeat((illumina::interop::model::metrics::corrected_intensity_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_corrected_intensity_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_corrected_intensity_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_error_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_error_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_error_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_error_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_error_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_error_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metrics::error_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::error_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::error_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::error_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::error_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::error_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::error_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_error_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::error_metric > *)new std::vector< illumina::interop::model::metrics::error_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_error_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::error_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::error_metric > *)new std::vector< illumina::interop::model::metrics::error_metric >((std::vector< illumina::interop::model::metrics::error_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_error_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::error_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::error_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::error_metric((const illumina::interop::model::metrics::error_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::error_metric *) &std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::error_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::error_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::error_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::error_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::error_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::error_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::error_metric > *)std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::error_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::error_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::error_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::error_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::error_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::error_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::error_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::error_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::error_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::error_metric > *)std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Repeat((illumina::interop::model::metrics::error_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_error_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::error_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::error_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_error_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extraction_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extraction_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extraction_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extraction_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extraction_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_extraction_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metrics::extraction_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::extraction_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::extraction_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extraction_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extraction_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extraction_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extraction_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)new std::vector< illumina::interop::model::metrics::extraction_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extraction_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)new std::vector< illumina::interop::model::metrics::extraction_metric >((std::vector< illumina::interop::model::metrics::extraction_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extraction_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extraction_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::extraction_metric((const illumina::interop::model::metrics::extraction_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::extraction_metric *) &std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extraction_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::extraction_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::extraction_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::extraction_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extraction_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::extraction_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::extraction_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::extraction_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::extraction_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extraction_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extraction_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Repeat((illumina::interop::model::metrics::extraction_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extraction_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::extraction_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_extraction_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_image_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_image_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_image_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_image_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_image_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_image_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metrics::image_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::image_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::image_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::image_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::image_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::image_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_image_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::image_metric > *)new std::vector< illumina::interop::model::metrics::image_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_image_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::image_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::image_metric > *)new std::vector< illumina::interop::model::metrics::image_metric >((std::vector< illumina::interop::model::metrics::image_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_image_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::image_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::image_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::image_metric((const illumina::interop::model::metrics::image_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::image_metric *) &std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::image_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::image_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::image_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::image_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::image_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::image_metric > *)std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::image_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::image_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::image_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::image_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::image_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::image_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::image_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::image_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::image_metric > *)std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Repeat((illumina::interop::model::metrics::image_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_image_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::image_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::image_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_image_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_q_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metrics::q_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::q_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::q_metric > *)new std::vector< illumina::interop::model::metrics::q_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::q_metric > *)new std::vector< illumina::interop::model::metrics::q_metric >((std::vector< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::q_metric((const illumina::interop::model::metrics::q_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_metric *) &std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::q_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::q_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::q_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Repeat((illumina::interop::model::metrics::q_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_q_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_tile_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_tile_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_tile_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_tile_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_tile_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_tile_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metrics::tile_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::tile_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::tile_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::tile_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::tile_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::tile_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_tile_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::tile_metric > *)new std::vector< illumina::interop::model::metrics::tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_tile_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::tile_metric > *)new std::vector< illumina::interop::model::metrics::tile_metric >((std::vector< illumina::interop::model::metrics::tile_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_tile_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::tile_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::tile_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::tile_metric((const illumina::interop::model::metrics::tile_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::tile_metric *) &std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::tile_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::tile_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::tile_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::tile_metric > *)std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::tile_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::tile_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::tile_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::tile_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::tile_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::tile_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::tile_metric > *)std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Repeat((illumina::interop::model::metrics::tile_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_tile_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::tile_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_tile_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_index_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_index_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_index_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_index_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_index_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_index_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metrics::index_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::index_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::index_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_index_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::index_metric > *)new std::vector< illumina::interop::model::metrics::index_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_index_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::index_metric > *)new std::vector< illumina::interop::model::metrics::index_metric >((std::vector< illumina::interop::model::metrics::index_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_index_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::index_metric((const illumina::interop::model::metrics::index_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::index_metric *) &std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::index_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::index_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::index_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_metric > *)std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::index_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::index_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::index_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::index_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::index_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::index_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::index_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_metric > *)std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Repeat((illumina::interop::model::metrics::index_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_index_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::index_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::index_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_index_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_collapsed_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_collapsed_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_collapsed_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_collapsed_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_collapsed_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_q_collapsed_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::q_collapsed_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_collapsed_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)new std::vector< illumina::interop::model::metrics::q_collapsed_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_collapsed_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)new std::vector< illumina::interop::model::metrics::q_collapsed_metric >((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_collapsed_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_collapsed_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::q_collapsed_metric((const illumina::interop::model::metrics::q_collapsed_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_collapsed_metric *) &std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::q_collapsed_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::q_collapsed_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_collapsed_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_collapsed_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Repeat((illumina::interop::model::metrics::q_collapsed_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_collapsed_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_q_collapsed_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_by_lane_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_by_lane_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_by_lane_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_by_lane_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_by_lane_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_q_by_lane_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_by_lane_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::q_by_lane_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_by_lane_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)new std::vector< illumina::interop::model::metrics::q_by_lane_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_by_lane_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)new std::vector< illumina::interop::model::metrics::q_by_lane_metric >((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_by_lane_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_by_lane_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::q_by_lane_metric((const illumina::interop::model::metrics::q_by_lane_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_by_lane_metric *) &std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_by_lane_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_by_lane_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::q_by_lane_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_by_lane_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_by_lane_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::q_by_lane_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_by_lane_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_by_lane_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_by_lane_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Repeat((illumina::interop::model::metrics::q_by_lane_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_by_lane_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_q_by_lane_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  illumina::interop::model::metrics::point2d *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::point2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::point2d const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::point2d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::point2d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::point2d >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::point2d > *)new std::vector< illumina::interop::model::metrics::point2d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::point2d > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::point2d > *)new std::vector< illumina::interop::model::metrics::point2d >((std::vector< illumina::interop::model::metrics::point2d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_point2d_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::point2d > *)new_std_vector_Sl_illumina_interop_model_metrics_point2d_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::point2d result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::point2d((const illumina::interop::model::metrics::point2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::point2d *) &std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::point2d *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::point2d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::point2d > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::point2d > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::point2d > *)std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::point2d *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::point2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::point2d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::point2d > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::point2d > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::point2d *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::point2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::point2d > *)std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Repeat((illumina::interop::model::metrics::point2d const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_point2d_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::point2d > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::point2d > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_point2d_vector___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::point2d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric_map__SWIG_0___() {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  result = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)new std::map< uint64_t,illumina::interop::model::metrics::event_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric_map__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)new std::map< uint64_t,illumina::interop::model::metrics::event_metric >((std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::size_type result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((std::map< uint64_t,illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metrics::event_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_Clear___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_getitem___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type temp2 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__getitem(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_setitem___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__setitem(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_ContainsKey___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__ContainsKey(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_Add___(void * jarg1, unsigned long jarg2, void * jarg3) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *arg3 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type temp2 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned long,illumina::interop::model::metrics::event_metric >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__Add(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_Remove___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *arg2 = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  temp2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__Remove(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *)std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_get_next_key___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *result = 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *)jarg2; 
  result = (std::map< unsigned long,illumina::interop::model::metrics::event_metric >::key_type *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__get_next_key(arg1,arg2);
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_map_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *arg2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (std::map< unsigned long,illumina::interop::model::metrics::event_metric,std::less< unsigned long > >::iterator *)jarg2; 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_event_metric_map___(void * jarg1) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::alignment_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::alignment_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_alignment_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::alignment_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::alignment_metric *)new illumina::interop::model::metrics::alignment_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_alignment_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::alignment_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::alignment_metric *)new illumina::interop::model::metrics::alignment_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_confusion_matrix___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  illumina::interop::model::metrics::alignment_metric::confusion_matrix_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1; 
  result = (illumina::interop::model::metrics::alignment_metric::confusion_matrix_t *) &((illumina::interop::model::metrics::alignment_metric const *)arg1)->confusion_matrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_total_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->total_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::alignment_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_alignment_metric___(void * jarg1) {
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric_header___(unsigned char jarg1) {
  void * jresult ;
  uint8_t arg1 ;
  illumina::interop::model::metrics::basecalling_metric_header *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric_header *)new illumina::interop::model::metrics::basecalling_metric_header(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_info_level___(void * jarg1) {
  unsigned char jresult ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  uint8_t result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  result = (uint8_t)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->info_level();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_has_covariances___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_covariances();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_has_weights___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_weights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_has_determinant___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::basecalling_metric_header > result;
  
  result = illumina::interop::model::metrics::basecalling_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::basecalling_metric_header((const illumina::interop::model::metrics::basecalling_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_basecalling_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::basecalling_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_DIM_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::basecalling_metric::DIM;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::basecalling_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric((illumina::interop::model::metrics::basecalling_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  float arg7 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg6 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg6 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_4___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_basecalling_metric__SWIG_5___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_set__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg7 = 0 ;
  float arg8 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::point2d_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & type is null", 0);
    return ;
  } 
  arg6 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return ;
  } 
  arg7 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return ;
  } 
  arg8 = (float)jarg8; 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_set__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg7 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::point2d_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & type is null", 0);
    return ;
  } 
  arg6 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return ;
  } 
  arg7 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_set__SWIG_2___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::point2d_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & type is null", 0);
    return ;
  } 
  arg6 = (illumina::interop::model::metrics::basecalling_metric::float_vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_set__SWIG_3___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::basecalling_metric::point2d_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_centroids___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->centroids();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_covariances___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->covariances();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_weights___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->weights();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_mean_determinant___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->mean_determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_radius___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->radius(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_area___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::basecalling_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_basecalling_metric___(void * jarg1) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_color_matrix_metric_header___(unsigned short jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::color_matrix_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::color_matrix_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric_header *)new illumina::interop::model::metrics::color_matrix_metric_header(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_header_number_of_entries___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  illumina::interop::model::metrics::color_matrix_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric_header::ushort_t)((illumina::interop::model::metrics::color_matrix_metric_header const *)arg1)->number_of_entries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::color_matrix_metric_header > result;
  
  result = illumina::interop::model::metrics::color_matrix_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::color_matrix_metric_header((const illumina::interop::model::metrics::color_matrix_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_color_matrix_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::color_matrix_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::color_matrix_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_color_matrix_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::color_matrix_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::color_matrix_metric *)new illumina::interop::model::metrics::color_matrix_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_color_matrix_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::color_matrix_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::color_matrix_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::color_matrix_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::color_matrix_metric *)new illumina::interop::model::metrics::color_matrix_metric((illumina::interop::model::metrics::color_matrix_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_color_matrix___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::color_matrix_metric *arg1 = (illumina::interop::model::metrics::color_matrix_metric *) 0 ;
  illumina::interop::model::metrics::color_matrix_metric::color_matrix_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric *)jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric::color_matrix_t *) &((illumina::interop::model::metrics::color_matrix_metric const *)arg1)->color_matrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::color_matrix_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_color_matrix_metric___(void * jarg1) {
  illumina::interop::model::metrics::color_matrix_metric *arg1 = (illumina::interop::model::metrics::color_matrix_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_distortion_metric_header___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, int jarg5) {
  void * jresult ;
  std::vector< size_t > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  illumina::interop::constants::distortion_curve_type arg5 ;
  illumina::interop::model::metrics::distortion_metric_header *result = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< size_t > const & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::constants::distortion_curve_type)jarg5; 
  result = (illumina::interop::model::metrics::distortion_metric_header *)new illumina::interop::model::metrics::distortion_metric_header((std::vector< size_t > const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_channel_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->channel_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_curve_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->curve_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_coefficient_count___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->coefficient_count(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_type___(void * jarg1) {
  int jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  illumina::interop::constants::distortion_curve_type result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = (illumina::interop::constants::distortion_curve_type)((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_image_width___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->image_width();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_image_height___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->image_height();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_total_number_of_coefficients___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->total_number_of_coefficients();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_index___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->index(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::distortion_metric_header > result;
  
  result = illumina::interop::model::metrics::distortion_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::distortion_metric_header((const illumina::interop::model::metrics::distortion_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_distortion_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::distortion_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::distortion_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_distortion_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::distortion_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::distortion_metric *)new illumina::interop::model::metrics::distortion_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_distortion_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::distortion_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::distortion_metric *)new illumina::interop::model::metrics::distortion_metric((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_coefficients___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::curve_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  result = (illumina::interop::model::metrics::distortion_metric::curve_vector_t *) &((illumina::interop::model::metrics::distortion_metric const *)arg1)->coefficients();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_coefficient_at___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::distortion_metric const *)arg1)->coefficient_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_populate_coefficients_for__SWIG_0___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, void * jarg5) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  std::vector< float > *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::distortion_metric::header_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric::header_type const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (std::vector< float > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  ((illumina::interop::model::metrics::distortion_metric const *)arg1)->populate_coefficients_for((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_populate_coefficients_for__SWIG_1___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, float* jarg5, unsigned long jarg6) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::distortion_metric::header_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric::header_type const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  ((illumina::interop::model::metrics::distortion_metric const *)arg1)->populate_coefficients_for((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,arg5,arg6);
  
  
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_absolute_distortion___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  float jresult ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::distortion_metric::header_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric::header_type const & type is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (float)((illumina::interop::model::metrics::distortion_metric const *)arg1)->absolute_distortion((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::distortion_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_distortion_metric___(void * jarg1) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::dynamic_phasing_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::dynamic_phasing_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_dynamic_phasing_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_dynamic_phasing_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_read_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_read_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_read_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric((illumina::interop::model::metric_base::base_read_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_dynamic_phasing_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_phasing_slope___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->phasing_slope();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_prephasing_slope___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->prephasing_slope();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_phasing_offset___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->phasing_offset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_prephasing_offset___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->prephasing_offset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::dynamic_phasing_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_dynamic_phasing_metric___(void * jarg1) {
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::event_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::event_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_event_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_event_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_event_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric((illumina::interop::model::metric_base::base_event_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, int jarg5, double jarg6, unsigned int jarg7, unsigned long jarg8, unsigned long jarg9) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg8 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg9 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  arg8 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg8; 
  arg9 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg9; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, int jarg5, double jarg6, unsigned int jarg7, unsigned long jarg8) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg8 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  arg8 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg8; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_4___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, int jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_event_metric__SWIG_5___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4, int jarg5, double jarg6) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_set__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned long jarg5, int jarg6, unsigned int jarg7) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::uint_t arg4 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg5 ;
  illumina::interop::constants::event_type arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg5; 
  arg6 = (illumina::interop::constants::event_type)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_set__SWIG_1___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, unsigned int jarg8, double jarg9, unsigned long jarg10) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg2 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg3 ;
  illumina::interop::model::metrics::event_metric::uint_t arg4 ;
  illumina::interop::model::metrics::event_metric::uint_t arg5 ;
  illumina::interop::model::metrics::event_metric::uint_t arg6 ;
  illumina::interop::constants::event_type arg7 ;
  illumina::interop::model::metrics::event_metric::uint_t arg8 ;
  double arg9 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg10 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::event_metric::uint_t)jarg5; 
  arg6 = (illumina::interop::model::metrics::event_metric::uint_t)jarg6; 
  arg7 = (illumina::interop::constants::event_type)jarg7; 
  arg8 = (illumina::interop::model::metrics::event_metric::uint_t)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (illumina::interop::model::metrics::event_metric::ulong_t)jarg10; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_set_base___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_create_id__SWIG_0___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t arg4 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::id_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::create_id(arg1,arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_create_id__SWIG_1___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::create_id(arg1,arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_event_from_id___(unsigned long jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::id_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::event_from_id(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_date_time___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->date_time();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_point_ticks___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->point_ticks();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_date_time_csharp___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (illumina::interop::util::csharp_date_time *) &((illumina::interop::model::metrics::event_metric const *)arg1)->date_time_csharp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_event_value___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (illumina::interop::model::metrics::event_metric::uint_t)((illumina::interop::model::metrics::event_metric const *)arg1)->event_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_elapsed_ms___(void * jarg1) {
  double jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  double result;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (double)((illumina::interop::model::metrics::event_metric const *)arg1)->elapsed_ms();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_elapsed_ticks___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->elapsed_ticks();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::event_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_event_metric___(void * jarg1) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extended_tile_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::extended_tile_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extended_tile_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extended_tile_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric((illumina::interop::model::metric_base::base_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extended_tile_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::point2d *arg4 = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (illumina::interop::model::metrics::point2d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::point2d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_extended_tile_metric__SWIG_3___(unsigned int jarg1, unsigned int jarg2, float jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_set__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, void * jarg5) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::point2d *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (illumina::interop::model::metrics::point2d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::point2d const & type is null", 0);
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::point2d const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_set__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_cluster_count_occupied___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->cluster_count_occupied();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_cluster_count_occupied_k___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->cluster_count_occupied_k();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_percent_occupied___(void * jarg1, float jarg2) {
  float jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->percent_occupied(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_percent_occupied_lookup___(void * jarg1, void * jarg2) {
  float jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->percent_occupied_lookup((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_upper_left___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  result = (illumina::interop::model::metrics::point2d *) &((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->upper_left();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::extended_tile_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_extended_tile_metric___(void * jarg1) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_fwhm_grid_metric_header___(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg3 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg3; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header *)new illumina::interop::model::metrics::fwhm_grid_metric_header(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_num_bins_x___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->num_bins_x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_num_bins_y___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->num_bins_y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_channel_count___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->channel_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::fwhm_grid_metric_header > result;
  
  result = illumina::interop::model::metrics::fwhm_grid_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::fwhm_grid_metric_header((const illumina::interop::model::metrics::fwhm_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_fwhm_grid_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::fwhm_grid_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::fwhm_grid_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_fwhm_grid_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_fwhm_grid_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::fwhm_grid_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric((illumina::interop::model::metrics::fwhm_grid_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_fwhm_grid_metric__SWIG_3___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_focus_score___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  float jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = (float)((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->focus_score(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_channel_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->channel_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_num_bins_row___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->num_bins_row();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_num_bins_col___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->num_bins_col();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::fwhm_grid_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_fwhm_grid_metric___(void * jarg1) {
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_pf_grid_metric_header___(unsigned short jarg1, unsigned short jarg2, float jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::pf_grid_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header *)new illumina::interop::model::metrics::pf_grid_metric_header(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_num_bins_x___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->num_bins_x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_num_bins_y___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->num_bins_y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_subtile_area_in_mm2___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->subtile_area_in_mm2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::pf_grid_metric_header > result;
  
  result = illumina::interop::model::metrics::pf_grid_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::pf_grid_metric_header((const illumina::interop::model::metrics::pf_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_pf_grid_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::pf_grid_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::pf_grid_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_pf_grid_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_pf_grid_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::pf_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::pf_grid_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric((illumina::interop::model::metrics::pf_grid_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_pf_grid_metric__SWIG_3___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_raw_cluster_count___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->raw_cluster_count(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_pf_cluster_count___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->pf_cluster_count(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_raw_cluster_density_k___(void * jarg1, unsigned long jarg2, unsigned long jarg3, float jarg4) {
  float jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->raw_cluster_density_k(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_pf_cluster_density_k___(void * jarg1, unsigned long jarg2, unsigned long jarg3, float jarg4) {
  float jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->pf_cluster_density_k(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_percent_pf___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->percent_pf(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::pf_grid_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_pf_grid_metric___(void * jarg1) {
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::phasing_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::phasing_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_phasing_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_phasing_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_phasing_metric__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, float jarg5) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_phasing_weight___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::phasing_metric const *)arg1)->phasing_weight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_prephasing_weight___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::phasing_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::phasing_metric const *)arg1)->prephasing_weight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::phasing_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_phasing_metric___(void * jarg1) {
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::phasing_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_grid_metric_header___(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t arg2 ;
  illumina::interop::model::metrics::q_grid_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)jarg2; 
  result = (illumina::interop::model::metrics::q_grid_metric_header *)new illumina::interop::model::metrics::q_grid_metric_header(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_header_num_bins_x___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)((illumina::interop::model::metrics::q_grid_metric_header const *)arg1)->num_bins_x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_header_num_bins_y___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)((illumina::interop::model::metrics::q_grid_metric_header const *)arg1)->num_bins_y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::q_grid_metric_header > result;
  
  result = illumina::interop::model::metrics::q_grid_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::q_grid_metric_header((const illumina::interop::model::metrics::q_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_grid_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_grid_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::q_grid_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_grid_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_grid_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::q_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_grid_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric((illumina::interop::model::metrics::q_grid_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_q_grid_metric__SWIG_3___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_raw_cluster_count___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->raw_cluster_count(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_q30_cluster_count___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->q30_cluster_count(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_percent_q30___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->percent_q30(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::q_grid_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_q_grid_metric___(void * jarg1) {
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric_header__SWIG_1___(unsigned short jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *arg2 = 0 ;
  illumina::interop::constants::layout_type arg3 ;
  illumina::interop::model::metrics::registration_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric_header::point2d_vector_t const & type is null", 0);
    return 0;
  } 
  arg3 = (illumina::interop::constants::layout_type)jarg3; 
  result = (illumina::interop::model::metrics::registration_metric_header *)new illumina::interop::model::metrics::registration_metric_header(arg1,(illumina::interop::model::metrics::registration_metric_header::point2d_vector_t const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric_header__SWIG_2___(unsigned short jarg1, unsigned short jarg2, int jarg3) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg2 ;
  illumina::interop::constants::layout_type arg3 ;
  illumina::interop::model::metrics::registration_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg2; 
  arg3 = (illumina::interop::constants::layout_type)jarg3; 
  result = (illumina::interop::model::metrics::registration_metric_header *)new illumina::interop::model::metrics::registration_metric_header(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_channel_count___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::ushort_t)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->channel_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_region_count___(void * jarg1) {
  unsigned short jresult ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::ushort_t)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->region_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_fiducial_locations___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *) &((illumina::interop::model::metrics::registration_metric_header const *)arg1)->fiducial_locations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_fiducial_layout___(void * jarg1) {
  int jresult ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::constants::layout_type result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  result = (illumina::interop::constants::layout_type)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->fiducial_layout();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::registration_metric_header > result;
  
  result = illumina::interop::model::metrics::registration_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::registration_metric_header((const illumina::interop::model::metrics::registration_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_registration_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::registration_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::registration_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_AFFINE_LENGTH_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::registration_metric::AFFINE_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_SUBREGION_PARAM_LENGTH_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::registration_metric::SUBREGION_PARAM_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric__SWIG_0___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric__SWIG_1___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_registration_metric__SWIG_3___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric((illumina::interop::model::metrics::registration_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_affine_transform__SWIG_0___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->affine_transform(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_affine_transform__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->affine_transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_predicted_error___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->predicted_error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_sub_tile_offsets__SWIG_0___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_tile_offsets(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_sub_tile_offsets__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_tile_offsets();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_channel_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->channel_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_sub_region_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_region_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_set_predicted_error___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_predicted_error(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_max_residual_radial_errors___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  std::vector< float > result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_errors();
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_max_residual_radial_error__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_error();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_max_residual_radial_error__SWIG_1___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_error(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_max_residual_x_error___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_x_error(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_max_residual_y_error___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_y_error(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_shear___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->shear(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_theta_z___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->theta_z(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_theta___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->theta(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_set_rotation___(void * jarg1, unsigned long jarg2, float jarg3, float jarg4, float jarg5) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  try {
    (arg1)->set_rotation(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_is_any_channel_registration_failure___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::registration_metric const *)arg1)->is_any_channel_registration_failure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::registration_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_registration_metric___(void * jarg1) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::run_diagnostics_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::run_diagnostics_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_run_diagnostics_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_run_diagnostics_metric__SWIG_1___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_run_diagnostics_metric__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::base_cycle_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_blank_image___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->blank_image(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_dead_tile___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->dead_tile(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_failed_tile_cycle___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->failed_tile_cycle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_q_outlier___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->q_outlier(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_get_issues_for_entry___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric::uint_vector *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  result = (illumina::interop::model::metrics::run_diagnostics_metric::uint_vector *) &((illumina::interop::model::metrics::run_diagnostics_metric const *)arg1)->get_issues_for_entry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_get_issue___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::run_diagnostics_metric const *)arg1)->get_issue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::run_diagnostics_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_run_diagnostics_metric___(void * jarg1) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_static_run_metric_header___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t arg1 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t arg2 ;
  illumina::interop::model::metrics::static_run_metric_header *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric_header::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::static_run_metric_header::uint_t)jarg2; 
  result = (illumina::interop::model::metrics::static_run_metric_header *)new illumina::interop::model::metrics::static_run_metric_header(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_header_curve_length___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::static_run_metric_header::uint_t)((illumina::interop::model::metrics::static_run_metric_header const *)arg1)->curve_length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_header_curve_check___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t result;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric_header *)jarg1; 
  result = (illumina::interop::model::metrics::static_run_metric_header::uint_t)((illumina::interop::model::metrics::static_run_metric_header const *)arg1)->curve_check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_header_default_header___() {
  void * jresult ;
  SwigValueWrapper< illumina::interop::model::metrics::static_run_metric_header > result;
  
  result = illumina::interop::model::metrics::static_run_metric_header::default_header();
  jresult = new illumina::interop::model::metrics::static_run_metric_header((const illumina::interop::model::metrics::static_run_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_header_clear___(void * jarg1) {
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric_header *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_static_run_metric_header___(void * jarg1) {
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::static_run_metric::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metrics::static_run_metric::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_static_run_metric__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_static_run_metric__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::static_run_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric((illumina::interop::model::metrics::static_run_metric::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_static_run_metric__SWIG_2___(unsigned char jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  illumina::interop::model::metrics::static_run_metric::ubyte_t arg1 ;
  illumina::interop::model::metrics::static_run_metric::ubyte_t arg2 ;
  illumina::interop::model::metrics::static_run_metric::ushort_t arg3 ;
  illumina::interop::model::metrics::static_run_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::static_run_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric::ubyte_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::static_run_metric::ubyte_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::static_run_metric::ushort_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::static_run_metric::float_vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric::float_vector const & type is null", 0);
    return 0;
  } 
  arg5 = (illumina::interop::model::metrics::static_run_metric::float_vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric::float_vector const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::static_run_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::static_run_metric::float_vector const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_static_run_metric__SWIG_3___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_x_values___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::static_run_metric const *)arg1)->x_values(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_y_values___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::static_run_metric const *)arg1)->y_values(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metrics::static_run_metric::prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_static_run_metric___(void * jarg1) {
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_alignment_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_alignment_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_alignment_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_alignment_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_alignment_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_alignment_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metrics::alignment_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::alignment_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::alignment_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::alignment_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::alignment_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::alignment_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::alignment_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_alignment_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)new std::vector< illumina::interop::model::metrics::alignment_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_alignment_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::alignment_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)new std::vector< illumina::interop::model::metrics::alignment_metric >((std::vector< illumina::interop::model::metrics::alignment_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_alignment_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::alignment_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::alignment_metric((const illumina::interop::model::metrics::alignment_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::alignment_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::alignment_metric *) &std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::alignment_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::alignment_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::alignment_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::alignment_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::alignment_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::alignment_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::alignment_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::alignment_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::alignment_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::alignment_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::alignment_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::alignment_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::alignment_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::alignment_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::alignment_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Repeat((illumina::interop::model::metrics::alignment_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_alignment_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::alignment_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::alignment_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_alignment_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_basecalling_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_basecalling_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_basecalling_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_basecalling_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_basecalling_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_basecalling_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::basecalling_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::basecalling_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_basecalling_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)new std::vector< illumina::interop::model::metrics::basecalling_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_basecalling_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::basecalling_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)new std::vector< illumina::interop::model::metrics::basecalling_metric >((std::vector< illumina::interop::model::metrics::basecalling_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_basecalling_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::basecalling_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::basecalling_metric((const illumina::interop::model::metrics::basecalling_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::basecalling_metric *) &std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::basecalling_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::basecalling_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::basecalling_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::basecalling_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::basecalling_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::basecalling_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::basecalling_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::basecalling_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::basecalling_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::basecalling_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::basecalling_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::basecalling_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Repeat((illumina::interop::model::metrics::basecalling_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_basecalling_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::basecalling_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::basecalling_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_basecalling_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_color_matrix_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_color_matrix_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_color_matrix_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_color_matrix_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_color_matrix_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_color_matrix_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metrics::color_matrix_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::color_matrix_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::color_matrix_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::color_matrix_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_color_matrix_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)new std::vector< illumina::interop::model::metrics::color_matrix_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_color_matrix_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::color_matrix_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)new std::vector< illumina::interop::model::metrics::color_matrix_metric >((std::vector< illumina::interop::model::metrics::color_matrix_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_color_matrix_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::color_matrix_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::color_matrix_metric((const illumina::interop::model::metrics::color_matrix_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::color_matrix_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::color_matrix_metric *) &std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::color_matrix_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::color_matrix_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::color_matrix_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::color_matrix_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::color_matrix_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::color_matrix_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::color_matrix_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::color_matrix_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::color_matrix_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::color_matrix_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::color_matrix_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::color_matrix_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::color_matrix_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::color_matrix_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Repeat((illumina::interop::model::metrics::color_matrix_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_color_matrix_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::color_matrix_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::color_matrix_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_color_matrix_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_distortion_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_distortion_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_distortion_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_distortion_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_distortion_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_distortion_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metrics::distortion_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::distortion_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::distortion_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::distortion_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::distortion_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::distortion_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_distortion_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)new std::vector< illumina::interop::model::metrics::distortion_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_distortion_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::distortion_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)new std::vector< illumina::interop::model::metrics::distortion_metric >((std::vector< illumina::interop::model::metrics::distortion_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_distortion_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::distortion_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::distortion_metric((const illumina::interop::model::metrics::distortion_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::distortion_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::distortion_metric *) &std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::distortion_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::distortion_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::distortion_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::distortion_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::distortion_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::distortion_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::distortion_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::distortion_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::distortion_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::distortion_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::distortion_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::distortion_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::distortion_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Repeat((illumina::interop::model::metrics::distortion_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_distortion_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::distortion_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::distortion_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_distortion_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_dynamic_phasing_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_dynamic_phasing_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_dynamic_phasing_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_dynamic_phasing_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_dynamic_phasing_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_dynamic_phasing_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::dynamic_phasing_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::dynamic_phasing_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_dynamic_phasing_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_dynamic_phasing_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_dynamic_phasing_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::dynamic_phasing_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::dynamic_phasing_metric((const illumina::interop::model::metrics::dynamic_phasing_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::dynamic_phasing_metric *) &std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::dynamic_phasing_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::dynamic_phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::dynamic_phasing_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::dynamic_phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::dynamic_phasing_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Repeat((illumina::interop::model::metrics::dynamic_phasing_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_dynamic_phasing_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_dynamic_phasing_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_event_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_event_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metrics::event_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::event_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::event_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::event_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::event_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_event_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::event_metric > *)new std::vector< illumina::interop::model::metrics::event_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_event_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::event_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::event_metric > *)new std::vector< illumina::interop::model::metrics::event_metric >((std::vector< illumina::interop::model::metrics::event_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_event_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::event_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::event_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::event_metric((const illumina::interop::model::metrics::event_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::event_metric *) &std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::event_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::event_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::event_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::event_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::event_metric > *)std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::event_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::event_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::event_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::event_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::event_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::event_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::event_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::event_metric > *)std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Repeat((illumina::interop::model::metrics::event_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_event_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::event_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::event_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_event_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extended_tile_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extended_tile_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extended_tile_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extended_tile_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_extended_tile_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_extended_tile_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::extended_tile_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extended_tile_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::extended_tile_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extended_tile_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)new std::vector< illumina::interop::model::metrics::extended_tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extended_tile_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extended_tile_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)new std::vector< illumina::interop::model::metrics::extended_tile_metric >((std::vector< illumina::interop::model::metrics::extended_tile_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_extended_tile_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extended_tile_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::extended_tile_metric((const illumina::interop::model::metrics::extended_tile_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::extended_tile_metric *) &std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extended_tile_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::extended_tile_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extended_tile_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::extended_tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extended_tile_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::extended_tile_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::extended_tile_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extended_tile_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::extended_tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extended_tile_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::extended_tile_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::extended_tile_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::extended_tile_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Repeat((illumina::interop::model::metrics::extended_tile_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_extended_tile_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::extended_tile_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::extended_tile_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_extended_tile_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_fwhm_grid_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_fwhm_grid_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_fwhm_grid_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_fwhm_grid_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_fwhm_grid_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_fwhm_grid_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::fwhm_grid_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::fwhm_grid_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_fwhm_grid_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_fwhm_grid_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_fwhm_grid_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::fwhm_grid_metric((const illumina::interop::model::metrics::fwhm_grid_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::fwhm_grid_metric *) &std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::fwhm_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::fwhm_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::fwhm_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::fwhm_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::fwhm_grid_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Repeat((illumina::interop::model::metrics::fwhm_grid_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_fwhm_grid_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_fwhm_grid_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_pf_grid_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_pf_grid_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_pf_grid_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_pf_grid_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_pf_grid_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_pf_grid_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::pf_grid_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::pf_grid_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::pf_grid_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_pf_grid_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)new std::vector< illumina::interop::model::metrics::pf_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_pf_grid_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::pf_grid_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)new std::vector< illumina::interop::model::metrics::pf_grid_metric >((std::vector< illumina::interop::model::metrics::pf_grid_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_pf_grid_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::pf_grid_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::pf_grid_metric((const illumina::interop::model::metrics::pf_grid_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::pf_grid_metric *) &std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::pf_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::pf_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::pf_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::pf_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::pf_grid_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::pf_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::pf_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::pf_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::pf_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::pf_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::pf_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::pf_grid_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::pf_grid_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Repeat((illumina::interop::model::metrics::pf_grid_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_pf_grid_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::pf_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::pf_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_pf_grid_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_phasing_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_phasing_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_phasing_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_phasing_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_phasing_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_phasing_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metrics::phasing_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::phasing_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::phasing_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::phasing_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::phasing_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::phasing_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::phasing_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_phasing_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)new std::vector< illumina::interop::model::metrics::phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_phasing_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::phasing_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)new std::vector< illumina::interop::model::metrics::phasing_metric >((std::vector< illumina::interop::model::metrics::phasing_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_phasing_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::phasing_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::phasing_metric((const illumina::interop::model::metrics::phasing_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::phasing_metric *) &std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::phasing_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::phasing_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::phasing_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::phasing_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::phasing_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::phasing_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::phasing_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::phasing_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::phasing_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::phasing_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::phasing_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::phasing_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::phasing_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Repeat((illumina::interop::model::metrics::phasing_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_phasing_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::phasing_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::phasing_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_phasing_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_grid_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_grid_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_grid_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_grid_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_q_grid_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_q_grid_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metrics::q_grid_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_grid_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_grid_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::q_grid_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_grid_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)new std::vector< illumina::interop::model::metrics::q_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_grid_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_grid_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)new std::vector< illumina::interop::model::metrics::q_grid_metric >((std::vector< illumina::interop::model::metrics::q_grid_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_q_grid_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_grid_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::q_grid_metric((const illumina::interop::model::metrics::q_grid_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_grid_metric *) &std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::q_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_grid_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::q_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::q_grid_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_grid_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_grid_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::q_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::q_grid_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::q_grid_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Repeat((illumina::interop::model::metrics::q_grid_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_q_grid_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_grid_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::q_grid_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_q_grid_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_registration_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_registration_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_registration_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_registration_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_registration_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_registration_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metrics::registration_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::registration_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::registration_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::registration_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::registration_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::registration_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_registration_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::registration_metric > *)new std::vector< illumina::interop::model::metrics::registration_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_registration_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::registration_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::registration_metric > *)new std::vector< illumina::interop::model::metrics::registration_metric >((std::vector< illumina::interop::model::metrics::registration_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_registration_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::registration_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::registration_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::registration_metric((const illumina::interop::model::metrics::registration_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::registration_metric *) &std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::registration_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::registration_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::registration_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::registration_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::registration_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::registration_metric > *)std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::registration_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::registration_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::registration_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::registration_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::registration_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::registration_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::registration_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::registration_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::registration_metric > *)std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Repeat((illumina::interop::model::metrics::registration_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_registration_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::registration_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::registration_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_registration_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_run_diagnostics_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_run_diagnostics_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_run_diagnostics_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_run_diagnostics_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_run_diagnostics_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_run_diagnostics_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_diagnostics_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::run_diagnostics_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_run_diagnostics_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_run_diagnostics_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_run_diagnostics_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::run_diagnostics_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::run_diagnostics_metric((const illumina::interop::model::metrics::run_diagnostics_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::run_diagnostics_metric *) &std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_diagnostics_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::run_diagnostics_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_diagnostics_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::run_diagnostics_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_diagnostics_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Repeat((illumina::interop::model::metrics::run_diagnostics_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_run_diagnostics_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_run_diagnostics_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_TYPE_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::TYPE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_LATEST_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::LATEST_VERSION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metrics__SWIG_0___(short jarg1) {
  void * jresult ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metrics__SWIG_1___(void * jarg1, short jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metrics__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_base_static_run_metrics__SWIG_4___(void * jarg1, short jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t const & type is null", 0);
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_data_source_exists__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->data_source_exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_data_source_exists__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_rebuild_index__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_rebuild_index__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_trim___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_find__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_find__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_find__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_has_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_has_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_has_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)jarg2; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_insert__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_insert__SWIG_1___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const & type is null", 0);
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_set_version___(void * jarg1, short jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  ::int16_t arg2 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_keys___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->keys();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_lanes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->lanes();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_max_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->max_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_tile_numbers_for_lane___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_tile_numbers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->tile_numbers();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_metrics_for_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_lane(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_metrics_for_lane__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_cycles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->cycles();
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_metrics_for_cycle___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_cycle(arg2);
  jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_version___(void * jarg1) {
  short jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  ::int16_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_clear___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_metrics___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_prefix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_suffix___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric_ref__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric_ref__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_get_metric_ref__SWIG_2___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_CustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_base_static_run_metrics___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metrics::static_run_metric *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (illumina::interop::model::metrics::static_run_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::metrics::static_run_metric const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::static_run_metric > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::static_run_metric > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::static_run_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_static_run_metrics__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)new std::vector< illumina::interop::model::metrics::static_run_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_static_run_metrics__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::static_run_metric > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)new std::vector< illumina::interop::model::metrics::static_run_metric >((std::vector< illumina::interop::model::metrics::static_run_metric > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_new_vector_static_run_metrics__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)new_std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::static_run_metric result;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::metrics::static_run_metric((const illumina::interop::model::metrics::static_run_metric &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::metrics::static_run_metric *) &std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::static_run_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::static_run_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__setitem(arg1,arg2,(illumina::interop::model::metrics::static_run_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::static_run_metric > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__AddRange(arg1,(std::vector< illumina::interop::model::metrics::static_run_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  illumina::interop::model::metrics::static_run_metric *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::metrics::static_run_metric *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Insert(arg1,arg2,(illumina::interop::model::metrics::static_run_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::static_run_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::static_run_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::metrics::static_run_metric *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::static_run_metric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::static_run_metric const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Repeat((illumina::interop::model::metrics::static_run_metric const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_vector_static_run_metrics_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::static_run_metric > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::metrics::static_run_metric > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_delete_vector_static_run_metrics___(void * jarg1) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *)jarg1; 
  delete arg1;
}


SWIGEXPORT illumina::interop::model::metric_base::empty_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_header_SWIGUpcast___(illumina::interop::model::metric_base::base_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::empty_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_metric_SWIGUpcast___(illumina::interop::model::metric_base::base_metric *jarg1) {
    return (illumina::interop::model::metric_base::empty_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_header_SWIGUpcast___(illumina::interop::model::metric_base::base_cycle_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::empty_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_cycle_metric_SWIGUpcast___(illumina::interop::model::metric_base::base_cycle_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_header_SWIGUpcast___(illumina::interop::model::metric_base::base_read_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::empty_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_read_metric_SWIGUpcast___(illumina::interop::model::metric_base::base_read_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_header_SWIGUpcast___(illumina::interop::model::metric_base::base_static_run_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::empty_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metric_SWIGUpcast___(illumina::interop::model::metric_base::base_static_run_metric *jarg1) {
    return (illumina::interop::model::metric_base::empty_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::empty_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_header_SWIGUpcast___(illumina::interop::model::metric_base::base_event_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::empty_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metric_SWIGUpcast___(illumina::interop::model::metric_base::base_event_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_corrected_intensity_metric_SWIGUpcast___(illumina::interop::model::metrics::corrected_intensity_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_error_metric_SWIGUpcast___(illumina::interop::model::metrics::error_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_header_SWIGUpcast___(illumina::interop::model::metrics::extraction_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extraction_metric_SWIGUpcast___(illumina::interop::model::metrics::extraction_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_header_SWIGUpcast___(illumina::interop::model::metrics::image_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_image_metric_SWIGUpcast___(illumina::interop::model::metrics::image_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_score_header_SWIGUpcast___(illumina::interop::model::metrics::q_score_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_metric_SWIGUpcast___(illumina::interop::model::metrics::q_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_header_SWIGUpcast___(illumina::interop::model::metrics::tile_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_tile_metric_SWIGUpcast___(illumina::interop::model::metrics::tile_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_read_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_header_SWIGUpcast___(illumina::interop::model::metrics::index_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_read_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_read_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_index_metric_SWIGUpcast___(illumina::interop::model::metrics::index_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_read_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_score_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_header_SWIGUpcast___(illumina::interop::model::metrics::q_collapsed_header *jarg1) {
    return (illumina::interop::model::metrics::q_score_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_collapsed_metric_SWIGUpcast___(illumina::interop::model::metrics::q_collapsed_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_by_lane_metric_SWIGUpcast___(illumina::interop::model::metrics::q_by_lane_metric *jarg1) {
    return (illumina::interop::model::metrics::q_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_corrected_intensity_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_error_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::extraction_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extraction_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *jarg1) {
    return (illumina::interop::model::metrics::extraction_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::image_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_image_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *jarg1) {
    return (illumina::interop::model::metrics::image_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_score_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *jarg1) {
    return (illumina::interop::model::metrics::q_score_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::tile_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_tile_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *jarg1) {
    return (illumina::interop::model::metrics::tile_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::index_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_index_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *jarg1) {
    return (illumina::interop::model::metrics::index_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_collapsed_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_collapsed_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *jarg1) {
    return (illumina::interop::model::metrics::q_collapsed_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_score_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_by_lane_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *jarg1) {
    return (illumina::interop::model::metrics::q_score_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_alignment_metric_SWIGUpcast___(illumina::interop::model::metrics::alignment_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_header_SWIGUpcast___(illumina::interop::model::metrics::basecalling_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_basecalling_metric_SWIGUpcast___(illumina::interop::model::metrics::basecalling_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_header_SWIGUpcast___(illumina::interop::model::metrics::color_matrix_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_color_matrix_metric_SWIGUpcast___(illumina::interop::model::metrics::color_matrix_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_header_SWIGUpcast___(illumina::interop::model::metrics::distortion_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_distortion_metric_SWIGUpcast___(illumina::interop::model::metrics::distortion_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_read_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_dynamic_phasing_metric_SWIGUpcast___(illumina::interop::model::metrics::dynamic_phasing_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_read_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_event_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_event_metric_SWIGUpcast___(illumina::interop::model::metrics::event_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_event_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_extended_tile_metric_SWIGUpcast___(illumina::interop::model::metrics::extended_tile_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_header_SWIGUpcast___(illumina::interop::model::metrics::fwhm_grid_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_fwhm_grid_metric_SWIGUpcast___(illumina::interop::model::metrics::fwhm_grid_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_header_SWIGUpcast___(illumina::interop::model::metrics::pf_grid_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_pf_grid_metric_SWIGUpcast___(illumina::interop::model::metrics::pf_grid_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_phasing_metric_SWIGUpcast___(illumina::interop::model::metrics::phasing_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_header_SWIGUpcast___(illumina::interop::model::metrics::q_grid_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_read_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_q_grid_metric_SWIGUpcast___(illumina::interop::model::metrics::q_grid_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_read_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_header_SWIGUpcast___(illumina::interop::model::metrics::registration_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_registration_metric_SWIGUpcast___(illumina::interop::model::metrics::registration_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_run_diagnostics_metric_SWIGUpcast___(illumina::interop::model::metrics::run_diagnostics_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_static_run_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_header_SWIGUpcast___(illumina::interop::model::metrics::static_run_metric_header *jarg1) {
    return (illumina::interop::model::metric_base::base_static_run_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_static_run_metric * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_static_run_metric_SWIGUpcast___(illumina::interop::model::metrics::static_run_metric *jarg1) {
    return (illumina::interop::model::metric_base::base_static_run_metric *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_alignment_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::basecalling_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_basecalling_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *jarg1) {
    return (illumina::interop::model::metrics::basecalling_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::color_matrix_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_color_matrix_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *jarg1) {
    return (illumina::interop::model::metrics::color_matrix_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::distortion_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_distortion_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *jarg1) {
    return (illumina::interop::model::metrics::distortion_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_read_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_dynamic_phasing_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_read_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_event_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_event_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_event_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_extended_tile_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::fwhm_grid_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_fwhm_grid_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *jarg1) {
    return (illumina::interop::model::metrics::fwhm_grid_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::pf_grid_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_pf_grid_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *jarg1) {
    return (illumina::interop::model::metrics::pf_grid_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_phasing_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::q_grid_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_q_grid_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *jarg1) {
    return (illumina::interop::model::metrics::q_grid_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::registration_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_registration_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *jarg1) {
    return (illumina::interop::model::metrics::registration_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metric_base::base_cycle_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_run_diagnostics_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *jarg1) {
    return (illumina::interop::model::metric_base::base_cycle_metric_header *)jarg1;
}

SWIGEXPORT illumina::interop::model::metrics::static_run_metric_header * SWIGSTDCALL CSharp_IlluminafInterOpfMetrics_base_static_run_metrics_SWIGUpcast___(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *jarg1) {
    return (illumina::interop::model::metrics::static_run_metric_header *)jarg1;
}

#ifdef __cplusplus
}
#endif

