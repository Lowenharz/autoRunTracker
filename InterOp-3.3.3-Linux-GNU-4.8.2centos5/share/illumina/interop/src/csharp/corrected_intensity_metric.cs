//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class corrected_intensity_metric : base_cycle_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal corrected_intensity_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.corrected_intensity_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(corrected_intensity_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~corrected_intensity_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_corrected_intensity_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public corrected_intensity_metric() : this(c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_0(), true) {
  }

  public corrected_intensity_metric(base_cycle_metric_header arg0) : this(c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_1(base_cycle_metric_header.getCPtr(arg0)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public corrected_intensity_metric(uint lane, uint tile, uint cycle, ushort average_cycle_intensity, float signal_to_noise, float_vector corrected_int_called, ushort_vector corrected_int_all, uint_vector called_counts) : this(c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_2(lane, tile, cycle, average_cycle_intensity, signal_to_noise, float_vector.getCPtr(corrected_int_called), ushort_vector.getCPtr(corrected_int_all), uint_vector.getCPtr(called_counts)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  static private global::System.IntPtr SwigConstructcorrected_intensity_metric(uint lane, uint tile, uint cycle, ushort average_cycle_intensity, float signal_to_noise, float[] corrected_int_called, ushort[] corrected_int_all, uint[] called_counts) {
    unsafe{ fixed ( float* swig_ptrTo_corrected_int_called = corrected_int_called ) {
    unsafe{ fixed ( ushort* swig_ptrTo_corrected_int_all = corrected_int_all ) {
    unsafe{ fixed ( uint* swig_ptrTo_called_counts = called_counts ) {
    return c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_3(lane, tile, cycle, average_cycle_intensity, signal_to_noise, (global::System.IntPtr)swig_ptrTo_corrected_int_called, (global::System.IntPtr)swig_ptrTo_corrected_int_all, (global::System.IntPtr)swig_ptrTo_called_counts);
    }}
    }}
    }}
  }

  public corrected_intensity_metric(uint lane, uint tile, uint cycle, ushort average_cycle_intensity, float signal_to_noise, float[] corrected_int_called, ushort[] corrected_int_all, uint[] called_counts) : this(corrected_intensity_metric.SwigConstructcorrected_intensity_metric(lane, tile, cycle, average_cycle_intensity, signal_to_noise, corrected_int_called, corrected_int_all, called_counts), true) {
  }

  public corrected_intensity_metric(uint lane, uint tile, uint cycle, float_vector corrected_int_called, uint_vector called_counts) : this(c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_4(lane, tile, cycle, float_vector.getCPtr(corrected_int_called), uint_vector.getCPtr(called_counts)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  static private global::System.IntPtr SwigConstructcorrected_intensity_metric(uint lane, uint tile, uint cycle, ushort[] corrected_int_called, uint[] called_counts) {
    unsafe{ fixed ( ushort* swig_ptrTo_corrected_int_called = corrected_int_called ) {
    unsafe{ fixed ( uint* swig_ptrTo_called_counts = called_counts ) {
    return c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_5(lane, tile, cycle, (global::System.IntPtr)swig_ptrTo_corrected_int_called, (global::System.IntPtr)swig_ptrTo_called_counts);
    }}
    }}
  }

  public corrected_intensity_metric(uint lane, uint tile, uint cycle, ushort[] corrected_int_called, uint[] called_counts) : this(corrected_intensity_metric.SwigConstructcorrected_intensity_metric(lane, tile, cycle, corrected_int_called, called_counts), true) {
  }

  public corrected_intensity_metric(uint lane, uint tile, uint cycle, uint_vector called_counts) : this(c_csharp_metricsPINVOKE.new_corrected_intensity_metric__SWIG_6(lane, tile, cycle, uint_vector.getCPtr(called_counts)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(uint lane, uint tile, uint cycle, uint_vector called_counts) {
    c_csharp_metricsPINVOKE.corrected_intensity_metric_set(swigCPtr, lane, tile, cycle, uint_vector.getCPtr(called_counts));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort average_cycle_intensity() {
    ushort ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_average_cycle_intensity(swigCPtr);
    return ret;
  }

  public ushort corrected_int_all(dna_bases index) {
    ushort ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_all(swigCPtr, (int)index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float corrected_int_all_float(dna_bases index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_all_float(swigCPtr, (int)index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float corrected_int_called(dna_bases index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_called(swigCPtr, (int)index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint_vector called_counts_array() {
    uint_vector ret = new uint_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_called_counts_array(swigCPtr), false);
    return ret;
  }

  public float_vector corrected_int_called_array() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_called_array__SWIG_0(swigCPtr), false);
    return ret;
  }

  public ushort_vector corrected_int_all_array() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_all_array(swigCPtr), false);
    return ret;
  }

  public uint called_counts(dna_bases index) {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_called_counts(swigCPtr, (int)index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint no_calls() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_no_calls(swigCPtr);
    return ret;
  }

  public float signal_to_noise() {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_signal_to_noise(swigCPtr);
    return ret;
  }

  public uint total_calls(bool nocalls) {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_total_calls__SWIG_0(swigCPtr, nocalls);
    return ret;
  }

  public uint total_calls() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_total_calls__SWIG_1(swigCPtr);
    return ret;
  }

  public uint total_intensity() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_total_intensity(swigCPtr);
    return ret;
  }

  public float total_called_intensity() {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_total_called_intensity(swigCPtr);
    return ret;
  }

  public float percent_base(dna_bases index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_percent_base(swigCPtr, (int)index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float_vector percent_bases() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_percent_bases(swigCPtr), true);
    return ret;
  }

  public float percent_nocall() {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_percent_nocall(swigCPtr);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void corrected_int_called_array(float_vector vals) {
    c_csharp_metricsPINVOKE.corrected_intensity_metric_corrected_int_called_array__SWIG_1(swigCPtr, float_vector.getCPtr(vals));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool any_valid_called_int() {
    bool ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_any_valid_called_int(swigCPtr);
    return ret;
  }

  public ushort averageCycleIntensity() {
    ushort ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_averageCycleIntensity(swigCPtr);
    return ret;
  }

  public ushort correctedIntAll(uint index) {
    ushort ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_correctedIntAll__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float correctedIntCalled(uint index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_correctedIntCalled__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float_vector correctedIntCalled() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_correctedIntCalled__SWIG_1(swigCPtr), false);
    return ret;
  }

  public ushort_vector correctedIntAll() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_correctedIntAll__SWIG_1(swigCPtr), false);
    return ret;
  }

  public uint_vector calledCounts() {
    uint_vector ret = new uint_vector(c_csharp_metricsPINVOKE.corrected_intensity_metric_calledCounts__SWIG_0(swigCPtr), false);
    return ret;
  }

  public uint noCalls() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_noCalls(swigCPtr);
    return ret;
  }

  public float percentBase(long index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_percentBase(swigCPtr, index);
    return ret;
  }

  public uint calledCounts(long index) {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_calledCounts__SWIG_1(swigCPtr, index);
    return ret;
  }

  public float signalToNoise() {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_signalToNoise(swigCPtr);
    return ret;
  }

  public uint totalCalls(bool nocalls) {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_totalCalls__SWIG_0(swigCPtr, nocalls);
    return ret;
  }

  public uint totalCalls() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_totalCalls__SWIG_1(swigCPtr);
    return ret;
  }

  public uint totalIntensity() {
    uint ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_totalIntensity(swigCPtr);
    return ret;
  }

  public float totalCalledIntensity() {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_totalCalledIntensity(swigCPtr);
    return ret;
  }

  public float percentIntensity(uint index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_percentIntensity(swigCPtr, index);
    return ret;
  }

  public float percentCalledIntensity(uint index) {
    float ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_percentCalledIntensity(swigCPtr, index);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.corrected_intensity_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.corrected_intensity_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.corrected_intensity_metric_LATEST_VERSION_get();

}

}
