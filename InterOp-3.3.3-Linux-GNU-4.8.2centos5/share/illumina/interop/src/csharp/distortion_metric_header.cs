//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class distortion_metric_header : base_metric_header {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal distortion_metric_header(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.distortion_metric_header_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(distortion_metric_header obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~distortion_metric_header() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_distortion_metric_header(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public distortion_metric_header(size_vector dimensions, uint channel_count, uint image_width, uint image_height, distortion_curve_type type) : this(c_csharp_metricsPINVOKE.new_distortion_metric_header(size_vector.getCPtr(dimensions), channel_count, image_width, image_height, (int)type), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint channel_count() {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_channel_count(swigCPtr);
    return ret;
  }

  public uint curve_count() {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_curve_count(swigCPtr);
    return ret;
  }

  public uint coefficient_count(uint dim) {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_coefficient_count(swigCPtr, dim);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public distortion_curve_type type() {
    distortion_curve_type ret = (distortion_curve_type)c_csharp_metricsPINVOKE.distortion_metric_header_type(swigCPtr);
    return ret;
  }

  public uint image_width() {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_image_width(swigCPtr);
    return ret;
  }

  public uint image_height() {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_image_height(swigCPtr);
    return ret;
  }

  public uint total_number_of_coefficients() {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_total_number_of_coefficients(swigCPtr);
    return ret;
  }

  public uint index(uint channel, uint curve, uint coeff) {
    uint ret = c_csharp_metricsPINVOKE.distortion_metric_header_index(swigCPtr, channel, curve, coeff);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static distortion_metric_header default_header() {
    distortion_metric_header ret = new distortion_metric_header(c_csharp_metricsPINVOKE.distortion_metric_header_default_header(), true);
    return ret;
  }

  public void clear() {
    c_csharp_metricsPINVOKE.distortion_metric_header_clear(swigCPtr);
  }

}

}
