//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class bar_series : bar_collection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal bar_series(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_plotPINVOKE.bar_series_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(bar_series obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~bar_series() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_bar_series(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public bar_series(string title, string color, bar_series.series_types series_type) : this(c_csharp_plotPINVOKE.new_bar_series__SWIG_0(title, color, (int)series_type), true) {
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public bar_series(string title, string color) : this(c_csharp_plotPINVOKE.new_bar_series__SWIG_1(title, color), true) {
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public bar_series(string title) : this(c_csharp_plotPINVOKE.new_bar_series__SWIG_2(title), true) {
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public bar_series() : this(c_csharp_plotPINVOKE.new_bar_series__SWIG_3(), true) {
  }

  public string title() {
    string ret = c_csharp_plotPINVOKE.bar_series_title(swigCPtr);
    return ret;
  }

  public string color() {
    string ret = c_csharp_plotPINVOKE.bar_series_color__SWIG_0(swigCPtr);
    return ret;
  }

  public bar_series.series_types series_type() {
    bar_series.series_types ret = (bar_series.series_types)c_csharp_plotPINVOKE.bar_series_series_type(swigCPtr);
    return ret;
  }

  public string_vector options() {
    string_vector ret = new string_vector(c_csharp_plotPINVOKE.bar_series_options(swigCPtr), false);
    return ret;
  }

  public void add_option(string option) {
    c_csharp_plotPINVOKE.bar_series_add_option(swigCPtr, option);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void color(string color_name) {
    c_csharp_plotPINVOKE.bar_series_color__SWIG_1(swigCPtr, color_name);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum series_types {
    Candlestick,
    Line,
    Bar
  }

}

}
