/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_plot(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_plot(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_plot(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_ImportCustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_ImportCustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_index_out_of_bounds_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_index_out_of_bounds_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(const char *msg) {
    customExceptionCallback_index_out_of_bounds_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_channel_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_channel_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_channel_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception(const char *msg) {
    customExceptionCallback_invalid_channel_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_metric_type = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_metric_type(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_metric_type = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type(const char *msg) {
    customExceptionCallback_invalid_metric_type(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_parameter = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_parameter(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_parameter = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter(const char *msg) {
    customExceptionCallback_invalid_parameter(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_filter_option = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_filter_option(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_filter_option = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option(const char *msg) {
    customExceptionCallback_invalid_filter_option(msg);
  }


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/model/plot/axes.h"
#include "interop/model/plot/candle_stick_point.h"
#include "interop/model/plot/bar_point.h"
#include "interop/model/plot/data_point.h"
#include "interop/model/plot/data_point_collection.h"
#include "interop/model/plot/filter_options.h"
#include "interop/model/plot/plot_data.h"
#include "interop/model/plot/series.h"
#include "interop/model/plot/chart_data.h"
#include "interop/model/plot/heatmap_data.h"
#include "interop/model/plot/flowcell_data.h"


#include "interop/model/plot/subtile_data.h"

SWIGINTERN std::vector< illumina::interop::model::plot::bar_point > *new_std_vector_Sl_illumina_interop_model_plot_bar_point_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::plot::bar_point >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::plot::bar_point >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::plot::bar_point std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__getitemcopy(std::vector< illumina::interop::model::plot::bar_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::plot::bar_point const &std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__getitem(std::vector< illumina::interop::model::plot::bar_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__setitem(std::vector< illumina::interop::model::plot::bar_point > *self,int index,illumina::interop::model::plot::bar_point const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__AddRange(std::vector< illumina::interop::model::plot::bar_point > *self,std::vector< illumina::interop::model::plot::bar_point > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::plot::bar_point > *std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__GetRange(std::vector< illumina::interop::model::plot::bar_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::plot::bar_point >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Insert(std::vector< illumina::interop::model::plot::bar_point > *self,int index,illumina::interop::model::plot::bar_point const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__InsertRange(std::vector< illumina::interop::model::plot::bar_point > *self,int index,std::vector< illumina::interop::model::plot::bar_point > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__RemoveAt(std::vector< illumina::interop::model::plot::bar_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__RemoveRange(std::vector< illumina::interop::model::plot::bar_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::plot::bar_point > *std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Repeat(illumina::interop::model::plot::bar_point const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::plot::bar_point >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::plot::bar_point > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::plot::bar_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__SetRange(std::vector< illumina::interop::model::plot::bar_point > *self,int index,std::vector< illumina::interop::model::plot::bar_point > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::plot::candle_stick_point > *new_std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::plot::candle_stick_point >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::plot::candle_stick_point >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::plot::candle_stick_point std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__getitemcopy(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::plot::candle_stick_point const &std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__getitem(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__setitem(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,illumina::interop::model::plot::candle_stick_point const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__AddRange(std::vector< illumina::interop::model::plot::candle_stick_point > *self,std::vector< illumina::interop::model::plot::candle_stick_point > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::plot::candle_stick_point > *std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__GetRange(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::plot::candle_stick_point >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Insert(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,illumina::interop::model::plot::candle_stick_point const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__InsertRange(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,std::vector< illumina::interop::model::plot::candle_stick_point > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__RemoveAt(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__RemoveRange(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::plot::candle_stick_point > *std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Repeat(illumina::interop::model::plot::candle_stick_point const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::plot::candle_stick_point >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::plot::candle_stick_point > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__SetRange(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int index,std::vector< illumina::interop::model::plot::candle_stick_point > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "interop/logic/plot/plot_by_cycle.h"
#include "interop/logic/plot/plot_by_lane.h"
#include "interop/logic/plot/plot_qscore_histogram.h"
#include "interop/logic/plot/plot_qscore_heatmap.h"
#include "interop/logic/plot/plot_flowcell_map.h"
#include "interop/logic/plot/plot_sample_qc.h"
#include "interop/logic/plot/plot_metric_list.h"


#include "interop/logic/plot/plot_subtile_map.h"
#include "interop/logic/plot/plot_subtile_aggregate.h"
#include "interop/logic/plot/plot_distortion.h"
#include "interop/logic/plot/plot_event_by_cycle.h"
#include "interop/logic/plot/plot_event_by_event_type.h"
#include "interop/logic/plot/plot_run_diagnostics_by_cycle.h"
#include "interop/logic/plot/plot_run_diagnostics_flowcell_map.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_invalid_filter_option___(void * jarg1) {
  illumina::interop::model::invalid_filter_option *arg1 = (illumina::interop::model::invalid_filter_option *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_filter_option *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_axis___() {
  void * jresult ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  result = (illumina::interop::model::plot::axis *)new illumina::interop::model::plot::axis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_set_range___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_range(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_set_label___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_label((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_label___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axis const *)arg1)->label();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_min___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  result = (float)((illumina::interop::model::plot::axis const *)arg1)->min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_max___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  result = (float)((illumina::interop::model::plot::axis const *)arg1)->max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axis_clear___(void * jarg1) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_axis___(void * jarg1) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  
  arg1 = (illumina::interop::model::plot::axis *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_range___(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_xrange___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_xrange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_yrange___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_yrange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_xlabel___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_xlabel((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_ylabel___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_ylabel((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_xlabel___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axes const *)arg1)->xlabel();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_ylabel___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axes const *)arg1)->ylabel();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_xaxis___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  arg2 = (illumina::interop::model::plot::axis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axis const & type is null", 0);
    return ;
  } 
  (arg1)->set_xaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_set_yaxis___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  arg2 = (illumina::interop::model::plot::axis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axis const & type is null", 0);
    return ;
  } 
  (arg1)->set_yaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_x___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::axes const *)arg1)->x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_y___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::axes const *)arg1)->y();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_axes_clear___(void * jarg1) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_axes___() {
  void * jresult ;
  illumina::interop::model::plot::axes *result = 0 ;
  
  result = (illumina::interop::model::plot::axes *)new illumina::interop::model::plot::axes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_axes___(void * jarg1) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  
  arg1 = (illumina::interop::model::plot::axes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_0___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options::id_t arg9 ;
  illumina::interop::model::plot::filter_options::id_t arg10 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  arg9 = (illumina::interop::model::plot::filter_options::id_t)jarg9; 
  arg10 = (illumina::interop::model::plot::filter_options::id_t)jarg10; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_1___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options::id_t arg9 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  arg9 = (illumina::interop::model::plot::filter_options::id_t)jarg9; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_2___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_3___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_4___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_5___(int jarg1, unsigned int jarg2, short jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_6___(int jarg1, unsigned int jarg2, short jarg3, int jarg4) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_7___(int jarg1, unsigned int jarg2, short jarg3) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_8___(int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_filter_options__SWIG_9___(int jarg1) {
  void * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_reset___(void * jarg1) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_validate__SWIG_0___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::run::info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    ((illumina::interop::model::plot::filter_options const *)arg1)->validate(arg2,(illumina::interop::model::run::info const &)*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_validate__SWIG_1___(void * jarg1, int jarg2, void * jarg3) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::run::info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return ;
  } 
  try {
    ((illumina::interop::model::plot::filter_options const *)arg1)->validate(arg2,(illumina::interop::model::run::info const &)*arg3);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_channels__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_channels(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_channels__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_channels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_bases__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_bases(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_bases__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_bases();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_reads___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_reads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_cycles___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_cycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_lanes___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_lanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_tile_numbers___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_tile_numbers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_swaths___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_swaths();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_all_sections___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_sections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_is_specific_read__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_is_specific_read__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_is_specific_surface___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_surface();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_lane___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_lane(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_surface___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_surface(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_read___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_cycle___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_cycle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_tile_number___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_tile_number(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_swath___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_swath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_section___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_section(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_channel___(void * jarg1, short jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::channel_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_channel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_valid_base___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_base(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_tile_naming_method___(void * jarg1, int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->tile_naming_method(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_channel__SWIG_0___(void * jarg1, short jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::channel_t)jarg2; 
  (arg1)->channel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_dna_base__SWIG_0___(void * jarg1, int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg2; 
  (arg1)->dna_base(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_read__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->read(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_cycle__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->cycle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_surface__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->surface(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_swath___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->swath(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_section___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->section(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_tile_number___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->tile_number(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_lane__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->lane(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_lane__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->lane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_channel__SWIG_1___(void * jarg1) {
  short jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::channel_t)((illumina::interop::model::plot::filter_options const *)arg1)->channel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_dna_base__SWIG_1___(void * jarg1) {
  int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::dna_base_t)((illumina::interop::model::plot::filter_options const *)arg1)->dna_base();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_read__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_cycle__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->cycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_surface__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->surface();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_cycle_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->cycle_description();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_lane_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->lane_description();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_channel_description___(void * jarg1, void * jarg2) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->channel_description((std::vector< std::string > const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_base_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->base_description();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_surface_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->surface_description();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_read_description___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->read_description();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_naming_method___(void * jarg1) {
  int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::tile_naming_method result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  result = (illumina::interop::constants::tile_naming_method)((illumina::interop::model::plot::filter_options const *)arg1)->naming_method();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_section___(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  arg3 = (illumina::interop::model::run::info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return 0;
  } 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_section(arg2,(illumina::interop::model::run::info const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_swath___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_swath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_tile___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_tile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_all_lanes___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_lanes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_lane___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_lane(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_all_bases___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_bases(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_base___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_base(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_all_channels___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_channels(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_channel___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_channel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_all_cycles___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_cycles(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_cycle___(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::constants::plot_types arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::constants::plot_types)jarg3; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_cycle(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_all_reads___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_reads(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_read___(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::constants::plot_types arg3 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::constants::plot_types)jarg3; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_read(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_options_supports_surface___(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::run::info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return 0;
  } 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_surface(arg2,(illumina::interop::model::run::info const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_filter_options___(void * jarg1) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  
  arg1 = (illumina::interop::model::plot::filter_options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_axes___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axes *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (illumina::interop::model::plot::axes *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axes const & type is null", 0);
    return ;
  } 
  (arg1)->set_axes((illumina::interop::model::plot::axes const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_xaxis___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (illumina::interop::model::plot::axis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axis const & type is null", 0);
    return ;
  } 
  (arg1)->set_xaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_yaxis___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (illumina::interop::model::plot::axis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axis const & type is null", 0);
    return ;
  } 
  (arg1)->set_yaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_xlabel___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_xlabel((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_ylabel___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_ylabel((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_range___(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_xrange___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_xrange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_yrange___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_yrange(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_x_axis___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::chart_data const *)arg1)->x_axis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_y_axis___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::chart_data const *)arg1)->y_axis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_set_title___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_title((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_title___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::chart_data const *)arg1)->title();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_xyaxes___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axes *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  result = (illumina::interop::model::plot::axes *) &((illumina::interop::model::plot::chart_data const *)arg1)->xyaxes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_chart_data_clear___(void * jarg1) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_chart_data___() {
  void * jresult ;
  illumina::interop::model::plot::chart_data *result = 0 ;
  
  result = (illumina::interop::model::plot::chart_data *)new illumina::interop::model::plot::chart_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_chart_data___(void * jarg1) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::chart_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_heatmap_data___() {
  void * jresult ;
  illumina::interop::model::plot::heatmap_data *result = 0 ;
  
  result = (illumina::interop::model::plot::heatmap_data *)new illumina::interop::model::plot::heatmap_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_heatmap_data___(void * jarg1) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_set_buffer__SWIG_0___(void * jarg1, float* jarg2) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = jarg2;
  try {
    (arg1)->set_buffer(arg2);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_set_buffer__SWIG_1___(void * jarg1, float* jarg2, unsigned long jarg3, unsigned long jarg4, float jarg5) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  float arg5 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = jarg2;
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_buffer(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_set_buffer__SWIG_2___(void * jarg1, float* jarg2, unsigned long jarg3, unsigned long jarg4) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = jarg2;
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  (arg1)->set_buffer(arg2,arg3,arg4);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_resize__SWIG_0___(void * jarg1, unsigned long jarg2, unsigned long jarg3, float jarg4) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->resize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_resize__SWIG_1___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_at__SWIG_0___(void * jarg1, unsigned long jarg2) {
  float jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::plot::heatmap_data const *)arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_at__SWIG_1___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::plot::heatmap_data const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_length___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  result = (bool)((illumina::interop::model::plot::heatmap_data const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_clear___(void * jarg1) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_index_of___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::heatmap_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->index_of(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_flowcell_data___() {
  void * jresult ;
  illumina::interop::model::plot::flowcell_data *result = 0 ;
  
  result = (illumina::interop::model::plot::flowcell_data *)new illumina::interop::model::plot::flowcell_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_flowcell_data___(void * jarg1) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_buffer___(void * jarg1, float* jarg2, uint32_t* jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  try {
    (arg1)->set_buffer(arg2,arg3,arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_resize___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  (arg1)->resize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_clear___(void * jarg1) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_tile_at___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  ::uint32_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::uint32_t)((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_data___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned int jarg4, float jarg5) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  ::uint32_t arg4 ;
  float arg5 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (::uint32_t)jarg4; 
  arg5 = (float)jarg5; 
  try {
    (arg1)->set_data(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_tile_id___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  ::uint32_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (::uint32_t)((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_id(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_saxis___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (illumina::interop::model::plot::axis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::axis const & type is null", 0);
    return ;
  } 
  (arg1)->set_saxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_label___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_label((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_saxis___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::flowcell_data const *)arg1)->saxis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_subtitle___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_subtitle((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_set_range___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_range(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_subtitle___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::flowcell_data const *)arg1)->subtitle();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_swath_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->swath_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_tile_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_total_tile_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::flowcell_data *)jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->total_tile_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_subtile_data___() {
  void * jresult ;
  illumina::interop::model::plot::subtile_data *result = 0 ;
  
  result = (illumina::interop::model::plot::subtile_data *)new illumina::interop::model::plot::subtile_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_subtile_data___(void * jarg1) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_set_buffer__SWIG_0___(void * jarg1, float* jarg2, uint32_t* jarg3) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  try {
    (arg1)->set_buffer(arg2,arg3);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_set_buffer__SWIG_1___(void * jarg1, float* jarg2, uint32_t* jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, unsigned long jarg8) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  size_t arg8 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (size_t)jarg8; 
  (arg1)->set_buffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_resize___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->resize(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_set_data___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned int jarg6, float jarg7) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  ::uint32_t arg6 ;
  float arg7 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (::uint32_t)jarg6; 
  arg7 = (float)jarg7; 
  try {
    (arg1)->set_data(arg2,arg3,arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_populate_tile_data_at___(void * jarg1, float* jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = jarg2;
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->populate_tile_data_at(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_at___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  float jresult ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = (float)((illumina::interop::model::plot::subtile_data const *)arg1)->operator ()(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_tile_id___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  unsigned int jresult ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  ::uint32_t result;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = (::uint32_t)((illumina::interop::model::plot::subtile_data const *)arg1)->tile_id(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_subtile_count_x___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  result = ((illumina::interop::model::plot::subtile_data const *)arg1)->subtile_count_x();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_subtile_count_y___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  result = ((illumina::interop::model::plot::subtile_data const *)arg1)->subtile_count_y();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_clear___(void * jarg1) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_index_of___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  unsigned long jresult ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = ((illumina::interop::model::plot::subtile_data const *)arg1)->index_of(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_float_point__SWIG_0___(float jarg1, float jarg2) {
  void * jresult ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg1 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg2 ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg2; 
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_float_point__SWIG_1___(float jarg1) {
  void * jresult ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg1 ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg1; 
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_float_point__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_x___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_y___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_max_value___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->max_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_min_value___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->min_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_add___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_float_point_set___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_float_point___(void * jarg1) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point< float,float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_0___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned long jarg7, void * jarg8) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  size_t arg7 ;
  illumina::interop::model::plot::candle_stick_point::float_vector_t *arg8 = 0 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (illumina::interop::model::plot::candle_stick_point::float_vector_t *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point::float_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(illumina::interop::model::plot::candle_stick_point::float_vector_t const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned long jarg7) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  size_t arg7 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_2___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_3___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_4___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_5___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_6___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_7___(float jarg1) {
  void * jresult ;
  float arg1 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_point__SWIG_8___() {
  void * jresult ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_max_value___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->max_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_min_value___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->min_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_p25___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p25();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_p50___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p50();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_p75___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p75();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_lower___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->lower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_upper___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->upper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_outliers___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  illumina::interop::model::plot::candle_stick_point::float_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = (illumina::interop::model::plot::candle_stick_point::float_vector_t *) &((illumina::interop::model::plot::candle_stick_point const *)arg1)->outliers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_data_point_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  result = ((illumina::interop::model::plot::candle_stick_point const *)arg1)->data_point_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_candle_stick_point___(void * jarg1) {
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_point__SWIG_0___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_point__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_point__SWIG_2___(float jarg1) {
  void * jresult ;
  float arg1 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_point__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_point_set__SWIG_0___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  float arg4 ;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_point_set__SWIG_1___(void * jarg1, float jarg2, float jarg3) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_point_width___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::bar_point const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_point_min_value___(void * jarg1) {
  float jresult ;
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1; 
  result = (float)((illumina::interop::model::plot::bar_point const *)arg1)->min_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_bar_point___(void * jarg1) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::bar_point *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::bar_point *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::bar_point const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = ((std::vector< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = ((std::vector< illumina::interop::model::plot::bar_point > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::bar_point >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::plot::bar_point > *)new std::vector< illumina::interop::model::plot::bar_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::plot::bar_point > *)new std::vector< illumina::interop::model::plot::bar_point >((std::vector< illumina::interop::model::plot::bar_point > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::plot::bar_point > *)new_std_vector_Sl_illumina_interop_model_plot_bar_point_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::bar_point result;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::plot::bar_point((const illumina::interop::model::plot::bar_point &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::plot::bar_point *) &std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::bar_point *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::plot::bar_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__setitem(arg1,arg2,(illumina::interop::model::plot::bar_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__AddRange(arg1,(std::vector< illumina::interop::model::plot::bar_point > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::plot::bar_point > *)std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::bar_point *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::plot::bar_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Insert(arg1,arg2,(illumina::interop::model::plot::bar_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::plot::bar_point > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::plot::bar_point *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::bar_point *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::plot::bar_point > *)std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Repeat((illumina::interop::model::plot::bar_point const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::plot::bar_point > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_bar_vector___(void * jarg1) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::bar_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::candle_stick_point *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::candle_stick_point *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::candle_stick_point const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = ((std::vector< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = ((std::vector< illumina::interop::model::plot::candle_stick_point > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::candle_stick_point >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)new std::vector< illumina::interop::model::plot::candle_stick_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)new std::vector< illumina::interop::model::plot::candle_stick_point >((std::vector< illumina::interop::model::plot::candle_stick_point > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)new_std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::candle_stick_point result;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::plot::candle_stick_point((const illumina::interop::model::plot::candle_stick_point &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::plot::candle_stick_point *) &std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::candle_stick_point *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::plot::candle_stick_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__setitem(arg1,arg2,(illumina::interop::model::plot::candle_stick_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__AddRange(arg1,(std::vector< illumina::interop::model::plot::candle_stick_point > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  illumina::interop::model::plot::candle_stick_point *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::plot::candle_stick_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Insert(arg1,arg2,(illumina::interop::model::plot::candle_stick_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::plot::candle_stick_point > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::plot::candle_stick_point *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::candle_stick_point *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Repeat((illumina::interop::model::plot::candle_stick_point const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::plot::candle_stick_point > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_candle_stick_vector___(void * jarg1) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_collection_push_back___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::candle_stick_point *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::candle_stick_point *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::candle_stick_point const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_collection_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::candle_stick_point *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_collection_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = ((illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_collection_assign___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::candle_stick_point *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::plot::candle_stick_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::candle_stick_point const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::candle_stick_point const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_collection_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_collection___() {
  void * jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_candle_stick_collection___(void * jarg1) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_collection_push_back___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::bar_point *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::bar_point *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::bar_point const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_collection_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::bar_point *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_collection_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = ((illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_collection_assign___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::bar_point *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::plot::bar_point *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::bar_point const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::bar_point const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_collection_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_collection___() {
  void * jresult ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_bar_collection___(void * jarg1) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_series__SWIG_0___(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types > arg3 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types)jarg3; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_series__SWIG_1___(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_series__SWIG_2___(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_series__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_title___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->title();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_color__SWIG_0___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->color();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_series_type___(void * jarg1) {
  int jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types > result;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types)((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->series_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_options___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::options_t *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::options_t *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_add_option___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->add_option((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_color__SWIG_1___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->color((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_candle_stick_series___(void * jarg1) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_series__SWIG_0___(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types > arg3 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types)jarg3; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_series__SWIG_1___(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_series__SWIG_2___(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_series__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_title___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->title();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_color__SWIG_0___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->color();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_series_type___(void * jarg1) {
  int jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types > result;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types)((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->series_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_options___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::options_t *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::options_t *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_add_option___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->add_option((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_color__SWIG_1___(void * jarg1, char * jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->color((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_bar_series___(void * jarg1) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_clear___(void * jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_assign___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_push_back___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = ((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  result = (bool)((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_candle_stick_plot_data___() {
  void * jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_candle_stick_plot_data___(void * jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_clear___(void * jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_assign___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_push_back___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = ((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  result = (bool)((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_new_bar_plot_data___() {
  void * jresult ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  result = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_delete_bar_plot_data___(void * jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  
  arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_cycle__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_cycle__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_cycle__SWIG_2___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_cycle__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_by_cycle_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_by_cycle_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_by_cycle_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_by_cycle_metrics(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_by_cycle_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_by_cycle_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_by_cycle_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_by_cycle_metrics(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_lane__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_lane__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_lane__SWIG_2___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_by_lane__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_by_lane_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_by_lane_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_by_lane_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_by_lane_metrics(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_by_lane_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_by_lane_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_by_lane_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_by_lane_metrics(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_qscore_histogram__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & type is null", 0);
    return ;
  } 
  arg4 = (size_t)jarg4; 
  try {
    illumina::interop::logic::plot::plot_qscore_histogram(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_qscore_histogram__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_qscore_histogram(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_qscore_heatmap__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, float* jarg4, unsigned long jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::heatmap_data *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::heatmap_data & type is null", 0);
    return ;
  } 
  arg4 = jarg4;
  arg5 = (size_t)jarg5; 
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_qscore_heatmap__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, float* jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::heatmap_data *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::heatmap_data & type is null", 0);
    return ;
  } 
  arg4 = jarg4;
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_qscore_heatmap__SWIG_2___(void * jarg1, void * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::heatmap_data *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::heatmap_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_count_rows_for_heatmap___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::plot::count_rows_for_heatmap((illumina::interop::model::metrics::run_metrics const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_count_columns_for_heatmap___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::plot::count_columns_for_heatmap((illumina::interop::model::metrics::run_metrics const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6, unsigned int jarg7) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  bool arg7 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  arg7 = jarg7 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_2___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_3___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map2__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8, unsigned int jarg9) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  bool arg9 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  arg9 = jarg9 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8,arg9);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map2__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_4___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6, unsigned int jarg7) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  bool arg7 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  arg7 = jarg7 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_5___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_6___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map__SWIG_7___(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map2__SWIG_2___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8, unsigned int jarg9) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  bool arg9 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  arg9 = jarg9 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8,arg9);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_flowcell_map2__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_flowcell_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_flowcell_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_flowcell_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_flowcell_metrics(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_flowcell_metrics__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_flowcell_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_filter_flowcell_metrics__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_flowcell_metrics(*arg1,arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_calculate_flowcell_buffer_size___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::plot::calculate_flowcell_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,(illumina::interop::model::plot::filter_options const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_sample_qc___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_sample_qc(*arg1,arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_plot_metrics___(void * jarg1) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::plot::list_plot_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_available_plot_metrics___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::plot::list_available_plot_metrics((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_find_first_valid__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  illumina::interop::model::metric_base::base_metric *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::metric_base::base_metric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_metric & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::find_first_valid(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_find_first_valid__SWIG_1___(void * jarg1, float* jarg2, uint32_t* jarg3, void * jarg4) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  illumina::interop::model::metric_base::base_metric *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (illumina::interop::model::metric_base::base_metric *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::base_metric & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::find_first_valid(*arg1,arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_select_tile_values__SWIG_0___(void * jarg1, unsigned long jarg2, unsigned long jarg3, float* jarg4) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4;
  try {
    illumina::interop::logic::plot::select_tile_values(*arg1,arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_select_tile_values__SWIG_1___(void * jarg1, unsigned long jarg2, unsigned long jarg3, float* jarg4, uint32_t* jarg5, float* jarg6) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  ::uint32_t *arg5 = (::uint32_t *) 0 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::plot::subtile_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4;
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::select_tile_values(*arg1,arg2,arg3,arg4,arg5,arg6);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_2___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_4___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_map__SWIG_5___(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::subtile_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::subtile_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_subtile_metrics__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::plot::list_subtile_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_subtile_metrics__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::logic::utils::metric_type_description_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::plot::list_subtile_metrics((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_calculate_subtile_buffer_size___(void * jarg1, int jarg2, void * jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return 0;
  } 
  try {
    result = illumina::interop::logic::plot::calculate_subtile_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3);
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_aggregate__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_aggregate(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,*arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_subtile_aggregate__SWIG_1___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg5 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg5 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_aggregate(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,*arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_distortion___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t arg3 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_distortion(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_event_by_cycle___(void * jarg1, void * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_event_by_cycle(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_list_interval_events___(void * jarg1) {
  std::vector< illumina::interop::constants::event_type > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::event_type > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::plot::list_interval_events(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_event_by_event_type__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_event_by_event_type(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_event_by_event_type__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_event_by_event_type(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_by_cycle___(void * jarg1, void * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_by_cycle(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_1___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_2___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map2__SWIG_0___(void * jarg1, int jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, uint32_t* jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = jarg6;
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_4___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map__SWIG_5___(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfPlot_plot_run_diagnostics_flowcell_map2__SWIG_1___(void * jarg1, char * jarg2, void * jarg3, void * jarg4, float* jarg5, unsigned long jarg6, uint32_t* jarg7, unsigned long jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::plot::filter_options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return ;
  } 
  arg4 = (illumina::interop::model::plot::flowcell_data *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::flowcell_data & type is null", 0);
    return ;
  } 
  arg5 = jarg5;
  arg6 = (size_t)jarg6; 
  arg7 = jarg7;
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_filter_option_CustomExceptionRegisterCallback_invalid_filter_option((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
  
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfPlot_calculate_run_diagnostics_flowcell_buffer_size___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::plot::filter_options *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::plot::filter_options const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::plot::calculate_run_diagnostics_flowcell_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,(illumina::interop::model::plot::filter_options const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT illumina::interop::model::plot::chart_data * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_heatmap_data_SWIGUpcast___(illumina::interop::model::plot::heatmap_data *jarg1) {
    return (illumina::interop::model::plot::chart_data *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::heatmap_data * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_flowcell_data_SWIGUpcast___(illumina::interop::model::plot::flowcell_data *jarg1) {
    return (illumina::interop::model::plot::heatmap_data *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::flowcell_data * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_subtile_data_SWIGUpcast___(illumina::interop::model::plot::subtile_data *jarg1) {
    return (illumina::interop::model::plot::flowcell_data *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::data_point< float,float > * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_point_SWIGUpcast___(illumina::interop::model::plot::candle_stick_point *jarg1) {
    return (illumina::interop::model::plot::data_point< float,float > *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::data_point< float,float > * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_point_SWIGUpcast___(illumina::interop::model::plot::bar_point *jarg1) {
    return (illumina::interop::model::plot::data_point< float,float > *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_series_SWIGUpcast___(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *jarg1) {
    return (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_series_SWIGUpcast___(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *jarg1) {
    return (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::chart_data * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_candle_stick_plot_data_SWIGUpcast___(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *jarg1) {
    return (illumina::interop::model::plot::chart_data *)jarg1;
}

SWIGEXPORT illumina::interop::model::plot::chart_data * SWIGSTDCALL CSharp_IlluminafInterOpfPlot_bar_plot_data_SWIGUpcast___(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *jarg1) {
    return (illumina::interop::model::plot::chart_data *)jarg1;
}

#ifdef __cplusplus
}
#endif

