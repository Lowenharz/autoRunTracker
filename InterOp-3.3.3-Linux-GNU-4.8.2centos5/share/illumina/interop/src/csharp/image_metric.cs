//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class image_metric : base_cycle_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal image_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.image_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(image_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~image_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_image_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public image_metric() : this(c_csharp_metricsPINVOKE.new_image_metric__SWIG_0(), true) {
  }

  public image_metric(image_metric_header header) : this(c_csharp_metricsPINVOKE.new_image_metric__SWIG_1(image_metric_header.getCPtr(header)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public image_metric(uint lane, uint tile, uint cycle, ushort channel_count, ushort_vector min_contrast, ushort_vector max_contrast) : this(c_csharp_metricsPINVOKE.new_image_metric__SWIG_2(lane, tile, cycle, channel_count, ushort_vector.getCPtr(min_contrast), ushort_vector.getCPtr(max_contrast)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  static private global::System.IntPtr SwigConstructimage_metric(uint lane, uint tile, uint cycle, ushort channel_count, ushort[] min_contrast, ushort[] max_contrast) {
    unsafe{ fixed ( ushort* swig_ptrTo_min_contrast = min_contrast ) {
    unsafe{ fixed ( ushort* swig_ptrTo_max_contrast = max_contrast ) {
    return c_csharp_metricsPINVOKE.new_image_metric__SWIG_3(lane, tile, cycle, channel_count, (global::System.IntPtr)swig_ptrTo_min_contrast, (global::System.IntPtr)swig_ptrTo_max_contrast);
    }}
    }}
  }

  public image_metric(uint lane, uint tile, uint cycle, ushort channel_count, ushort[] min_contrast, ushort[] max_contrast) : this(image_metric.SwigConstructimage_metric(lane, tile, cycle, channel_count, min_contrast, max_contrast), true) {
  }

  public ushort min_contrast(uint channel) {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_min_contrast(swigCPtr, channel);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort max_contrast(uint channel) {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_max_contrast(swigCPtr, channel);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort_vector min_contrast_array() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.image_metric_min_contrast_array(swigCPtr), false);
    return ret;
  }

  public ushort_vector max_contrast_array() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.image_metric_max_contrast_array(swigCPtr), false);
    return ret;
  }

  public ushort channel_count() {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_channel_count(swigCPtr);
    return ret;
  }

  public bool is_any_channel_blank() {
    bool ret = c_csharp_metricsPINVOKE.image_metric_is_any_channel_blank(swigCPtr);
    return ret;
  }

  public void trim(uint channel_count) {
    c_csharp_metricsPINVOKE.image_metric_trim(swigCPtr, channel_count);
  }

  public ushort minContrast(uint channel) {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_minContrast__SWIG_0(swigCPtr, channel);
    return ret;
  }

  public ushort maxContrast(uint channel) {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_maxContrast__SWIG_0(swigCPtr, channel);
    return ret;
  }

  public ushort_vector minContrast() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.image_metric_minContrast__SWIG_1(swigCPtr), false);
    return ret;
  }

  public ushort_vector maxContrast() {
    ushort_vector ret = new ushort_vector(c_csharp_metricsPINVOKE.image_metric_maxContrast__SWIG_1(swigCPtr), false);
    return ret;
  }

  public ushort channelCount() {
    ushort ret = c_csharp_metricsPINVOKE.image_metric_channelCount(swigCPtr);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.image_metric_prefix();
    return ret;
  }

  public static readonly int MAX_CHANNELS = c_csharp_metricsPINVOKE.image_metric_MAX_CHANNELS_get();
  public static readonly int TYPE = c_csharp_metricsPINVOKE.image_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.image_metric_LATEST_VERSION_get();

}

}
