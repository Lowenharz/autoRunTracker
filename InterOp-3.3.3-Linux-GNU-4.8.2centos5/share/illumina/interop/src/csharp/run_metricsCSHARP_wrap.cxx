/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_run_metrics(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_run_metrics(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_run_metrics(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_ImportCustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_ImportCustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception(const char *msg) {
    customExceptionCallback_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_format_exception_ImportCustomExceptionRegisterCallback_format_exception(const char *msg) {
    customExceptionCallback_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception(const char *msg) {
    customExceptionCallback_bad_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_incomplete_file_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_incomplete_file_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_incomplete_file_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception(const char *msg) {
    customExceptionCallback_incomplete_file_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_argument = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_argument(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_argument = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_argument_ImportCustomExceptionRegisterCallback_invalid_argument(const char *msg) {
    customExceptionCallback_invalid_argument(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_index_out_of_bounds_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_index_out_of_bounds_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(const char *msg) {
    customExceptionCallback_index_out_of_bounds_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_channel_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_channel_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_channel_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception(const char *msg) {
    customExceptionCallback_invalid_channel_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_metric_type = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_metric_type(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_metric_type = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_CustomExceptionRegisterCallback_invalid_metric_type(const char *msg) {
    customExceptionCallback_invalid_metric_type(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_parameter = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_parameter(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_parameter = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter(const char *msg) {
    customExceptionCallback_invalid_parameter(msg);
  }


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include "interop/model/model_exceptions.h"


#include "interop/logic/metric/extraction_metric.h"
#include "interop/logic/metric/q_metric.h"
#include "interop/logic/utils/metric_type_ext.h"
#include "interop/logic/utils/metrics_to_load.h"


#include "interop/model/run_metrics.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_delete_invalid_channel_exception___(void * jarg1) {
  illumina::interop::model::invalid_channel_exception *arg1 = (illumina::interop::model::invalid_channel_exception *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_channel_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_delete_invalid_metric_type___(void * jarg1) {
  illumina::interop::model::invalid_metric_type *arg1 = (illumina::interop::model::invalid_metric_type *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_metric_type *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_delete_invalid_parameter___(void * jarg1) {
  illumina::interop::model::invalid_parameter *arg1 = (illumina::interop::model::invalid_parameter *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_parameter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_copy_focus___(void * jarg1, float* jarg2, unsigned long jarg3, unsigned long jarg4) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return ;
  } 
  arg2 = jarg2;
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    illumina::interop::logic::metric::copy_focus((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg1,arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_q_metric_bins__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_q_metric_bins__SWIG_2___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_q_metric_bins__SWIG_3___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_cumulative_distribution__SWIG_0___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_cumulative_distribution__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_cumulative_distribution__SWIG_2___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_requires_legacy_bins___(unsigned long jarg1) {
  unsigned int jresult ;
  size_t arg1 ;
  bool result;
  
  arg1 = (size_t)jarg1; 
  result = (bool)illumina::interop::logic::metric::requires_legacy_bins(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_legacy_q_score_bins__SWIG_0___(void * jarg1, int jarg2, unsigned long jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  size_t arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = (size_t)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_compress_q_metrics__SWIG_0___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::metric::compress_q_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_compress_q_metrics__SWIG_1___(void * jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::metric::compress_q_metrics(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_legacy_q_score_bins__SWIG_1___(void * jarg1, void * jarg2, int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_populate_legacy_q_score_bins__SWIG_2___(void * jarg1, void * jarg2, int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< illumina::interop::model::metrics::q_score_bin > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::metrics::q_score_bin > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,*arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_qvals__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_qvals__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_count_qvals__SWIG_2___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_compressed__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_compressed__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_compressed__SWIG_2___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_max_qval__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_max_qval__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_max_qval__SWIG_2___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_index_for_q_value__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = illumina::interop::logic::metric::index_for_q_value((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_index_for_q_value__SWIG_1___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = illumina::interop::logic::metric::index_for_q_value((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_create_collapse_q_metrics___(void * jarg1, void * jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::metric::create_collapse_q_metrics((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_create_q_metrics_by_lane___(void * jarg1, void * jarg2, int jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  try {
    illumina::interop::logic::metric::create_q_metrics_by_lane((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_to_group___(int jarg1) {
  int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  illumina::interop::constants::metric_group result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (illumina::interop::constants::metric_group)illumina::interop::logic::utils::to_group(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_to_description___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = illumina::interop::logic::utils::to_description(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_descriptions___(void * jarg1) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_descriptions(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_to_feature__SWIG_0___(int jarg1) {
  int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_to_feature__SWIG_1___(int jarg1) {
  int jresult ;
  illumina::interop::constants::metric_group arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_base_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_base_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_channel_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_channel_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_read_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_read_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_cycle_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_cycle_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_tile_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_tile_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_to_feature__SWIG_2___(int jarg1) {
  int jresult ;
  illumina::interop::constants::event_type arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_subtile_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_subtile_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_interval_event___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::event_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_interval_event(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_iuo_metric___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_iuo_metric(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_is_iuo___(int jarg1) {
  unsigned int jresult ;
  illumina::interop::constants::metric_group arg1 ;
  bool result;
  
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_iuo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_metrics_to_load__SWIG_0___(int jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  illumina::interop::constants::metric_group arg1 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load(arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_metrics_to_load__SWIG_1___(int jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  illumina::interop::constants::metric_type arg1 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load(arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_metrics_to_load__SWIG_2___(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load((std::vector< enum illumina::interop::constants::metric_group > const &)*arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_metrics_to_load__SWIG_3___(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_type > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_type > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load((std::vector< enum illumina::interop::constants::metric_type > const &)*arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_metrics_to_load__SWIG_4___(char * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  std::string *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::utils::list_metrics_to_load((std::string const &)*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_CustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_summary_metric_groups__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::utils::list_summary_metric_groups(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_summary_metric_groups__SWIG_1___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  illumina::interop::logic::utils::list_summary_metric_groups(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_index_summary_metric_groups___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_index_summary_metric_groups(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_summary_metrics_to_load__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned char > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  bool arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_summary_metrics_to_load__SWIG_1___(void * jarg1, int jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_summary_metrics_to_load__SWIG_2___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_index_metrics_to_load___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_index_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_analysis_metrics_to_load__SWIG_0___(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::utils::list_analysis_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_analysis_metrics_to_load__SWIG_1___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_analysis_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_event_metrics_to_load___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_event_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_subtile_metrics_to_load___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_subtile_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_run_diagnostics_metrics_to_load___(void * jarg1) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_run_diagnostics_metrics_to_load(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_list_run_diagnostics_metric_groups___(void * jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::metric_group > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::metric_group > & type is null", 0);
    return ;
  } 
  illumina::interop::logic::utils::list_run_diagnostics_metric_groups(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_new_run_metrics__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_new_run_metrics__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = 0 ;
  illumina::interop::model::run::parameters *arg2 = 0 ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::run::parameters *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::parameters const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics((illumina::interop::model::run::info const &)*arg1,(illumina::interop::model::run::parameters const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_new_run_metrics__SWIG_2___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = 0 ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics((illumina::interop::model::run::info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read__SWIG_0___(void * jarg1, char * jarg2, unsigned long jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (size_t)jarg3; 
  try {
    (arg1)->read((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read__SWIG_1___(void * jarg1, char * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read__SWIG_2___(void * jarg1, char * jarg2, void * jarg3, unsigned long jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  size_t arg4 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read__SWIG_3___(void * jarg1, char * jarg2, void * jarg3, unsigned long jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  arg4 = (size_t)jarg4; 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3,arg4);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read__SWIG_4___(void * jarg1, char * jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_xml___(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->read_xml((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_run_info___(void * jarg1, char * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read_run_info((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_run_parameters__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    result = (arg1)->read_run_parameters((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_run_parameters__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->read_run_parameters((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_finalize_after_load__SWIG_0___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    (arg1)->finalize_after_load(arg2);
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_finalize_after_load__SWIG_1___(void * jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  try {
    (arg1)->finalize_after_load();
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_CustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_legacy_channel_update___(void * jarg1, int jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  (arg1)->legacy_channel_update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_naming_method___(void * jarg1, int jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_count_legacy_bins__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->count_legacy_bins(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_count_legacy_bins__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->count_legacy_bins();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_is_run_parameters_required__SWIG_0___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_run_parameters_required(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_is_run_parameters_required__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_run_parameters_required();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_run_info__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::run::info *) &((illumina::interop::model::metrics::run_metrics const *)arg1)->run_info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_run_info__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::info *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::run::info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return ;
  } 
  (arg1)->run_info((illumina::interop::model::run::info const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_run_parameters__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::run::parameters *) &((illumina::interop::model::metrics::run_metrics const *)arg1)->run_parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_run_parameters__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::parameters *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::run::parameters *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::parameters const & type is null", 0);
    return ;
  } 
  (arg1)->run_parameters((illumina::interop::model::run::parameters const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_list_filenames__SWIG_0___(void * jarg1, int jarg2, void * jarg3, char * jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->list_filenames(arg2,*arg3,(std::string const &)*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_list_filenames__SWIG_1___(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  try {
    (arg1)->list_filenames(arg2,*arg3,(std::string const &)*arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_list_filenames__SWIG_2___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_list_filenames__SWIG_3___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_list_filenames__SWIG_4___(void * jarg1, void * jarg2, char * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_check_for_data_sources___(void * jarg1, char * jarg2, unsigned long jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (size_t)jarg3; 
  (arg1)->check_for_data_sources((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_metrics__SWIG_0___(void * jarg1, char * jarg2, unsigned long jarg3, unsigned long jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_metrics__SWIG_1___(void * jarg1, char * jarg2, unsigned long jarg3, void * jarg4, unsigned long jarg5, unsigned int jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::vector< unsigned char > *arg4 = 0 ;
  size_t arg5 ;
  bool arg6 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< unsigned char > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,(std::vector< unsigned char > const &)*arg4,arg5,arg6);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_metrics__SWIG_2___(void * jarg1, char * jarg2, unsigned long jarg3, void * jarg4, unsigned long jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::vector< unsigned char > *arg4 = 0 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< unsigned char > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  arg5 = (size_t)jarg5; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,(std::vector< unsigned char > const &)*arg4,arg5);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_CustomExceptionRegisterCallback_invalid_parameter((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_write_metrics__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_write_metrics__SWIG_1___(void * jarg1, char * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_read_metrics_from_buffer___(void * jarg1, int jarg2, uint8_t* jarg3, unsigned long jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  try {
    (arg1)->read_metrics_from_buffer(arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_file_not_found_exception_ImportCustomExceptionRegisterCallback_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_write_metrics_to_buffer___(void * jarg1, int jarg2, uint8_t* jarg3, unsigned long jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics_to_buffer(arg2,arg3,arg4);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_argument_ImportCustomExceptionRegisterCallback_invalid_argument((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_incomplete_file_exception_ImportCustomExceptionRegisterCallback_incomplete_file_exception((&_e)->what());
      return ;
    }
  }
  
  
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_calculate_buffer_size___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  try {
    result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->calculate_buffer_size(arg2);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_argument_ImportCustomExceptionRegisterCallback_invalid_argument((&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_format_exception_ImportCustomExceptionRegisterCallback_bad_format_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_validate___(void * jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  try {
    (arg1)->validate();
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_is_group_empty__SWIG_0___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_group_empty((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_is_group_empty__SWIG_1___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_group_empty(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_populate_id_map__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::tile_metric_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metrics::run_metrics::tile_metric_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics::tile_metric_map_t & type is null", 0);
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_populate_id_map__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::cycle_metric_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metrics::run_metrics::cycle_metric_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics::cycle_metric_map_t & type is null", 0);
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_populate_id_map__SWIG_2___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::event_metric_map_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metrics::run_metrics::event_metric_map_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics::event_metric_map_t & type is null", 0);
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_sort___(void * jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_clear___(void * jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_corrected_intensity_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_corrected_intensity_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::corrected_intensity_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_error_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_error_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::error_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_extraction_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_extraction_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::extraction_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_image_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_image_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::image_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_q_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_q_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_tile_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_tile_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_index_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_index_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::index_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_q_collapsed_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_q_collapsed_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_collapsed_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_q_by_lane_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_q_by_lane_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_by_lane_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_alignment_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_alignment_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::alignment_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_basecalling_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_basecalling_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::basecalling_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_color_matrix_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_color_matrix_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::color_matrix_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_distortion_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_distortion_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::distortion_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_dynamic_phasing_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_dynamic_phasing_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_event_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_event_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::event_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_extended_tile_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_extended_tile_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::extended_tile_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_fwhm_grid_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_fwhm_grid_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::fwhm_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_pf_grid_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_pf_grid_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::pf_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_phasing_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_phasing_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::phasing_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_q_grid_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_q_grid_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_grid_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_registration_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_registration_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::registration_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_run_diagnostics_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_run_diagnostics_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::run_diagnostics_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_set_static_run_metric_set___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & type is null", 0);
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_run_metrics_static_run_metric_set___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::static_run_metric >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRunMetrics_delete_run_metrics___(void * jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

