//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class distortion_metric : base_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal distortion_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.distortion_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(distortion_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~distortion_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_distortion_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public distortion_metric() : this(c_csharp_metricsPINVOKE.new_distortion_metric__SWIG_0(), true) {
  }

  public distortion_metric(distortion_metric_header header) : this(c_csharp_metricsPINVOKE.new_distortion_metric__SWIG_1(distortion_metric_header.getCPtr(header)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float_vector coefficients() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.distortion_metric_coefficients(swigCPtr), false);
    return ret;
  }

  public float coefficient_at(uint index) {
    float ret = c_csharp_metricsPINVOKE.distortion_metric_coefficient_at(swigCPtr, index);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void populate_coefficients_for(distortion_metric_header header, uint channel, uint curve_index, float_vector coeff) {
    c_csharp_metricsPINVOKE.distortion_metric_populate_coefficients_for__SWIG_0(swigCPtr, distortion_metric_header.getCPtr(header), channel, curve_index, float_vector.getCPtr(coeff));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void populate_coefficients_for(distortion_metric_header header, uint channel, uint curve_index, float[] buffer, uint arg4) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_metricsPINVOKE.distortion_metric_populate_coefficients_for__SWIG_1(swigCPtr, distortion_metric_header.getCPtr(header), channel, curve_index, (global::System.IntPtr)swig_ptrTo_buffer, arg4);
      if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public float absolute_distortion(distortion_metric_header header, uint channel, uint curve_index, uint image_width) {
    float ret = c_csharp_metricsPINVOKE.distortion_metric_absolute_distortion(swigCPtr, distortion_metric_header.getCPtr(header), channel, curve_index, image_width);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.distortion_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.distortion_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.distortion_metric_LATEST_VERSION_get();

}

}
