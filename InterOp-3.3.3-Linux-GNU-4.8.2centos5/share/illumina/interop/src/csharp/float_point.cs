//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class float_point : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal float_point(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(float_point obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~float_point() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_float_point(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float_point(float x, float y) : this(c_csharp_plotPINVOKE.new_float_point__SWIG_0(x, y), true) {
  }

  public float_point(float x) : this(c_csharp_plotPINVOKE.new_float_point__SWIG_1(x), true) {
  }

  public float_point() : this(c_csharp_plotPINVOKE.new_float_point__SWIG_2(), true) {
  }

  public float x() {
    float ret = c_csharp_plotPINVOKE.float_point_x(swigCPtr);
    return ret;
  }

  public float y() {
    float ret = c_csharp_plotPINVOKE.float_point_y(swigCPtr);
    return ret;
  }

  public float max_value() {
    float ret = c_csharp_plotPINVOKE.float_point_max_value(swigCPtr);
    return ret;
  }

  public float min_value() {
    float ret = c_csharp_plotPINVOKE.float_point_min_value(swigCPtr);
    return ret;
  }

  public void add(float x, float y) {
    c_csharp_plotPINVOKE.float_point_add(swigCPtr, x, y);
  }

  public void set(float x, float y) {
    c_csharp_plotPINVOKE.float_point_set(swigCPtr, x, y);
  }

}

}
