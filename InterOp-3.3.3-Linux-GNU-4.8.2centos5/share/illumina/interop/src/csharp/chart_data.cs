//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class chart_data : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal chart_data(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(chart_data obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~chart_data() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_chart_data(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void set_axes(axes xyaxes) {
    c_csharp_plotPINVOKE.chart_data_set_axes(swigCPtr, axes.getCPtr(xyaxes));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_xaxis(axis xaxes) {
    c_csharp_plotPINVOKE.chart_data_set_xaxis(swigCPtr, axis.getCPtr(xaxes));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_yaxis(axis yaxes) {
    c_csharp_plotPINVOKE.chart_data_set_yaxis(swigCPtr, axis.getCPtr(yaxes));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_xlabel(string label) {
    c_csharp_plotPINVOKE.chart_data_set_xlabel(swigCPtr, label);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_ylabel(string label) {
    c_csharp_plotPINVOKE.chart_data_set_ylabel(swigCPtr, label);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_range(float xmin, float xmax, float ymin, float ymax) {
    c_csharp_plotPINVOKE.chart_data_set_range(swigCPtr, xmin, xmax, ymin, ymax);
  }

  public void set_xrange(float vmin, float vmax) {
    c_csharp_plotPINVOKE.chart_data_set_xrange(swigCPtr, vmin, vmax);
  }

  public void set_yrange(float vmin, float vmax) {
    c_csharp_plotPINVOKE.chart_data_set_yrange(swigCPtr, vmin, vmax);
  }

  public axis x_axis() {
    axis ret = new axis(c_csharp_plotPINVOKE.chart_data_x_axis(swigCPtr), false);
    return ret;
  }

  public axis y_axis() {
    axis ret = new axis(c_csharp_plotPINVOKE.chart_data_y_axis(swigCPtr), false);
    return ret;
  }

  public void set_title(string title) {
    c_csharp_plotPINVOKE.chart_data_set_title(swigCPtr, title);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public string title() {
    string ret = c_csharp_plotPINVOKE.chart_data_title(swigCPtr);
    return ret;
  }

  public axes xyaxes() {
    axes ret = new axes(c_csharp_plotPINVOKE.chart_data_xyaxes(swigCPtr), false);
    return ret;
  }

  public void clear() {
    c_csharp_plotPINVOKE.chart_data_clear(swigCPtr);
  }

  public chart_data() : this(c_csharp_plotPINVOKE.new_chart_data(), true) {
  }

}

}
