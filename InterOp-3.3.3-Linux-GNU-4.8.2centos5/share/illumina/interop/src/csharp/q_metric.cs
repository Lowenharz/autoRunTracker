//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class q_metric : base_cycle_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal q_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.q_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(q_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~q_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_q_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public q_metric() : this(c_csharp_metricsPINVOKE.new_q_metric__SWIG_0(), true) {
  }

  public q_metric(q_score_header header) : this(c_csharp_metricsPINVOKE.new_q_metric__SWIG_1(q_score_header.getCPtr(header)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public q_metric(uint lane, uint tile, uint cycle, uint_vector qscore_hist) : this(c_csharp_metricsPINVOKE.new_q_metric__SWIG_2(lane, tile, cycle, uint_vector.getCPtr(qscore_hist)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  static private global::System.IntPtr SwigConstructq_metric(uint lane, uint tile, uint cycle, uint[] qscore_hist, uint count) {
    unsafe{ fixed ( uint* swig_ptrTo_qscore_hist = qscore_hist ) {
    return c_csharp_metricsPINVOKE.new_q_metric__SWIG_3(lane, tile, cycle, (global::System.IntPtr)swig_ptrTo_qscore_hist, count);
    }}
  }

  public q_metric(uint lane, uint tile, uint cycle, uint[] qscore_hist, uint count) : this(q_metric.SwigConstructq_metric(lane, tile, cycle, qscore_hist, count), true) {
  }

  public void set(uint lane, uint tile, uint cycle, uint_vector qscore_hist) {
    c_csharp_metricsPINVOKE.q_metric_set(swigCPtr, lane, tile, cycle, uint_vector.getCPtr(qscore_hist));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint qscore_hist(uint n) {
    uint ret = c_csharp_metricsPINVOKE.q_metric_qscore_hist__SWIG_0(swigCPtr, n);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint_vector qscore_hist() {
    uint_vector ret = new uint_vector(c_csharp_metricsPINVOKE.q_metric_qscore_hist__SWIG_1(swigCPtr), false);
    return ret;
  }

  public uint size() {
    uint ret = c_csharp_metricsPINVOKE.q_metric_size(swigCPtr);
    return ret;
  }

  public uint sum_qscore() {
    uint ret = c_csharp_metricsPINVOKE.q_metric_sum_qscore(swigCPtr);
    return ret;
  }

  public ulong sum_qscore_cumulative() {
    ulong ret = c_csharp_metricsPINVOKE.q_metric_sum_qscore_cumulative(swigCPtr);
    return ret;
    }

  public uint total_over_qscore(uint qscore, q_score_bin_vector bins) {
    uint ret = c_csharp_metricsPINVOKE.q_metric_total_over_qscore__SWIG_0(swigCPtr, qscore, q_score_bin_vector.getCPtr(bins));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint total_over_qscore(uint qscore_index) {
    uint ret = c_csharp_metricsPINVOKE.q_metric_total_over_qscore__SWIG_1(swigCPtr, qscore_index);
    return ret;
  }

  public ulong total_over_qscore_cumulative(uint qscore_index) {
    ulong ret = c_csharp_metricsPINVOKE.q_metric_total_over_qscore_cumulative__SWIG_0(swigCPtr, qscore_index);
    return ret;
    }

  public float percent_over_qscore(uint qscore_index) {
    float ret = c_csharp_metricsPINVOKE.q_metric_percent_over_qscore__SWIG_0(swigCPtr, qscore_index);
    return ret;
  }

  public float percent_over_qscore_cumulative(uint qscore_index) {
    float ret = c_csharp_metricsPINVOKE.q_metric_percent_over_qscore_cumulative__SWIG_0(swigCPtr, qscore_index);
    return ret;
  }

  public ulong total_over_qscore_cumulative(uint qscore, q_score_bin_vector bins) {
    ulong ret = c_csharp_metricsPINVOKE.q_metric_total_over_qscore_cumulative__SWIG_1(swigCPtr, qscore, q_score_bin_vector.getCPtr(bins));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
    }

  public float percent_over_qscore(uint qscore_index, q_score_bin_vector bins) {
    float ret = c_csharp_metricsPINVOKE.q_metric_percent_over_qscore__SWIG_1(swigCPtr, qscore_index, q_score_bin_vector.getCPtr(bins));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float percent_over_qscore_cumulative(uint qscore, q_score_bin_vector bins) {
    float ret = c_csharp_metricsPINVOKE.q_metric_percent_over_qscore_cumulative__SWIG_1(swigCPtr, qscore, q_score_bin_vector.getCPtr(bins));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint median(q_score_bin_vector bins) {
    uint ret = c_csharp_metricsPINVOKE.q_metric_median__SWIG_0(swigCPtr, q_score_bin_vector.getCPtr(bins));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint median() {
    uint ret = c_csharp_metricsPINVOKE.q_metric_median__SWIG_1(swigCPtr);
    return ret;
  }

  public bool is_cumulative_empty() {
    bool ret = c_csharp_metricsPINVOKE.q_metric_is_cumulative_empty(swigCPtr);
    return ret;
  }

  public void accumulate(q_metric metric) {
    c_csharp_metricsPINVOKE.q_metric_accumulate(swigCPtr, q_metric.getCPtr(metric));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void compress(q_score_header header) {
    c_csharp_metricsPINVOKE.q_metric_compress(swigCPtr, q_score_header.getCPtr(header));
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint qscoreHist(uint n) {
    uint ret = c_csharp_metricsPINVOKE.q_metric_qscoreHist__SWIG_0(swigCPtr, n);
    return ret;
  }

  public uint_vector qscoreHist() {
    uint_vector ret = new uint_vector(c_csharp_metricsPINVOKE.q_metric_qscoreHist__SWIG_1(swigCPtr), false);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.q_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.q_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.q_metric_LATEST_VERSION_get();

  public static readonly int MAX_Q_BINS = c_csharp_metricsPINVOKE.q_metric_MAX_Q_BINS_get();

}

}
