//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class subtile_data : flowcell_data {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal subtile_data(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_plotPINVOKE.subtile_data_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(subtile_data obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~subtile_data() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_subtile_data(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public subtile_data() : this(c_csharp_plotPINVOKE.new_subtile_data(), true) {
  }

  public void set_buffer(float[] data_buffer, uint[] id_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_data_buffer = data_buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.subtile_data_set_buffer__SWIG_0(swigCPtr, (global::System.IntPtr)swig_ptrTo_data_buffer, (global::System.IntPtr)swig_ptrTo_id_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public void set_buffer(float[] data_buffer, uint[] id_buffer, uint lanes, uint swaths, uint tiles, uint subtile_count_x, uint subtile_count_y) {
    unsafe{ fixed ( float* swig_ptrTo_data_buffer = data_buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.subtile_data_set_buffer__SWIG_1(swigCPtr, (global::System.IntPtr)swig_ptrTo_data_buffer, (global::System.IntPtr)swig_ptrTo_id_buffer, lanes, swaths, tiles, subtile_count_x, subtile_count_y);
    }
    }}
    }}
  }

  public void resize(uint lanes, uint swaths, uint tiles, uint subtile_count_x, uint subtile_count_y) {
    c_csharp_plotPINVOKE.subtile_data_resize(swigCPtr, lanes, swaths, tiles, subtile_count_x, subtile_count_y);
  }

  public void set_data(uint lane_idx, uint tile_idx, uint bin_x, uint bin_y, uint tile_id, float value) {
    c_csharp_plotPINVOKE.subtile_data_set_data(swigCPtr, lane_idx, tile_idx, bin_x, bin_y, tile_id, value);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public void populate_tile_data_at(float[] buffer, uint buffer_size, uint lane_idx, uint tile_idx) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.subtile_data_populate_tile_data_at(swigCPtr, (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, lane_idx, tile_idx);
    }
    }}
  }

  public float at(uint row, uint col, uint bin_x, uint bin_y) {
    float ret = c_csharp_plotPINVOKE.subtile_data_at(swigCPtr, row, col, bin_x, bin_y);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint tile_id(uint row, uint col, uint bin_x, uint bin_y) {
    uint ret = c_csharp_plotPINVOKE.subtile_data_tile_id(swigCPtr, row, col, bin_x, bin_y);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint subtile_count_x() {
    uint ret = c_csharp_plotPINVOKE.subtile_data_subtile_count_x(swigCPtr);
    return ret;
  }

  public uint subtile_count_y() {
    uint ret = c_csharp_plotPINVOKE.subtile_data_subtile_count_y(swigCPtr);
    return ret;
  }

  public new void clear() {
    c_csharp_plotPINVOKE.subtile_data_clear(swigCPtr);
  }

  public uint index_of(uint row, uint col, uint bin_x, uint bin_y) {
    uint ret = c_csharp_plotPINVOKE.subtile_data_index_of(swigCPtr, row, col, bin_x, bin_y);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
