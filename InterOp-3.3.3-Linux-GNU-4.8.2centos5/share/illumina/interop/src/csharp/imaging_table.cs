//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Table {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;
using Illumina.InterOp.RunMetrics;

public class imaging_table : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal imaging_table(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(imaging_table obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~imaging_table() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_tablePINVOKE.delete_imaging_table(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public imaging_table() : this(c_csharp_tablePINVOKE.new_imaging_table(), true) {
  }

  public void set_data(uint rows, imaging_column_vector cols, float_vector data) {
    c_csharp_tablePINVOKE.imaging_table_set_data(swigCPtr, rows, imaging_column_vector.getCPtr(cols), float_vector.getCPtr(data));
    if (c_csharp_tablePINVOKE.SWIGPendingException.Pending) throw c_csharp_tablePINVOKE.SWIGPendingException.Retrieve();
  }

  public float at(uint r, column_id c, uint subcol) {
    float ret = c_csharp_tablePINVOKE.imaging_table_at__SWIG_0(swigCPtr, r, (int)c, subcol);
    if (c_csharp_tablePINVOKE.SWIGPendingException.Pending) throw c_csharp_tablePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float at(uint r, column_id c) {
    float ret = c_csharp_tablePINVOKE.imaging_table_at__SWIG_1(swigCPtr, r, (int)c);
    if (c_csharp_tablePINVOKE.SWIGPendingException.Pending) throw c_csharp_tablePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public imaging_column_vector columns() {
    imaging_column_vector ret = new imaging_column_vector(c_csharp_tablePINVOKE.imaging_table_columns(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = c_csharp_tablePINVOKE.imaging_table_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    c_csharp_tablePINVOKE.imaging_table_clear(swigCPtr);
  }

  public imaging_column column_at(uint col_index) {
    imaging_column ret = new imaging_column(c_csharp_tablePINVOKE.imaging_table_column_at(swigCPtr, col_index), false);
    if (c_csharp_tablePINVOKE.SWIGPendingException.Pending) throw c_csharp_tablePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint column_count() {
    uint ret = c_csharp_tablePINVOKE.imaging_table_column_count(swigCPtr);
    return ret;
  }

  public uint total_column_count() {
    uint ret = c_csharp_tablePINVOKE.imaging_table_total_column_count(swigCPtr);
    return ret;
  }

  public uint row_count() {
    uint ret = c_csharp_tablePINVOKE.imaging_table_row_count(swigCPtr);
    return ret;
  }

}

}
