//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using Illumina.InterOp.Metrics;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Run;

public class c_csharp_plot {
  public static void plot_by_cycle(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data, bool skip_empty) {
    c_csharp_plotPINVOKE.plot_by_cycle__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data), skip_empty);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_cycle(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_by_cycle__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_cycle(run_metrics metrics, string metric_name, filter_options options, candle_stick_plot_data data, bool skip_empty) {
    c_csharp_plotPINVOKE.plot_by_cycle__SWIG_2(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data), skip_empty);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_cycle(run_metrics metrics, string metric_name, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_by_cycle__SWIG_3(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_by_cycle_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_accumulated) {
    c_csharp_plotPINVOKE.list_by_cycle_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_accumulated);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_by_cycle_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.list_by_cycle_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_by_cycle_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_accumulated) {
    c_csharp_plotPINVOKE.filter_by_cycle_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_accumulated);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_by_cycle_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.filter_by_cycle_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_lane(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data, bool skip_empty) {
    c_csharp_plotPINVOKE.plot_by_lane__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data), skip_empty);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_lane(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_by_lane__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_lane(run_metrics metrics, string metric_name, filter_options options, candle_stick_plot_data data, bool skip_empty) {
    c_csharp_plotPINVOKE.plot_by_lane__SWIG_2(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data), skip_empty);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_by_lane(run_metrics metrics, string metric_name, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_by_lane__SWIG_3(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_by_lane_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_pf) {
    c_csharp_plotPINVOKE.list_by_lane_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_pf);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_by_lane_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.list_by_lane_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_by_lane_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_pf) {
    c_csharp_plotPINVOKE.filter_by_lane_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_pf);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_by_lane_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.filter_by_lane_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_qscore_histogram(run_metrics metrics, filter_options options, bar_plot_data data, uint boundary) {
    c_csharp_plotPINVOKE.plot_qscore_histogram__SWIG_0(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), bar_plot_data.getCPtr(data), boundary);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_qscore_histogram(run_metrics metrics, filter_options options, bar_plot_data data) {
    c_csharp_plotPINVOKE.plot_qscore_histogram__SWIG_1(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), bar_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data, float[] buffer, uint buffer_size) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_qscore_heatmap__SWIG_0(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), heatmap_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_qscore_heatmap__SWIG_1(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), heatmap_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data) {
    c_csharp_plotPINVOKE.plot_qscore_heatmap__SWIG_2(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), heatmap_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint count_rows_for_heatmap(run_metrics metrics) {
    uint ret = c_csharp_plotPINVOKE.count_rows_for_heatmap(run_metrics.getCPtr(metrics));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint count_columns_for_heatmap(run_metrics metrics) {
    uint ret = c_csharp_plotPINVOKE.count_columns_for_heatmap(run_metrics.getCPtr(metrics));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer, bool skip_empty) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer, skip_empty);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_2(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data) {
    c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_3(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_flowcell_map2(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size, bool skip_empty) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map2__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size, skip_empty);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map2(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map2__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer, bool skip_empty) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_4(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer, skip_empty);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_5(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_6(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data) {
    c_csharp_plotPINVOKE.plot_flowcell_map__SWIG_7(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_flowcell_map2(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size, bool skip_empty) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map2__SWIG_2(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size, skip_empty);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_flowcell_map2(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_flowcell_map2__SWIG_3(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void list_flowcell_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_accumulated) {
    c_csharp_plotPINVOKE.list_flowcell_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_accumulated);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_flowcell_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.list_flowcell_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_flowcell_metrics(metric_type_description_vector types, bool show_iuo, bool ignore_accumulated) {
    c_csharp_plotPINVOKE.filter_flowcell_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), show_iuo, ignore_accumulated);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter_flowcell_metrics(metric_type_description_vector types, bool show_iuo) {
    c_csharp_plotPINVOKE.filter_flowcell_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), show_iuo);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint calculate_flowcell_buffer_size(run_metrics metrics, filter_options options) {
    uint ret = c_csharp_plotPINVOKE.calculate_flowcell_buffer_size(run_metrics.getCPtr(metrics), filter_options.getCPtr(options));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void plot_sample_qc(run_metrics metrics, uint lane, bar_plot_data data) {
    c_csharp_plotPINVOKE.plot_sample_qc(run_metrics.getCPtr(metrics), lane, bar_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_plot_metrics(metric_type_description_vector types) {
    c_csharp_plotPINVOKE.list_plot_metrics(metric_type_description_vector.getCPtr(types));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_available_plot_metrics(run_metrics metrics, metric_type_description_vector types) {
    c_csharp_plotPINVOKE.list_available_plot_metrics(run_metrics.getCPtr(metrics), metric_type_description_vector.getCPtr(types));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void find_first_valid(subtile_data data, base_metric found) {
    c_csharp_plotPINVOKE.find_first_valid__SWIG_0(subtile_data.getCPtr(data), base_metric.getCPtr(found));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void find_first_valid(subtile_data data, float[] buffer, uint[] id_buffer, base_metric found) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.find_first_valid__SWIG_1(subtile_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_id_buffer, base_metric.getCPtr(found));
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void select_tile_values(subtile_data data, uint lane, uint tile, float[] tile_data_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_tile_data_buffer = tile_data_buffer ) {
    {
      c_csharp_plotPINVOKE.select_tile_values__SWIG_0(subtile_data.getCPtr(data), lane, tile, (global::System.IntPtr)swig_ptrTo_tile_data_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void select_tile_values(subtile_data data, uint lane, uint tile, float[] buffer, uint[] id_buffer, float[] tile_data_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    unsafe{ fixed ( float* swig_ptrTo_tile_data_buffer = tile_data_buffer ) {
    {
      c_csharp_plotPINVOKE.select_tile_values__SWIG_1(subtile_data.getCPtr(data), lane, tile, (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_id_buffer, (global::System.IntPtr)swig_ptrTo_tile_data_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
    }}
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_subtile_map__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), subtile_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_subtile_map__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), subtile_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data) {
    c_csharp_plotPINVOKE.plot_subtile_map__SWIG_2(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), subtile_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_subtile_map(run_metrics metrics, string metric_name, filter_options options, subtile_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_subtile_map__SWIG_3(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), subtile_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_subtile_map(run_metrics metrics, string metric_name, filter_options options, subtile_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_subtile_map__SWIG_4(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), subtile_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_subtile_map(run_metrics metrics, string metric_name, filter_options options, subtile_data data) {
    c_csharp_plotPINVOKE.plot_subtile_map__SWIG_5(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), subtile_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_subtile_metrics(metric_type_description_vector types) {
    c_csharp_plotPINVOKE.list_subtile_metrics__SWIG_0(metric_type_description_vector.getCPtr(types));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_subtile_metrics(run_metrics metrics, metric_type_description_vector types) {
    c_csharp_plotPINVOKE.list_subtile_metrics__SWIG_1(run_metrics.getCPtr(metrics), metric_type_description_vector.getCPtr(types));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint calculate_subtile_buffer_size(run_metrics metrics, metric_type type, filter_options options) {
    uint ret = c_csharp_plotPINVOKE.calculate_subtile_buffer_size(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void plot_subtile_aggregate(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data_x, candle_stick_plot_data data_y) {
    c_csharp_plotPINVOKE.plot_subtile_aggregate__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data_x), candle_stick_plot_data.getCPtr(data_y));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_subtile_aggregate(run_metrics metrics, string metric_name, filter_options options, candle_stick_plot_data data_x, candle_stick_plot_data data_y) {
    c_csharp_plotPINVOKE.plot_subtile_aggregate__SWIG_1(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data_x), candle_stick_plot_data.getCPtr(data_y));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_distortion(run_metrics metrics, filter_options options, uint distortion_curve_index, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_distortion(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), distortion_curve_index, candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_event_by_cycle(run_metrics metrics, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_event_by_cycle(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void list_interval_events(event_type_vector types) {
    c_csharp_plotPINVOKE.list_interval_events(event_type_vector.getCPtr(types));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_event_by_event_type(run_metrics metrics, filter_options options, candle_stick_plot_data data, bool save_outliers) {
    c_csharp_plotPINVOKE.plot_event_by_event_type__SWIG_0(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data), save_outliers);
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_event_by_event_type(run_metrics metrics, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_event_by_event_type__SWIG_1(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_run_diagnostics_by_cycle(run_metrics metrics, filter_options options, candle_stick_plot_data data) {
    c_csharp_plotPINVOKE.plot_run_diagnostics_by_cycle(run_metrics.getCPtr(metrics), filter_options.getCPtr(options), candle_stick_plot_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_1(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data) {
    c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_2(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_run_diagnostics_flowcell_map2(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map2__SWIG_0(run_metrics.getCPtr(metrics), (int)type, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint[] tile_buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_tile_buffer = tile_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_3(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, (global::System.IntPtr)swig_ptrTo_tile_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_4(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, string metric_name, filter_options options, flowcell_data data) {
    c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map__SWIG_5(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void plot_run_diagnostics_flowcell_map2(run_metrics metrics, string metric_name, filter_options options, flowcell_data data, float[] buffer, uint buffer_size, uint[] id_buffer, uint id_buffer_size) {
    unsafe{ fixed ( float* swig_ptrTo_buffer = buffer ) {
    unsafe{ fixed ( uint* swig_ptrTo_id_buffer = id_buffer ) {
    {
      c_csharp_plotPINVOKE.plot_run_diagnostics_flowcell_map2__SWIG_1(run_metrics.getCPtr(metrics), metric_name, filter_options.getCPtr(options), flowcell_data.getCPtr(data), (global::System.IntPtr)swig_ptrTo_buffer, buffer_size, (global::System.IntPtr)swig_ptrTo_id_buffer, id_buffer_size);
      if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    }
    }}
    }}
  }

  public static uint calculate_run_diagnostics_flowcell_buffer_size(run_metrics metrics, filter_options options) {
    uint ret = c_csharp_plotPINVOKE.calculate_run_diagnostics_flowcell_buffer_size(run_metrics.getCPtr(metrics), filter_options.getCPtr(options));
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
