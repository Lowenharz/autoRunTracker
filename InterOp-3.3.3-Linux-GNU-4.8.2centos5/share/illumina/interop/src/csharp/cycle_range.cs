//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Run {

public class cycle_range : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal cycle_range(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(cycle_range obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~cycle_range() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_runPINVOKE.delete_cycle_range(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public cycle_range(uint first_cycle, uint last_cycle) : this(c_csharp_runPINVOKE.new_cycle_range__SWIG_0(first_cycle, last_cycle), true) {
  }

  public cycle_range(uint first_cycle) : this(c_csharp_runPINVOKE.new_cycle_range__SWIG_1(first_cycle), true) {
  }

  public cycle_range() : this(c_csharp_runPINVOKE.new_cycle_range__SWIG_2(), true) {
  }

  public uint first_cycle() {
    uint ret = c_csharp_runPINVOKE.cycle_range_first_cycle__SWIG_0(swigCPtr);
    return ret;
  }

  public uint last_cycle() {
    uint ret = c_csharp_runPINVOKE.cycle_range_last_cycle__SWIG_0(swigCPtr);
    return ret;
  }

  public void first_cycle(uint val) {
    c_csharp_runPINVOKE.cycle_range_first_cycle__SWIG_1(swigCPtr, val);
  }

  public void last_cycle(uint val) {
    c_csharp_runPINVOKE.cycle_range_last_cycle__SWIG_1(swigCPtr, val);
  }

  public bool empty() {
    bool ret = c_csharp_runPINVOKE.cycle_range_empty(swigCPtr);
    return ret;
  }

  public void update(uint cycle) {
    c_csharp_runPINVOKE.cycle_range_update__SWIG_0(swigCPtr, cycle);
  }

  public void update(cycle_range rng) {
    c_csharp_runPINVOKE.cycle_range_update__SWIG_1(swigCPtr, cycle_range.getCPtr(rng));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
