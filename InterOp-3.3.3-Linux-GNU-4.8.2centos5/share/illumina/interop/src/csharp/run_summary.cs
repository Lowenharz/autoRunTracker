//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Summary {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;
using Illumina.InterOp.RunMetrics;

public class run_summary : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal run_summary(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(run_summary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~run_summary() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_summaryPINVOKE.delete_run_summary(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public run_summary() : this(c_csharp_summaryPINVOKE.new_run_summary__SWIG_0(), true) {
  }

  public run_summary(read_info_vector reads, uint lane_count, uint surface_count, uint channel_count) : this(c_csharp_summaryPINVOKE.new_run_summary__SWIG_2(read_info_vector.getCPtr(reads), lane_count, surface_count, channel_count), true) {
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialize(info run_info) {
    c_csharp_summaryPINVOKE.run_summary_initialize__SWIG_0(swigCPtr, info.getCPtr(run_info));
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialize(read_info_vector reads, uint lane_count, uint surface_count, uint channel_count) {
    c_csharp_summaryPINVOKE.run_summary_initialize__SWIG_1(swigCPtr, read_info_vector.getCPtr(reads), lane_count, surface_count, channel_count);
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public void copy_reads(read_info_vector dst) {
    c_csharp_summaryPINVOKE.run_summary_copy_reads(swigCPtr, read_info_vector.getCPtr(dst));
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public read_summary at(uint n) {
    read_summary ret = new read_summary(c_csharp_summaryPINVOKE.run_summary_at(swigCPtr, n), false);
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint size() {
    uint ret = c_csharp_summaryPINVOKE.run_summary_size(swigCPtr);
    return ret;
  }

  public uint lane_count() {
    uint ret = c_csharp_summaryPINVOKE.run_summary_lane_count__SWIG_0(swigCPtr);
    return ret;
  }

  public void lane_count(uint lane_count) {
    c_csharp_summaryPINVOKE.run_summary_lane_count__SWIG_1(swigCPtr, lane_count);
  }

  public uint surface_count() {
    uint ret = c_csharp_summaryPINVOKE.run_summary_surface_count__SWIG_0(swigCPtr);
    return ret;
  }

  public uint channel_count() {
    uint ret = c_csharp_summaryPINVOKE.run_summary_channel_count(swigCPtr);
    return ret;
  }

  public void surface_count(uint surface_count) {
    c_csharp_summaryPINVOKE.run_summary_surface_count__SWIG_1(swigCPtr, surface_count);
  }

  public metric_summary total_summary() {
    metric_summary ret = new metric_summary(c_csharp_summaryPINVOKE.run_summary_total_summary__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void total_summary(metric_summary summary) {
    c_csharp_summaryPINVOKE.run_summary_total_summary__SWIG_1(swigCPtr, metric_summary.getCPtr(summary));
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public metric_summary nonindex_summary() {
    metric_summary ret = new metric_summary(c_csharp_summaryPINVOKE.run_summary_nonindex_summary__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void nonindex_summary(metric_summary summary) {
    c_csharp_summaryPINVOKE.run_summary_nonindex_summary__SWIG_1(swigCPtr, metric_summary.getCPtr(summary));
    if (c_csharp_summaryPINVOKE.SWIGPendingException.Pending) throw c_csharp_summaryPINVOKE.SWIGPendingException.Retrieve();
  }

  public cycle_state_summary cycle_state() {
    cycle_state_summary ret = new cycle_state_summary(c_csharp_summaryPINVOKE.run_summary_cycle_state(swigCPtr), false);
    return ret;
  }

  public void clear() {
    c_csharp_summaryPINVOKE.run_summary_clear(swigCPtr);
  }

}

}
