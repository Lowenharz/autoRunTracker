//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class base_metric : empty_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal base_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.base_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(base_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~base_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_base_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public base_metric(uint lane, uint tile) : this(c_csharp_metricsPINVOKE.new_base_metric__SWIG_0(lane, tile), true) {
  }

  public base_metric(uint lane) : this(c_csharp_metricsPINVOKE.new_base_metric__SWIG_1(lane), true) {
  }

  public base_metric() : this(c_csharp_metricsPINVOKE.new_base_metric__SWIG_2(), true) {
  }

  public void set_base(uint lane, uint tile) {
    c_csharp_metricsPINVOKE.base_metric_set_base(swigCPtr, lane, tile);
  }

  public ulong id() {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_id(swigCPtr);
    return ret;
    }

  public ulong tile_hash() {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_tile_hash(swigCPtr);
    return ret;
    }

  public static ulong create_id(ulong lane, ulong tile, ulong arg2) {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_create_id__SWIG_0(lane, tile, arg2);
    return ret;
    }

  public static ulong create_id(ulong lane, ulong tile) {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_create_id__SWIG_1(lane, tile);
    return ret;
    }

  public static ulong lane_from_id(ulong id) {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_lane_from_id(id);
    return ret;
    }

  public static ulong tile_hash_from_id(ulong id) {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_tile_hash_from_id(id);
    return ret;
    }

  public static ulong tile_from_id(ulong id) {
    ulong ret = c_csharp_metricsPINVOKE.base_metric_tile_from_id(id);
    return ret;
    }

  public uint lane() {
    uint ret = c_csharp_metricsPINVOKE.base_metric_lane(swigCPtr);
    return ret;
  }

  public uint tile() {
    uint ret = c_csharp_metricsPINVOKE.base_metric_tile(swigCPtr);
    return ret;
  }

  public uint number(tile_naming_method arg0) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_number(swigCPtr, (int)arg0);
    return ret;
  }

  public uint section(tile_naming_method method) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_section(swigCPtr, (int)method);
    return ret;
  }

  public uint surface(tile_naming_method method) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_surface(swigCPtr, (int)method);
    return ret;
  }

  public uint swath(tile_naming_method method) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_swath(swigCPtr, (int)method);
    return ret;
  }

  public uint phyiscalLocationIndex(tile_naming_method method, uint section_per_lane, uint tile_count, uint swath_count, bool all_surfaces) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_phyiscalLocationIndex(swigCPtr, (int)method, section_per_lane, tile_count, swath_count, all_surfaces);
    return ret;
  }

  public uint phyiscalLocationColumn(tile_naming_method method, uint swath_count, bool all_surfaces) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_phyiscalLocationColumn(swigCPtr, (int)method, swath_count, all_surfaces);
    return ret;
  }

  public uint phyiscalLocationRow(tile_naming_method method, uint section_per_lane, uint tile_count) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_phyiscalLocationRow(swigCPtr, (int)method, section_per_lane, tile_count);
    return ret;
  }

  public uint physical_location_index(tile_naming_method method, uint section_per_lane, uint tile_count, uint swath_count, bool all_surfaces) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_physical_location_index(swigCPtr, (int)method, section_per_lane, tile_count, swath_count, all_surfaces);
    return ret;
  }

  public uint physical_location_column(tile_naming_method method, uint swath_count, bool all_surfaces) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_physical_location_column(swigCPtr, (int)method, swath_count, all_surfaces);
    return ret;
  }

  public uint physical_location_row(tile_naming_method method, uint section_per_lane, uint tile_count) {
    uint ret = c_csharp_metricsPINVOKE.base_metric_physical_location_row(swigCPtr, (int)method, section_per_lane, tile_count);
    return ret;
  }

  public static string suffix() {
    string ret = c_csharp_metricsPINVOKE.base_metric_suffix();
    return ret;
  }

  public static readonly int LANE_BIT_COUNT = c_csharp_metricsPINVOKE.base_metric_LANE_BIT_COUNT_get();
  public static readonly int TILE_BIT_COUNT = c_csharp_metricsPINVOKE.base_metric_TILE_BIT_COUNT_get();
  public static readonly int CYCLE_BIT_COUNT = c_csharp_metricsPINVOKE.base_metric_CYCLE_BIT_COUNT_get();
  public static readonly int READ_BIT_COUNT = c_csharp_metricsPINVOKE.base_metric_READ_BIT_COUNT_get();
  public static readonly int RESERVED_BIT_COUNT = c_csharp_metricsPINVOKE.base_metric_RESERVED_BIT_COUNT_get();
  public static readonly int READ_BIT_SHIFT = c_csharp_metricsPINVOKE.base_metric_READ_BIT_SHIFT_get();
  public static readonly int CYCLE_BIT_SHIFT = c_csharp_metricsPINVOKE.base_metric_CYCLE_BIT_SHIFT_get();
  public static readonly int EVENT_BIT_SHIFT = c_csharp_metricsPINVOKE.base_metric_EVENT_BIT_SHIFT_get();
  public static readonly int TILE_BIT_SHIFT = c_csharp_metricsPINVOKE.base_metric_TILE_BIT_SHIFT_get();
  public static readonly int LANE_BIT_SHIFT = c_csharp_metricsPINVOKE.base_metric_LANE_BIT_SHIFT_get();

}

}
