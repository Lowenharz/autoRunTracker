//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Metrics {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.Run;

public class registration_metric : base_cycle_metric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal registration_metric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_metricsPINVOKE.registration_metric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(registration_metric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~registration_metric() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_metricsPINVOKE.delete_registration_metric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public registration_metric(uint channel_count, uint subregion_count) : this(c_csharp_metricsPINVOKE.new_registration_metric__SWIG_0(channel_count, subregion_count), true) {
  }

  public registration_metric(uint channel_count) : this(c_csharp_metricsPINVOKE.new_registration_metric__SWIG_1(channel_count), true) {
  }

  public registration_metric() : this(c_csharp_metricsPINVOKE.new_registration_metric__SWIG_2(), true) {
  }

  public registration_metric(registration_metric_header header) : this(c_csharp_metricsPINVOKE.new_registration_metric__SWIG_3(registration_metric_header.getCPtr(header)), true) {
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float affine_transform(uint channel, uint n) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_affine_transform__SWIG_0(swigCPtr, channel, n);
    return ret;
  }

  public float_vector affine_transform() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.registration_metric_affine_transform__SWIG_1(swigCPtr), false);
    return ret;
  }

  public float_vector predicted_error() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.registration_metric_predicted_error(swigCPtr), false);
    return ret;
  }

  public float sub_tile_offsets(uint channel, uint region, uint n) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_sub_tile_offsets__SWIG_0(swigCPtr, channel, region, n);
    return ret;
  }

  public float_vector sub_tile_offsets() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.registration_metric_sub_tile_offsets__SWIG_1(swigCPtr), false);
    return ret;
  }

  public uint channel_count() {
    uint ret = c_csharp_metricsPINVOKE.registration_metric_channel_count(swigCPtr);
    return ret;
  }

  public uint sub_region_count() {
    uint ret = c_csharp_metricsPINVOKE.registration_metric_sub_region_count(swigCPtr);
    return ret;
  }

  public void set_predicted_error(uint index, float err) {
    c_csharp_metricsPINVOKE.registration_metric_set_predicted_error(swigCPtr, index, err);
  }

  public float_vector max_residual_radial_errors() {
    float_vector ret = new float_vector(c_csharp_metricsPINVOKE.registration_metric_max_residual_radial_errors(swigCPtr), true);
    return ret;
  }

  public float max_residual_radial_error() {
    float ret = c_csharp_metricsPINVOKE.registration_metric_max_residual_radial_error__SWIG_0(swigCPtr);
    return ret;
  }

  public float max_residual_radial_error(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_max_residual_radial_error__SWIG_1(swigCPtr, channel);
    return ret;
  }

  public float max_residual_x_error(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_max_residual_x_error(swigCPtr, channel);
    return ret;
  }

  public float max_residual_y_error(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_max_residual_y_error(swigCPtr, channel);
    return ret;
  }

  public float shear(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_shear(swigCPtr, channel);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float theta_z(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_theta_z(swigCPtr, channel);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float theta(uint channel) {
    float ret = c_csharp_metricsPINVOKE.registration_metric_theta(swigCPtr, channel);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_rotation(uint channel, float theta, float shear, float theta_z) {
    c_csharp_metricsPINVOKE.registration_metric_set_rotation(swigCPtr, channel, theta, shear, theta_z);
    if (c_csharp_metricsPINVOKE.SWIGPendingException.Pending) throw c_csharp_metricsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_any_channel_registration_failure() {
    bool ret = c_csharp_metricsPINVOKE.registration_metric_is_any_channel_registration_failure(swigCPtr);
    return ret;
  }

  public static string prefix() {
    string ret = c_csharp_metricsPINVOKE.registration_metric_prefix();
    return ret;
  }

  public static readonly int TYPE = c_csharp_metricsPINVOKE.registration_metric_TYPE_get();
  public static readonly int LATEST_VERSION = c_csharp_metricsPINVOKE.registration_metric_LATEST_VERSION_get();
  public static readonly int AFFINE_LENGTH = c_csharp_metricsPINVOKE.registration_metric_AFFINE_LENGTH_get();
  public static readonly int SUBREGION_PARAM_LENGTH = c_csharp_metricsPINVOKE.registration_metric_SUBREGION_PARAM_LENGTH_get();

}

}
