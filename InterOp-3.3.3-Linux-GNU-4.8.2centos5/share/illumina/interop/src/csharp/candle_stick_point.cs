//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Plot {

using System;
using System.Runtime.InteropServices;
using Illumina.InterOp.RunMetrics;
using Illumina.InterOp.Metrics;
using Illumina.InterOp.Run;

public class candle_stick_point : float_point {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal candle_stick_point(global::System.IntPtr cPtr, bool cMemoryOwn) : base(c_csharp_plotPINVOKE.candle_stick_point_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(candle_stick_point obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~candle_stick_point() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_plotPINVOKE.delete_candle_stick_point(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public candle_stick_point(float x, float p25, float p50, float p75, float lower, float upper, uint data_point_count, float_vector outliers) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_0(x, p25, p50, p75, lower, upper, data_point_count, float_vector.getCPtr(outliers)), true) {
    if (c_csharp_plotPINVOKE.SWIGPendingException.Pending) throw c_csharp_plotPINVOKE.SWIGPendingException.Retrieve();
  }

  public candle_stick_point(float x, float p25, float p50, float p75, float lower, float upper, uint data_point_count) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_1(x, p25, p50, p75, lower, upper, data_point_count), true) {
  }

  public candle_stick_point(float x, float p25, float p50, float p75, float lower, float upper) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_2(x, p25, p50, p75, lower, upper), true) {
  }

  public candle_stick_point(float x, float p25, float p50, float p75, float lower) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_3(x, p25, p50, p75, lower), true) {
  }

  public candle_stick_point(float x, float p25, float p50, float p75) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_4(x, p25, p50, p75), true) {
  }

  public candle_stick_point(float x, float p25, float p50) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_5(x, p25, p50), true) {
  }

  public candle_stick_point(float x, float p25) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_6(x, p25), true) {
  }

  public candle_stick_point(float x) : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_7(x), true) {
  }

  public candle_stick_point() : this(c_csharp_plotPINVOKE.new_candle_stick_point__SWIG_8(), true) {
  }

  public new float max_value() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_max_value(swigCPtr);
    return ret;
  }

  public new float min_value() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_min_value(swigCPtr);
    return ret;
  }

  public float p25() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_p25(swigCPtr);
    return ret;
  }

  public float p50() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_p50(swigCPtr);
    return ret;
  }

  public float p75() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_p75(swigCPtr);
    return ret;
  }

  public float lower() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_lower(swigCPtr);
    return ret;
  }

  public float upper() {
    float ret = c_csharp_plotPINVOKE.candle_stick_point_upper(swigCPtr);
    return ret;
  }

  public float_vector outliers() {
    float_vector ret = new float_vector(c_csharp_plotPINVOKE.candle_stick_point_outliers(swigCPtr), false);
    return ret;
  }

  public uint data_point_count() {
    uint ret = c_csharp_plotPINVOKE.candle_stick_point_data_point_count(swigCPtr);
    return ret;
  }

}

}
