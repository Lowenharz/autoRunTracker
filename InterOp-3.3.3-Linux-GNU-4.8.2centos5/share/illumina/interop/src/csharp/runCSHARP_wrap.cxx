/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_run(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_run(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_run(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_CustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_CustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_CustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_CustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_CustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_CustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_CustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include "interop/io/stream_exceptions.h"
#include "interop/model/model_exceptions.h"
#include "interop/util/xml_exceptions.h"


#include "interop/model/run/rfid_metadata.h"


#include "interop/interop.h"
#include "interop/model/run/cycle_range.h"
#include "interop/model/run/read_info.h"
#include "interop/model/run/flowcell_layout.h"
#include "interop/model/run/image_dimensions.h"
#include "interop/model/run/info.h"
#include "interop/model/run/run_exceptions.h"
#include "interop/model/run/parameters.h"
#include "interop/logic/metric/q_metric.h"
#include "interop/logic/utils/enums.h"
#include "interop/util/xml_exceptions.h"

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint64_t > *new_std_vector_Sl_uint64_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned long std_vector_Sl_uint64_t_Sg__getitemcopy(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned long const &std_vector_Sl_uint64_t_Sg__getitem(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__setitem(std::vector< uint64_t > *self,int index,unsigned long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__AddRange(std::vector< uint64_t > *self,std::vector< unsigned long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned long > *std_vector_Sl_uint64_t_Sg__GetRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Insert(std::vector< uint64_t > *self,int index,unsigned long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__InsertRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveAt(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned long > *std_vector_Sl_uint64_t_Sg__Repeat(unsigned long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned long >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(std::vector< uint64_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__SetRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Contains(std::vector< uint64_t > *self,unsigned long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__IndexOf(std::vector< uint64_t > *self,unsigned long const &value){
        int index = -1;
        std::vector< unsigned long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__LastIndexOf(std::vector< uint64_t > *self,unsigned long const &value){
        int index = -1;
        std::vector< unsigned long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Remove(std::vector< uint64_t > *self,unsigned long const &value){
        std::vector< unsigned long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint16_t > *new_std_vector_Sl_uint16_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned short >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned short >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned short std_vector_Sl_uint16_t_Sg__getitemcopy(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned short const &std_vector_Sl_uint16_t_Sg__getitem(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__setitem(std::vector< uint16_t > *self,int index,unsigned short const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__AddRange(std::vector< uint16_t > *self,std::vector< unsigned short > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__GetRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned short >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Insert(std::vector< uint16_t > *self,int index,unsigned short const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__InsertRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveAt(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__Repeat(unsigned short const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned short >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(std::vector< uint16_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__SetRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Contains(std::vector< uint16_t > *self,unsigned short const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__IndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__LastIndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Remove(std::vector< uint16_t > *self,unsigned short const &value){
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint32_t > *new_std_vector_Sl_uint32_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned int std_vector_Sl_uint32_t_Sg__getitemcopy(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned int const &std_vector_Sl_uint32_t_Sg__getitem(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__setitem(std::vector< uint32_t > *self,int index,unsigned int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__AddRange(std::vector< uint32_t > *self,std::vector< unsigned int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_uint32_t_Sg__GetRange(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Insert(std::vector< uint32_t > *self,int index,unsigned int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__InsertRange(std::vector< uint32_t > *self,int index,std::vector< unsigned int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__RemoveAt(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__RemoveRange(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_uint32_t_Sg__Repeat(unsigned int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned int >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Reverse__SWIG_0(std::vector< uint32_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Reverse__SWIG_1(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__SetRange(std::vector< uint32_t > *self,int index,std::vector< unsigned int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg__Contains(std::vector< uint32_t > *self,unsigned int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint32_t_Sg__IndexOf(std::vector< uint32_t > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint32_t_Sg__LastIndexOf(std::vector< uint32_t > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg__Remove(std::vector< uint32_t > *self,unsigned int const &value){
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN float const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< bool > *new_std_vector_Sl_bool_Sg___SWIG_2(int capacity){
        std::vector< bool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< bool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitemcopy(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitem(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__setitem(std::vector< bool > *self,int index,bool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__AddRange(std::vector< bool > *self,std::vector< bool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__GetRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< bool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Insert(std::vector< bool > *self,int index,bool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__InsertRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveAt(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__Repeat(bool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< bool >(count, value);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_0(std::vector< bool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_1(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__SetRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Contains(std::vector< bool > *self,bool const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_bool_Sg__IndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_bool_Sg__LastIndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Remove(std::vector< bool > *self,bool const &value){
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_uint8_t_Sg__getitemcopy(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned char const &std_vector_Sl_uint8_t_Sg__getitem(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__setitem(std::vector< uint8_t > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__AddRange(std::vector< uint8_t > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__GetRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Insert(std::vector< uint8_t > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__InsertRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveAt(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(std::vector< uint8_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__SetRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Contains(std::vector< uint8_t > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__IndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__LastIndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Remove(std::vector< uint8_t > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< size_t > *new_std_vector_Sl_size_t_Sg___SWIG_2(int capacity){
        std::vector< size_t >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< size_t >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN size_t std_vector_Sl_size_t_Sg__getitemcopy(std::vector< size_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN size_t const &std_vector_Sl_size_t_Sg__getitem(std::vector< size_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__setitem(std::vector< size_t > *self,int index,size_t const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__AddRange(std::vector< size_t > *self,std::vector< size_t > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< size_t > *std_vector_Sl_size_t_Sg__GetRange(std::vector< size_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< size_t >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__Insert(std::vector< size_t > *self,int index,size_t const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__InsertRange(std::vector< size_t > *self,int index,std::vector< size_t > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__RemoveAt(std::vector< size_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__RemoveRange(std::vector< size_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< size_t > *std_vector_Sl_size_t_Sg__Repeat(size_t const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< size_t >(count, value);
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__Reverse__SWIG_0(std::vector< size_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__Reverse__SWIG_1(std::vector< size_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_size_t_Sg__SetRange(std::vector< size_t > *self,int index,std::vector< size_t > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::run::read_info > *new_std_vector_Sl_illumina_interop_model_run_read_info_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::run::read_info >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::run::read_info >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::run::read_info std_vector_Sl_illumina_interop_model_run_read_info_Sg__getitemcopy(std::vector< illumina::interop::model::run::read_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::run::read_info const &std_vector_Sl_illumina_interop_model_run_read_info_Sg__getitem(std::vector< illumina::interop::model::run::read_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__setitem(std::vector< illumina::interop::model::run::read_info > *self,int index,illumina::interop::model::run::read_info const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__AddRange(std::vector< illumina::interop::model::run::read_info > *self,std::vector< illumina::interop::model::run::read_info > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::run::read_info > *std_vector_Sl_illumina_interop_model_run_read_info_Sg__GetRange(std::vector< illumina::interop::model::run::read_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::run::read_info >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__Insert(std::vector< illumina::interop::model::run::read_info > *self,int index,illumina::interop::model::run::read_info const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__InsertRange(std::vector< illumina::interop::model::run::read_info > *self,int index,std::vector< illumina::interop::model::run::read_info > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__RemoveAt(std::vector< illumina::interop::model::run::read_info > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__RemoveRange(std::vector< illumina::interop::model::run::read_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::run::read_info > *std_vector_Sl_illumina_interop_model_run_read_info_Sg__Repeat(illumina::interop::model::run::read_info const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::run::read_info >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::run::read_info > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::run::read_info > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__SetRange(std::vector< illumina::interop::model::run::read_info > *self,int index,std::vector< illumina::interop::model::run::read_info > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::constants::event_type > *new_std_vector_Sl_illumina_interop_constants_event_type_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::constants::event_type >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::constants::event_type >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::constants::event_type std_vector_Sl_illumina_interop_constants_event_type_Sg__getitemcopy(std::vector< illumina::interop::constants::event_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::constants::event_type const &std_vector_Sl_illumina_interop_constants_event_type_Sg__getitem(std::vector< illumina::interop::constants::event_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__setitem(std::vector< illumina::interop::constants::event_type > *self,int index,illumina::interop::constants::event_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__AddRange(std::vector< illumina::interop::constants::event_type > *self,std::vector< illumina::interop::constants::event_type > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::constants::event_type > *std_vector_Sl_illumina_interop_constants_event_type_Sg__GetRange(std::vector< illumina::interop::constants::event_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::constants::event_type >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__Insert(std::vector< illumina::interop::constants::event_type > *self,int index,illumina::interop::constants::event_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__InsertRange(std::vector< illumina::interop::constants::event_type > *self,int index,std::vector< illumina::interop::constants::event_type > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__RemoveAt(std::vector< illumina::interop::constants::event_type > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__RemoveRange(std::vector< illumina::interop::constants::event_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::constants::event_type > *std_vector_Sl_illumina_interop_constants_event_type_Sg__Repeat(illumina::interop::constants::event_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::constants::event_type >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__Reverse__SWIG_0(std::vector< illumina::interop::constants::event_type > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__Reverse__SWIG_1(std::vector< illumina::interop::constants::event_type > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__SetRange(std::vector< illumina::interop::constants::event_type > *self,int index,std::vector< illumina::interop::constants::event_type > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_rfid_metadata__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  result = (illumina::interop::model::run::rfid_metadata *)new illumina::interop::model::run::rfid_metadata();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_rfid_metadata__SWIG_1___(unsigned long jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  illumina::interop::model::run::rfid_metadata::ulong_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  arg1 = (illumina::interop::model::run::rfid_metadata::ulong_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (illumina::interop::model::run::rfid_metadata *)new illumina::interop::model::run::rfid_metadata(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_rfid_metadata_expiration_date___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  illumina::interop::model::run::rfid_metadata::ulong_t result;
  
  arg1 = (illumina::interop::model::run::rfid_metadata *)jarg1; 
  result = (illumina::interop::model::run::rfid_metadata::ulong_t)((illumina::interop::model::run::rfid_metadata const *)arg1)->expiration_date();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_rfid_metadata_part_number___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::rfid_metadata *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::rfid_metadata const *)arg1)->part_number();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_rfid_metadata_serial_number___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::rfid_metadata *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::rfid_metadata const *)arg1)->serial_number();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_rfid_metadata___(void * jarg1) {
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  
  arg1 = (illumina::interop::model::run::rfid_metadata *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_base_exception___(void * jarg1) {
  illumina::interop::util::base_exception *arg1 = (illumina::interop::util::base_exception *) 0 ;
  
  arg1 = (illumina::interop::util::base_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_xml_format_exception___(void * jarg1) {
  illumina::interop::xml::xml_format_exception *arg1 = (illumina::interop::xml::xml_format_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::xml_format_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_xml_file_not_found_exception___(void * jarg1) {
  illumina::interop::xml::xml_file_not_found_exception *arg1 = (illumina::interop::xml::xml_file_not_found_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::xml_file_not_found_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_xml_parse_exception___(void * jarg1) {
  illumina::interop::xml::xml_parse_exception *arg1 = (illumina::interop::xml::xml_parse_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::xml_parse_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_bad_xml_format_exception___(void * jarg1) {
  illumina::interop::xml::bad_xml_format_exception *arg1 = (illumina::interop::xml::bad_xml_format_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::bad_xml_format_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_empty_xml_format_exception___(void * jarg1) {
  illumina::interop::xml::empty_xml_format_exception *arg1 = (illumina::interop::xml::empty_xml_format_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::empty_xml_format_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_missing_xml_element_exception___(void * jarg1) {
  illumina::interop::xml::missing_xml_element_exception *arg1 = (illumina::interop::xml::missing_xml_element_exception *) 0 ;
  
  arg1 = (illumina::interop::xml::missing_xml_element_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_invalid_read_exception___(void * jarg1) {
  illumina::interop::model::invalid_read_exception *arg1 = (illumina::interop::model::invalid_read_exception *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_read_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_invalid_tile_naming_method___(void * jarg1) {
  illumina::interop::model::invalid_tile_naming_method *arg1 = (illumina::interop::model::invalid_tile_naming_method *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_tile_naming_method *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_invalid_run_info_exception___(void * jarg1) {
  illumina::interop::model::invalid_run_info_exception *arg1 = (illumina::interop::model::invalid_run_info_exception *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_run_info_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_invalid_tile_list_exception___(void * jarg1) {
  illumina::interop::model::invalid_tile_list_exception *arg1 = (illumina::interop::model::invalid_tile_list_exception *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_tile_list_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_invalid_run_info_cycle_exception___(void * jarg1) {
  illumina::interop::model::invalid_run_info_cycle_exception *arg1 = (illumina::interop::model::invalid_run_info_cycle_exception *) 0 ;
  
  arg1 = (illumina::interop::model::invalid_run_info_cycle_exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Clear___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Add___(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_string_vector__SWIG_0___() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_string_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_string_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_getitemcopy___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_getitem___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_setitem___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Insert___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Repeat___(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Contains___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_IndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_LastIndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_string_vector_Remove___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_string_vector___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Clear___(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Add___(void * jarg1, unsigned long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ulong_vector__SWIG_0___() {
  void * jresult ;
  std::vector< uint64_t > *result = 0 ;
  
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ulong_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >((std::vector< uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ulong_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint64_t > *)new_std_vector_Sl_uint64_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned long)std_vector_Sl_uint64_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_getitem___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned long *) &std_vector_Sl_uint64_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_setitem___(void * jarg1, int jarg2, unsigned long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__setitem(arg1,arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long > *arg2 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint64_t_Sg__AddRange(arg1,(std::vector< unsigned long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned long > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned long > *)std_vector_Sl_uint64_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Insert___(void * jarg1, int jarg2, unsigned long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__Insert(arg1,arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned long > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Repeat___(unsigned long jarg1, int jarg2) {
  void * jresult ;
  unsigned long *arg1 = 0 ;
  int arg2 ;
  unsigned long temp1 ;
  std::vector< unsigned long > *result = 0 ;
  
  temp1 = (unsigned long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long > *)std_vector_Sl_uint64_t_Sg__Repeat((unsigned long const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned long > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Contains___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Contains(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_IndexOf___(void * jarg1, unsigned long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__IndexOf(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_LastIndexOf___(void * jarg1, unsigned long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__LastIndexOf(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ulong_vector_Remove___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Remove(arg1,(unsigned long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_ulong_vector___(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Clear___(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Add___(void * jarg1, unsigned short jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned short const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ushort_vector__SWIG_0___() {
  void * jresult ;
  std::vector< uint16_t > *result = 0 ;
  
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ushort_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >((std::vector< uint16_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_ushort_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint16_t > *)new_std_vector_Sl_uint16_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned short)std_vector_Sl_uint16_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_getitem___(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned short *) &std_vector_Sl_uint16_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_setitem___(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__setitem(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short > *arg2 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint16_t_Sg__AddRange(arg1,(std::vector< unsigned short > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned short > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Insert___(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__Insert(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Repeat___(unsigned short jarg1, int jarg2) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  int arg2 ;
  unsigned short temp1 ;
  std::vector< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__Repeat((unsigned short const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Contains___(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Contains(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_IndexOf___(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__IndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_LastIndexOf___(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__LastIndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_ushort_vector_Remove___(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_ushort_vector___(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Clear___(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Add___(void * jarg1, unsigned int jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uint_vector__SWIG_0___() {
  void * jresult ;
  std::vector< uint32_t > *result = 0 ;
  
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uint_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uint_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint32_t > *)new_std_vector_Sl_uint32_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned int)std_vector_Sl_uint32_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_getitem___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned int *) &std_vector_Sl_uint32_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_setitem___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint32_t_Sg__AddRange(arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_uint32_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Insert___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__Insert(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint32_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint32_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Repeat___(unsigned int jarg1, int jarg2) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  int arg2 ;
  unsigned int temp1 ;
  std::vector< unsigned int > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_uint32_t_Sg__Repeat((unsigned int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  std_vector_Sl_uint32_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint32_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Contains___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint32_t_Sg__Contains(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_IndexOf___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint32_t_Sg__IndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_LastIndexOf___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint32_t_Sg__LastIndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uint_vector_Remove___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint32_t_Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_uint_vector___(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Clear___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Add___(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_float_vector__SWIG_0___() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_float_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_float_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_getitemcopy___(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_getitem___(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_setitem___(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Insert___(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Repeat___(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Contains___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_IndexOf___(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_LastIndexOf___(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_float_vector_Remove___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_float_vector___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Clear___(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Add___(void * jarg1, unsigned int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((bool const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_bool_vector__SWIG_0___() {
  void * jresult ;
  std::vector< bool > *result = 0 ;
  
  result = (std::vector< bool > *)new std::vector< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_bool_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_bool_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< bool > *)new_std_vector_Sl_bool_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_getitem___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_setitem___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__setitem(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_bool_Sg__AddRange(arg1,(std::vector< bool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Insert___(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__Insert(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__InsertRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_bool_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Repeat___(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  int arg2 ;
  bool temp1 ;
  std::vector< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__Repeat((bool const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  std_vector_Sl_bool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__SetRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Contains___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Contains(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_IndexOf___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__IndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_LastIndexOf___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__LastIndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_bool_vector_Remove___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Remove(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_bool_vector___(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Clear___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Add___(void * jarg1, unsigned char jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uchar_vector__SWIG_0___() {
  void * jresult ;
  std::vector< uint8_t > *result = 0 ;
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uchar_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_uchar_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_uint8_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_getitem___(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char *) &std_vector_Sl_uint8_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_setitem___(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint8_t_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Insert___(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Repeat___(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__Repeat((unsigned char const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Contains___(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_IndexOf___(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_LastIndexOf___(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_uchar_vector_Remove___(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_uchar_vector___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Clear___(void * jarg1) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Add___(void * jarg1, unsigned long jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  size_t *arg2 = 0 ;
  size_t temp2 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((size_t const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  result = ((std::vector< size_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  result = ((std::vector< size_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (std::vector< size_t >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_size_vector__SWIG_0___() {
  void * jresult ;
  std::vector< size_t > *result = 0 ;
  
  result = (std::vector< size_t > *)new std::vector< size_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_size_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< size_t > *arg1 = 0 ;
  std::vector< size_t > *result = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< size_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< size_t > *)new std::vector< size_t >((std::vector< size_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_size_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< size_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< size_t > *)new_std_vector_Sl_size_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  size_t result;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_size_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_getitem___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  size_t *result = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (size_t *) &std_vector_Sl_size_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_setitem___(void * jarg1, int jarg2, unsigned long jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_size_t_Sg__setitem(arg1,arg2,(size_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (std::vector< size_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< size_t > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_size_t_Sg__AddRange(arg1,(std::vector< size_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< size_t > *result = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< size_t > *)std_vector_Sl_size_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Insert___(void * jarg1, int jarg2, unsigned long jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_size_t_Sg__Insert(arg1,arg2,(size_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t > *arg3 = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< size_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< size_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_size_t_Sg__InsertRange(arg1,arg2,(std::vector< size_t > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_size_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_size_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Repeat___(unsigned long jarg1, int jarg2) {
  void * jresult ;
  size_t *arg1 = 0 ;
  int arg2 ;
  size_t temp1 ;
  std::vector< size_t > *result = 0 ;
  
  temp1 = (size_t)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< size_t > *)std_vector_Sl_size_t_Sg__Repeat((size_t const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  std_vector_Sl_size_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_size_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_size_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t > *arg3 = 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< size_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< size_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_size_t_Sg__SetRange(arg1,arg2,(std::vector< size_t > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_size_vector___(void * jarg1) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  arg1 = (std::vector< size_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_library_version___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)illumina::interop::library_version();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_INTEROP_UNKNOWN_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_cycle_range__SWIG_0___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::run::cycle_range::cycle_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::run::cycle_range::cycle_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_cycle_range__SWIG_1___(unsigned long jarg1) {
  void * jresult ;
  illumina::interop::model::run::cycle_range::cycle_t arg1 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::run::cycle_range::cycle_t)jarg1; 
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_cycle_range__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_first_cycle__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  result = ((illumina::interop::model::run::cycle_range const *)arg1)->first_cycle();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_last_cycle__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  result = ((illumina::interop::model::run::cycle_range const *)arg1)->last_cycle();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_first_cycle__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->first_cycle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_last_cycle__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->last_cycle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  result = (bool)((illumina::interop::model::run::cycle_range const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_update__SWIG_0___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_cycle_range_update__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return ;
  } 
  (arg1)->update((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_subtract___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::run::cycle_range *arg1 = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t *arg2 = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t temp2 ;
  illumina::interop::model::run::cycle_range result;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return 0;
  } 
  temp2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg2 = &temp2; 
  result = operator -((illumina::interop::model::run::cycle_range const &)*arg1,(size_t const &)*arg2);
  jresult = new illumina::interop::model::run::cycle_range((const illumina::interop::model::run::cycle_range &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_cycle_range___(void * jarg1) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  
  arg1 = (illumina::interop::model::run::cycle_range *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info__SWIG_0___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range::cycle_t arg3 ;
  bool arg4 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg3 = (illumina::interop::model::run::cycle_range::cycle_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info__SWIG_1___(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range::cycle_t arg3 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg3 = (illumina::interop::model::run::cycle_range::cycle_t)jarg3; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info__SWIG_2___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info__SWIG_3___(unsigned long jarg1) {
  void * jresult ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info__SWIG_4___() {
  void * jresult ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_number___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::read_info::number_t result;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->number();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_is_index___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1; 
  result = (bool)((illumina::interop::model::run::read_info const *)arg1)->is_index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_total_cycles___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->total_cycles();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_useable_cycles___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->useable_cycles();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_read_info___(void * jarg1) {
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_0___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, int jarg8, char * jarg9) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t arg8 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::flowcell_layout::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)jarg8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7,arg8,(std::string const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_1___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t arg8 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::flowcell_layout::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)jarg8; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::flowcell_layout::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_3___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_4___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_5___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_6___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_7___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_8___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_flowcell_layout__SWIG_9___() {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_lane_count__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->lane_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_surface_count__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->surface_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_swath_count__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->swath_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_tile_count__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->tile_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_sections_per_lane__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->sections_per_lane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_lanes_per_section__SWIG_0___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->lanes_per_section();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_total_number_of_sections___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->total_number_of_sections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_naming_method___(void * jarg1) {
  int jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->naming_method();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_tiles___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::str_vector_t *) &((illumina::interop::model::run::flowcell_layout const *)arg1)->tiles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_barcode___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::flowcell_layout const *)arg1)->barcode();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_total_swaths___(void * jarg1, unsigned int jarg2) {
  unsigned long jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  bool arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((illumina::interop::model::run::flowcell_layout const *)arg1)->total_swaths(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_tiles_per_lane___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  result = ((illumina::interop::model::run::flowcell_layout const *)arg1)->tiles_per_lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_set_naming_method___(void * jarg1, int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_lane_count__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->lane_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_surface_count__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->surface_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_swath_count__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->swath_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_tile_count__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_sections_per_lane__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->sections_per_lane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_flowcell_layout_lanes_per_section__SWIG_1___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->lanes_per_section(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_flowcell_layout___(void * jarg1) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_image_dimensions__SWIG_0___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_image_dimensions__SWIG_1___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_image_dimensions__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_image_dimensions_width___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::image_dimensions *)jarg1; 
  result = ((illumina::interop::model::run::image_dimensions const *)arg1)->width();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_image_dimensions_height___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::image_dimensions *)jarg1; 
  result = ((illumina::interop::model::run::image_dimensions const *)arg1)->height();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_image_dimensions___(void * jarg1) {
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  
  arg1 = (illumina::interop::model::run::image_dimensions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_0___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::image_dimensions *arg8 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg9 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  arg7 = (illumina::interop::model::run::info::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::str_vector_t const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::image_dimensions *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::image_dimensions const & type is null", 0);
    return 0;
  } 
  arg9 = (illumina::interop::model::run::info::read_vector_t *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::read_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7,(illumina::interop::model::run::image_dimensions const &)*arg8,(illumina::interop::model::run::info::read_vector_t const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_1___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5, void * jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::image_dimensions *arg8 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  arg7 = (illumina::interop::model::run::info::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::str_vector_t const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::image_dimensions *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::image_dimensions const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7,(illumina::interop::model::run::image_dimensions const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_2___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  arg7 = (illumina::interop::model::run::info::str_vector_t *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::str_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_3___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_4___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_5___(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (size_t)jarg4; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_6___(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_7___(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_8___(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_9___() {
  void * jresult ;
  illumina::interop::model::run::info *result = 0 ;
  
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_10___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg3 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::run::info::read_vector_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::read_vector_t const & type is null", 0);
    return 0;
  } 
  arg3 = (illumina::interop::model::run::info::str_vector_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::str_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1,(illumina::interop::model::run::info::read_vector_t const &)*arg2,(illumina::interop::model::run::info::str_vector_t const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_11___(void * jarg1, void * jarg2) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  arg2 = (illumina::interop::model::run::info::read_vector_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::read_vector_t const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1,(illumina::interop::model::run::info::read_vector_t const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_info__SWIG_12___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::flowcell_layout *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_read__SWIG_0___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_CustomExceptionRegisterCallback_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::util::base_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_base_exception_CustomExceptionRegisterCallback_base_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_validate__SWIG_0___(void * jarg1) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate();
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_CustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_CustomExceptionRegisterCallback_invalid_tile_naming_method((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_validate_tiles___(void * jarg1) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_tiles();
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_CustomExceptionRegisterCallback_invalid_tile_list_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_validate__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate(arg2,arg3);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_CustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_validate_cycle___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_cycle(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_CustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_CustomExceptionRegisterCallback_invalid_run_info_cycle_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_validate_read___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned long jarg4) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  size_t arg4 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_read(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_CustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_instrument_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->instrument_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_flowcell_id___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->flowcell_id();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_run_number___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->run_number();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_date___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->date();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_version___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::uint_t result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (illumina::interop::model::run::info::uint_t)((illumina::interop::model::run::info const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_flowcell__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout *) &((illumina::interop::model::run::info const *)arg1)->flowcell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_channels__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::str_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (illumina::interop::model::run::info::str_vector_t *) &((illumina::interop::model::run::info const *)arg1)->channels();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_dimensions_of_image___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (illumina::interop::model::run::image_dimensions *) &((illumina::interop::model::run::info const *)arg1)->dimensions_of_image();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_reads__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::read_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (illumina::interop::model::run::info::read_vector_t *) &((illumina::interop::model::run::info const *)arg1)->reads();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_is_indexed___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_indexed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_is_paired_end___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_paired_end();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_is_last_cycle_of_read___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_last_cycle_of_read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_cycle_within_read___(void * jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::run::info const *)arg1)->cycle_within_read(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_read__SWIG_1___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::run::read_info *) &((illumina::interop::model::run::info const *)arg1)->read(arg2);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_CustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_channels__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::str_vector_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (illumina::interop::model::run::info::str_vector_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::str_vector_t const & type is null", 0);
    return ;
  } 
  (arg1)->channels((illumina::interop::model::run::info::str_vector_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_reads__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (illumina::interop::model::run::info::read_vector_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info::read_vector_t const & type is null", 0);
    return ;
  } 
  (arg1)->reads((illumina::interop::model::run::info::read_vector_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_set_naming_method___(void * jarg1, int jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_flowcell__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::flowcell_layout *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::flowcell_layout const & type is null", 0);
    return ;
  } 
  (arg1)->flowcell((illumina::interop::model::run::flowcell_layout const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_total_cycles___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->total_cycles();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_useable_cycles___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->useable_cycles();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_read_file___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read_file((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_parse___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (char *)jarg2; 
  try {
    (arg1)->parse(arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_write__SWIG_0___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->write((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_info_write__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  try {
    ((illumina::interop::model::run::info const *)arg1)->write(*arg2);
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_info___(void * jarg1) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  arg1 = (illumina::interop::model::run::info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_0___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7, void * jarg8, char * jarg9, void * jarg10, char * jarg11) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg10 = 0 ;
  std::string *arg11 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::rfid_metadata *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::rfid_metadata *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  arg10 = (illumina::interop::model::run::rfid_metadata *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  if (!jarg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg11_str(jarg11);
  arg11 = &arg11_str; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9,(illumina::interop::model::run::rfid_metadata const &)*arg10,(std::string const &)*arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_1___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7, void * jarg8, char * jarg9, void * jarg10) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg10 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::rfid_metadata *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::rfid_metadata *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  arg10 = (illumina::interop::model::run::rfid_metadata *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9,(illumina::interop::model::run::rfid_metadata const &)*arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_2___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7, void * jarg8, char * jarg9) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::rfid_metadata *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::rfid_metadata *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_3___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::rfid_metadata *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  arg8 = (illumina::interop::model::run::rfid_metadata *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_4___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = (illumina::interop::model::run::rfid_metadata *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::rfid_metadata const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_5___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_6___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_7___(unsigned int jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_8___(unsigned int jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_9___(unsigned int jarg1, char * jarg2) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_10___(unsigned int jarg1) {
  void * jresult ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_parameters__SWIG_11___() {
  void * jresult ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_instrument_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->instrument_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_instrument_type___(void * jarg1) {
  int jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::instrument_type_t result;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::parameters::instrument_type_t)((illumina::interop::model::run::parameters const *)arg1)->instrument_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_experiment_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->experiment_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_chemistry___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->chemistry();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_control_lane___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::uint_t result;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::parameters::uint_t)((illumina::interop::model::run::parameters const *)arg1)->control_lane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_version___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::uint_t result;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::parameters::uint_t)((illumina::interop::model::run::parameters const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_flowcell_rfid___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->flowcell_rfid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_bottle_rfid___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->bottle_rfid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_bottle_barcode___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->bottle_barcode();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_reagent_rfid___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->reagent_rfid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_reagent_barcode___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->reagent_barcode();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_read___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_read_file___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->read_file((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_parse___(void * jarg1, char * jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  arg2 = (char *)jarg2; 
  try {
    (arg1)->parse(arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_CustomExceptionRegisterCallback_xml_file_not_found_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_CustomExceptionRegisterCallback_bad_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_CustomExceptionRegisterCallback_empty_xml_format_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_CustomExceptionRegisterCallback_missing_xml_element_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_CustomExceptionRegisterCallback_xml_parse_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_parameters_parse_time___(char * jarg1) {
  unsigned long jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::model::run::rfid_metadata::ulong_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::model::run::rfid_metadata::ulong_t)illumina::interop::model::run::parameters::parse_time((std::string const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_parameters___(void * jarg1) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  
  arg1 = (illumina::interop::model::run::parameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  illumina::interop::model::run::read_info *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (illumina::interop::model::run::read_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::run::read_info const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  result = ((std::vector< illumina::interop::model::run::read_info > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  result = ((std::vector< illumina::interop::model::run::read_info > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::run::read_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::run::read_info > *)new std::vector< illumina::interop::model::run::read_info >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = 0 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::run::read_info > *)new std::vector< illumina::interop::model::run::read_info >((std::vector< illumina::interop::model::run::read_info > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_read_info_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::run::read_info > *)new_std_vector_Sl_illumina_interop_model_run_read_info_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::run::read_info result;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_run_read_info_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::run::read_info((const illumina::interop::model::run::read_info &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::run::read_info *) &std_vector_Sl_illumina_interop_model_run_read_info_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::run::read_info *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::run::read_info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__setitem(arg1,arg2,(illumina::interop::model::run::read_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::run::read_info > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_run_read_info_Sg__AddRange(arg1,(std::vector< illumina::interop::model::run::read_info > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::run::read_info > *)std_vector_Sl_illumina_interop_model_run_read_info_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  illumina::interop::model::run::read_info *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::run::read_info *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__Insert(arg1,arg2,(illumina::interop::model::run::read_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::run::read_info > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::run::read_info > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::run::read_info > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::run::read_info *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::run::read_info > *)std_vector_Sl_illumina_interop_model_run_read_info_Sg__Repeat((illumina::interop::model::run::read_info const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  std_vector_Sl_illumina_interop_model_run_read_info_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::run::read_info > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::run::read_info > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::run::read_info > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_read_info_vector___(void * jarg1) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Add___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  illumina::interop::constants::event_type *arg2 = 0 ;
  illumina::interop::constants::event_type temp2 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  temp2 = (illumina::interop::constants::event_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((illumina::interop::constants::event_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::event_type > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type result;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  result = ((std::vector< illumina::interop::constants::event_type > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::event_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_event_type_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  result = (std::vector< illumina::interop::constants::event_type > *)new std::vector< illumina::interop::constants::event_type >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_event_type_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = 0 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::event_type > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::constants::event_type > *)new std::vector< illumina::interop::constants::event_type >((std::vector< illumina::interop::constants::event_type > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_new_event_type_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::constants::event_type > *)new_std_vector_Sl_illumina_interop_constants_event_type_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::event_type result;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::event_type)std_vector_Sl_illumina_interop_constants_event_type_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::event_type *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::constants::event_type *) &std_vector_Sl_illumina_interop_constants_event_type_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::event_type *arg3 = 0 ;
  illumina::interop::constants::event_type temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::event_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__setitem(arg1,arg2,(enum illumina::interop::constants::event_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< illumina::interop::constants::event_type > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (std::vector< illumina::interop::constants::event_type > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::event_type > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_constants_event_type_Sg__AddRange(arg1,(std::vector< enum illumina::interop::constants::event_type > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::constants::event_type > *)std_vector_Sl_illumina_interop_constants_event_type_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  illumina::interop::constants::event_type *arg3 = 0 ;
  illumina::interop::constants::event_type temp3 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (illumina::interop::constants::event_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__Insert(arg1,arg2,(enum illumina::interop::constants::event_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::event_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::event_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::event_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__InsertRange(arg1,arg2,(std::vector< enum illumina::interop::constants::event_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::constants::event_type *arg1 = 0 ;
  int arg2 ;
  illumina::interop::constants::event_type temp1 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  temp1 = (illumina::interop::constants::event_type)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::constants::event_type > *)std_vector_Sl_illumina_interop_constants_event_type_Sg__Repeat((enum illumina::interop::constants::event_type const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  std_vector_Sl_illumina_interop_constants_event_type_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_event_type_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::event_type > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::constants::event_type > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::constants::event_type > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__SetRange(arg1,arg2,(std::vector< enum illumina::interop::constants::event_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_delete_event_type_vector___(void * jarg1) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::constants::event_type > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_metric_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::metric_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_1___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_group__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_group >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_group__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_group >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_metric_group___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_group result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::metric_group)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_group >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_2___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_group arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_group >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_tile_naming_method__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::tile_naming_method >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_tile_naming_method__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::tile_naming_method >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_tile_naming_method___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::tile_naming_method result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::tile_naming_method)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::tile_naming_method >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_3___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::tile_naming_method arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::tile_naming_method >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_dna_bases__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::dna_bases >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_dna_bases__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::dna_bases >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_dna_bases___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::dna_bases result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::dna_bases)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::dna_bases >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_4___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::dna_bases arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::dna_bases)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::dna_bases >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_surface_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::surface_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_surface_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::surface_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_surface_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::surface_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::surface_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::surface_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_5___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::surface_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::surface_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::surface_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_instrument_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::instrument_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_instrument_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::instrument_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_instrument_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::instrument_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::instrument_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::instrument_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_6___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::instrument_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::instrument_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::instrument_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_base_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_base_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_base_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_base_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_metric_base_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_base_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::metric_base_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_base_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_7___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_base_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_base_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_base_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_plot_colors__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::plot_colors >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_plot_colors__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::plot_colors >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_plot_colors___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::plot_colors result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::plot_colors)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::plot_colors >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_8___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::plot_colors arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::plot_colors)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::plot_colors >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_bar_plot_options__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::bar_plot_options >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_bar_plot_options__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::bar_plot_options >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_bar_plot_options___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::bar_plot_options result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::bar_plot_options)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::bar_plot_options >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_9___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::bar_plot_options arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::bar_plot_options)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::bar_plot_options >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_data__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_data >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_data__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_data >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_metric_data___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_data result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::metric_data)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_data >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_10___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_data arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_data)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_data >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_feature_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_feature_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_metric_feature_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_feature_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_metric_feature_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_feature_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_11___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::metric_feature_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::metric_feature_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_feature_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_sub_tile_offset_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_offset_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_sub_tile_offset_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_offset_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_sub_tile_offset_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::sub_tile_offset_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::sub_tile_offset_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::sub_tile_offset_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_12___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::sub_tile_offset_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::sub_tile_offset_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::sub_tile_offset_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_sub_tile_region_name__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_region_name >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_sub_tile_region_name__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_region_name >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_sub_tile_region_name___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::sub_tile_region_name result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::sub_tile_region_name)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::sub_tile_region_name >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_13___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::sub_tile_region_name arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::sub_tile_region_name)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::sub_tile_region_name >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_affine_transform_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::affine_transform_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_affine_transform_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::affine_transform_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_affine_transform_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::affine_transform_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::affine_transform_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::affine_transform_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_14___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::affine_transform_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::affine_transform_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::affine_transform_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_event_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::event_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_event_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::event_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_event_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::event_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::event_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::event_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_15___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::event_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::event_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_distortion_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_distortion_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_distortion_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::distortion_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::distortion_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::distortion_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_16___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::distortion_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::distortion_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::distortion_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_distortion_curve_type__SWIG_0___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_curve_type >(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfRun_list_distortion_curve_type__SWIG_1___(void * jarg1) {
  std::vector< std::string > *arg1 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_curve_type >(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IlluminafInterOpfRun_parse_distortion_curve_type___(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::distortion_curve_type result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (illumina::interop::constants::distortion_curve_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::distortion_curve_type >((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfRun_to_string__SWIG_17___(int jarg1) {
  char * jresult ;
  illumina::interop::constants::distortion_curve_type arg1 ;
  std::string result;
  
  arg1 = (illumina::interop::constants::distortion_curve_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::distortion_curve_type >(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT illumina::interop::model::run::cycle_range * SWIGSTDCALL CSharp_IlluminafInterOpfRun_read_info_SWIGUpcast___(illumina::interop::model::run::read_info *jarg1) {
    return (illumina::interop::model::run::cycle_range *)jarg1;
}

#ifdef __cplusplus
}
#endif

