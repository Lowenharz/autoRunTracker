/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_c_csharp_summary(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_c_csharp_summary(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_c_csharp_summary(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_base_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_base_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_base_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_base_exception_ImportCustomExceptionRegisterCallback_base_exception(const char *msg) {
    customExceptionCallback_base_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_file_not_found_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_file_not_found_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_file_not_found_exception_ImportCustomExceptionRegisterCallback_xml_file_not_found_exception(const char *msg) {
    customExceptionCallback_xml_file_not_found_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_format_exception_ImportCustomExceptionRegisterCallback_xml_format_exception(const char *msg) {
    customExceptionCallback_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_xml_parse_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_xml_parse_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_xml_parse_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_xml_parse_exception_ImportCustomExceptionRegisterCallback_xml_parse_exception(const char *msg) {
    customExceptionCallback_xml_parse_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_bad_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_bad_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_bad_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_bad_xml_format_exception_ImportCustomExceptionRegisterCallback_bad_xml_format_exception(const char *msg) {
    customExceptionCallback_bad_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_empty_xml_format_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_empty_xml_format_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_empty_xml_format_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_empty_xml_format_exception_ImportCustomExceptionRegisterCallback_empty_xml_format_exception(const char *msg) {
    customExceptionCallback_empty_xml_format_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_missing_xml_element_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_missing_xml_element_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_missing_xml_element_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_missing_xml_element_exception_ImportCustomExceptionRegisterCallback_missing_xml_element_exception(const char *msg) {
    customExceptionCallback_missing_xml_element_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_read_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_read_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_read_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception(const char *msg) {
    customExceptionCallback_invalid_read_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_naming_method = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_naming_method = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_naming_method_ImportCustomExceptionRegisterCallback_invalid_tile_naming_method(const char *msg) {
    customExceptionCallback_invalid_tile_naming_method(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_run_info_cycle_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_run_info_cycle_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_cycle_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_cycle_exception(const char *msg) {
    customExceptionCallback_invalid_run_info_cycle_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_tile_list_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_tile_list_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_tile_list_exception_ImportCustomExceptionRegisterCallback_invalid_tile_list_exception(const char *msg) {
    customExceptionCallback_invalid_tile_list_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_index_out_of_bounds_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_index_out_of_bounds_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception(const char *msg) {
    customExceptionCallback_index_out_of_bounds_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_channel_exception = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_channel_exception(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_channel_exception = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception(const char *msg) {
    customExceptionCallback_invalid_channel_exception(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_metric_type = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_metric_type(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_metric_type = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type(const char *msg) {
    customExceptionCallback_invalid_metric_type(msg);
  }


  // Code to handle throwing of C# CustomApplicationException from C/C++ code.
  // The equivalent delegate to the callback, CSharpExceptionCallback_t, is CustomExceptionDelegate
  // and the equivalent customExceptionCallback instance is customDelegate
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);
  static CSharpExceptionCallback_t customExceptionCallback_invalid_parameter = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL ImportCustomExceptionRegisterCallback_invalid_parameter(CSharpExceptionCallback_t customCallback) {
    customExceptionCallback_invalid_parameter = customCallback;
  }

  // Note that SWIG detects any method calls named starting with
  // SWIG_CSharpSetPendingException for warning 845
  static void SWIGUNUSED SWIG_CSharpSetPendingExceptionCustom_invalid_parameter_ImportCustomExceptionRegisterCallback_invalid_parameter(const char *msg) {
    customExceptionCallback_invalid_parameter(msg);
  }


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/model/summary/cycle_state_summary.h"
#include "interop/model/summary/stat_summary.h"
#include "interop/model/summary/surface_summary.h"
#include "interop/model/summary/metric_summary.h"
#include "interop/model/summary/lane_summary.h"
#include "interop/model/summary/metric_stat.h"
#include "interop/model/summary/read_summary.h"
#include "interop/model/summary/run_summary.h"
#include "interop/logic/metric/q_metric.h"

SWIGINTERN std::vector< illumina::interop::model::summary::surface_summary > *new_std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::summary::surface_summary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::summary::surface_summary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::summary::surface_summary std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__getitemcopy(std::vector< illumina::interop::model::summary::surface_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::summary::surface_summary const &std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__getitem(std::vector< illumina::interop::model::summary::surface_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__setitem(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,illumina::interop::model::summary::surface_summary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__AddRange(std::vector< illumina::interop::model::summary::surface_summary > *self,std::vector< illumina::interop::model::summary::surface_summary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::summary::surface_summary > *std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__GetRange(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::summary::surface_summary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Insert(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,illumina::interop::model::summary::surface_summary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__InsertRange(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,std::vector< illumina::interop::model::summary::surface_summary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__RemoveAt(std::vector< illumina::interop::model::summary::surface_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__RemoveRange(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::surface_summary > *std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Repeat(illumina::interop::model::summary::surface_summary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::summary::surface_summary >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::summary::surface_summary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__SetRange(std::vector< illumina::interop::model::summary::surface_summary > *self,int index,std::vector< illumina::interop::model::summary::surface_summary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::lane_summary > *new_std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::summary::lane_summary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::summary::lane_summary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::summary::lane_summary std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__getitemcopy(std::vector< illumina::interop::model::summary::lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::summary::lane_summary const &std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__getitem(std::vector< illumina::interop::model::summary::lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__setitem(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,illumina::interop::model::summary::lane_summary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__AddRange(std::vector< illumina::interop::model::summary::lane_summary > *self,std::vector< illumina::interop::model::summary::lane_summary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::summary::lane_summary > *std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__GetRange(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::summary::lane_summary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Insert(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,illumina::interop::model::summary::lane_summary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__InsertRange(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,std::vector< illumina::interop::model::summary::lane_summary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__RemoveAt(std::vector< illumina::interop::model::summary::lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__RemoveRange(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::lane_summary > *std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Repeat(illumina::interop::model::summary::lane_summary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::summary::lane_summary >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::summary::lane_summary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__SetRange(std::vector< illumina::interop::model::summary::lane_summary > *self,int index,std::vector< illumina::interop::model::summary::lane_summary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::read_summary > *new_std_vector_Sl_illumina_interop_model_summary_read_summary_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::summary::read_summary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::summary::read_summary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::summary::read_summary std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__getitemcopy(std::vector< illumina::interop::model::summary::read_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::summary::read_summary const &std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__getitem(std::vector< illumina::interop::model::summary::read_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__setitem(std::vector< illumina::interop::model::summary::read_summary > *self,int index,illumina::interop::model::summary::read_summary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__AddRange(std::vector< illumina::interop::model::summary::read_summary > *self,std::vector< illumina::interop::model::summary::read_summary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::summary::read_summary > *std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__GetRange(std::vector< illumina::interop::model::summary::read_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::summary::read_summary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Insert(std::vector< illumina::interop::model::summary::read_summary > *self,int index,illumina::interop::model::summary::read_summary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__InsertRange(std::vector< illumina::interop::model::summary::read_summary > *self,int index,std::vector< illumina::interop::model::summary::read_summary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__RemoveAt(std::vector< illumina::interop::model::summary::read_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__RemoveRange(std::vector< illumina::interop::model::summary::read_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::read_summary > *std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Repeat(illumina::interop::model::summary::read_summary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::summary::read_summary >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::summary::read_summary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::summary::read_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__SetRange(std::vector< illumina::interop::model::summary::read_summary > *self,int index,std::vector< illumina::interop::model::summary::read_summary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "interop/logic/summary/run_summary.h"


#include "interop/model/summary/index_count_summary.h"
#include "interop/model/summary/index_lane_summary.h"
#include "interop/model/summary/index_flowcell_summary.h"

SWIGINTERN std::vector< illumina::interop::model::summary::index_count_summary > *new_std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::summary::index_count_summary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::summary::index_count_summary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::summary::index_count_summary std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__getitemcopy(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::summary::index_count_summary const &std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__getitem(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__setitem(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,illumina::interop::model::summary::index_count_summary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__AddRange(std::vector< illumina::interop::model::summary::index_count_summary > *self,std::vector< illumina::interop::model::summary::index_count_summary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::summary::index_count_summary > *std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__GetRange(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::summary::index_count_summary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Insert(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,illumina::interop::model::summary::index_count_summary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__InsertRange(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,std::vector< illumina::interop::model::summary::index_count_summary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__RemoveAt(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__RemoveRange(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::index_count_summary > *std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Repeat(illumina::interop::model::summary::index_count_summary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::summary::index_count_summary >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::summary::index_count_summary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__SetRange(std::vector< illumina::interop::model::summary::index_count_summary > *self,int index,std::vector< illumina::interop::model::summary::index_count_summary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::index_lane_summary > *new_std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg___SWIG_2(int capacity){
        std::vector< illumina::interop::model::summary::index_lane_summary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< illumina::interop::model::summary::index_lane_summary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN illumina::interop::model::summary::index_lane_summary std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__getitemcopy(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN illumina::interop::model::summary::index_lane_summary const &std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__getitem(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__setitem(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,illumina::interop::model::summary::index_lane_summary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__AddRange(std::vector< illumina::interop::model::summary::index_lane_summary > *self,std::vector< illumina::interop::model::summary::index_lane_summary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< illumina::interop::model::summary::index_lane_summary > *std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__GetRange(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< illumina::interop::model::summary::index_lane_summary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Insert(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,illumina::interop::model::summary::index_lane_summary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__InsertRange(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,std::vector< illumina::interop::model::summary::index_lane_summary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__RemoveAt(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__RemoveRange(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< illumina::interop::model::summary::index_lane_summary > *std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Repeat(illumina::interop::model::summary::index_lane_summary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< illumina::interop::model::summary::index_lane_summary >(count, value);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Reverse__SWIG_0(std::vector< illumina::interop::model::summary::index_lane_summary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Reverse__SWIG_1(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__SetRange(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int index,std::vector< illumina::interop::model::summary::index_lane_summary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "interop/logic/summary/index_summary.h"


#include "interop/model/table/compass_cycle_table.h"
#include "interop/logic/summary/compass_summary.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_cycle_state_summary___() {
  void * jresult ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::cycle_state_summary *)new illumina::interop::model::summary::cycle_state_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_extracted_cycle_range__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->extracted_cycle_range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_called_cycle_range__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->called_cycle_range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_qscored_cycle_range__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->qscored_cycle_range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_error_cycle_range__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->error_cycle_range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_empty___(void * jarg1) {
  unsigned int jresult ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  result = (bool)((illumina::interop::model::summary::cycle_state_summary const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_extracted_cycle_range__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return ;
  } 
  (arg1)->extracted_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_called_cycle_range__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return ;
  } 
  (arg1)->called_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_qscored_cycle_range__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return ;
  } 
  (arg1)->qscored_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_cycle_state_summary_error_cycle_range__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::cycle_range const & type is null", 0);
    return ;
  } 
  (arg1)->error_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_cycle_state_summary___(void * jarg1) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::cycle_state_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_stat_summary___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::stat_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::stat_summary *)new illumina::interop::model::summary::stat_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_gt_q30__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_gt_q30();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_yield_g__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->yield_g();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_projected_yield_g__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->projected_yield_g();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_reads__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->reads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_reads_pf__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->reads_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_density__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->density();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_density_pf__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->density_pf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_cluster_count__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->cluster_count();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_cluster_count_pf__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->cluster_count_pf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_pf__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_pf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_aligned__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_aligned();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_35__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_35();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_50__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_50();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_75__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_75();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_100__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_100();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_first_cycle_intensity__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->first_cycle_intensity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing_slope__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing_slope();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing_offset__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing_offset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing_slope__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing_slope();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing_offset__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing_offset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_gt_q30__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_yield_g__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->yield_g(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_projected_yield_g__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->projected_yield_g(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_reads__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->reads(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_reads_pf__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->reads_pf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_density__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->density((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_density_pf__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->density_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_cluster_count__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->cluster_count((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_cluster_count_pf__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->cluster_count_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_pf__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->percent_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->phasing((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->prephasing((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_aligned__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->percent_aligned((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->error_rate((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_35__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->error_rate_35((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_50__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->error_rate_50((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_75__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->error_rate_75((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_error_rate_100__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->error_rate_100((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_first_cycle_intensity__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->first_cycle_intensity((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_gt_q30_last_10_cycles__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_gt_q30_last_10_cycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_occupied__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_occupied();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_theta_z__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->theta_z();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_theta__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->theta();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing_slope__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->phasing_slope((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_phasing_offset__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->phasing_offset((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing_slope__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->prephasing_slope((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_prephasing_offset__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->prephasing_offset((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_fwhm__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (std::vector< float > *) &((illumina::interop::model::summary::stat_summary const *)arg1)->fwhm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_base__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  result = (std::vector< float > *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_base();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_gt_q30_last_10_cycles__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30_last_10_cycles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_fwhm__SWIG_1___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->fwhm(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_base__SWIG_1___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->percent_base(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_percent_occupied__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_occupied(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_theta_z__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->theta_z((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_theta__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::stat_summary::metric_stat_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & type is null", 0);
    return ;
  } 
  (arg1)->theta((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_stat_summary_resize_stat___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize_stat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_stat_summary___(void * jarg1) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::stat_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary__SWIG_0___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary__SWIG_1___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_surface__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1; 
  result = ((illumina::interop::model::summary::surface_summary const *)arg1)->surface();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_tile_count__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1; 
  result = ((illumina::interop::model::summary::surface_summary const *)arg1)->tile_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_surface__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->surface(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_tile_count__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_surface_summary___(void * jarg1) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_metric_summary___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::metric_summary *)new illumina::interop::model::summary::metric_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_error_rate__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->error_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_aligned__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_aligned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_first_cycle_intensity__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->first_cycle_intensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_gt_q30__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_gt_q30();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_yield_g__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->yield_g();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_projected_yield_g__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->projected_yield_g();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_gt_q30_last_10_cycles__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_gt_q30_last_10_cycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_occupied__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_occupied();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_theta_z__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->theta_z();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_theta__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->theta();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_first_cycle_intensity__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->first_cycle_intensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_error_rate__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->error_rate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_aligned__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_aligned(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_gt_q30__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_yield_g__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->yield_g(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_projected_yield_g__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->projected_yield_g(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_gt_q30_last_10_cycles__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30_last_10_cycles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_occupied__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_occupied(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_theta_z__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->theta_z(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_theta__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->theta(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_pf___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_cluster_density__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->cluster_density();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_cluster_density_pf__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->cluster_density_pf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_base__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->percent_base();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_phasing__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->phasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_prephasing__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->prephasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_no_call__SWIG_0___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_no_call();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_fwhm__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->fwhm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_resynthesis__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->resynthesis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_fwhm__SWIG_1___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->fwhm(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_resynthesis__SWIG_1___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->resynthesis(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_base__SWIG_1___(void * jarg1, unsigned long jarg2, float jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->percent_base(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_phasing__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->phasing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_prephasing__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->prephasing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_percent_no_call__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_no_call(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_cluster_density__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->cluster_density(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_cluster_density_pf__SWIG_1___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->cluster_density_pf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_summary_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_metric_summary___(void * jarg1) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary__SWIG_0___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary__SWIG_1___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::surface_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  illumina::interop::model::summary::lane_summary::size_type arg2 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::lane_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_lane__SWIG_0___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->lane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_tile_count__SWIG_0___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_cycle_state___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  result = (illumina::interop::model::summary::cycle_state_summary *) &(arg1)->cycle_state();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_lane__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->lane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_tile_count__SWIG_1___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->tile_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_lane_summary___(void * jarg1) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_metric_stat__SWIG_0___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_metric_stat__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_metric_stat__SWIG_2___(float jarg1) {
  void * jresult ;
  float arg1 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_metric_stat__SWIG_3___() {
  void * jresult ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_clear__SWIG_0___(void * jarg1, unsigned int jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  bool arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_clear__SWIG_1___(void * jarg1) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_mean__SWIG_0___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->mean(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_stddev__SWIG_0___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->stddev(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_median__SWIG_0___(void * jarg1, float jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->median(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_mean__SWIG_1___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->mean();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_stddev__SWIG_1___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->stddev();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_metric_stat_median__SWIG_1___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->median();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_metric_stat___(void * jarg1) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  
  arg1 = (illumina::interop::model::summary::metric_stat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary__SWIG_0___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::run::read_info *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary((illumina::interop::model::run::read_info const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary__SWIG_1___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::run::read_info *arg1 = 0 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::run::read_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::read_info const & type is null", 0);
    return 0;
  } 
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary((illumina::interop::model::run::read_info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary__SWIG_2___() {
  void * jresult ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::read_summary::size_type arg2 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::read_summary::size_type)jarg2; 
  try {
    result = (illumina::interop::model::summary::lane_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::read_summary::size_type arg2 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::read_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_read___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  result = (illumina::interop::model::run::read_info *) &(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_summary__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_summary__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::metric_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::metric_summary const & type is null", 0);
    return ;
  } 
  (arg1)->summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  result = ((illumina::interop::model::summary::read_summary const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_lane_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  result = ((illumina::interop::model::summary::read_summary const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_read_summary___(void * jarg1) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_run_summary__SWIG_0___() {
  void * jresult ;
  illumina::interop::model::summary::run_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::run_summary *)new illumina::interop::model::summary::run_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_run_summary__SWIG_2___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  illumina::interop::model::summary::run_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::run::read_info > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (illumina::interop::model::summary::run_summary *)new illumina::interop::model::summary::run_summary((std::vector< illumina::interop::model::run::read_info > const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_initialize__SWIG_0___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::run::info *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (illumina::interop::model::run::info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::run::info const & type is null", 0);
    return ;
  } 
  (arg1)->initialize((illumina::interop::model::run::info const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_initialize__SWIG_1___(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::run::read_info > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->initialize((std::vector< illumina::interop::model::run::read_info > const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_copy_reads___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::run::read_info > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::run::read_info > & type is null", 0);
    return ;
  } 
  (arg1)->copy_reads(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::read_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_lane_count__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->lane_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_lane_count__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->lane_count(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_surface_count__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->surface_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_channel_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->channel_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_surface_count__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->surface_count(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_total_summary__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->total_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_total_summary__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::metric_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::metric_summary const & type is null", 0);
    return ;
  } 
  (arg1)->total_summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_nonindex_summary__SWIG_0___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->nonindex_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_nonindex_summary__SWIG_1___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::metric_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::metric_summary const & type is null", 0);
    return ;
  } 
  (arg1)->nonindex_summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_cycle_state___(void * jarg1) {
  void * jresult ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  result = (illumina::interop::model::summary::cycle_state_summary *) &(arg1)->cycle_state();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_run_summary_clear___(void * jarg1) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_run_summary___(void * jarg1) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::run_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  illumina::interop::model::summary::surface_summary *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (illumina::interop::model::summary::surface_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::surface_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::surface_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::surface_summary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::surface_summary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::surface_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::summary::surface_summary > *)new std::vector< illumina::interop::model::summary::surface_summary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::surface_summary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::summary::surface_summary > *)new std::vector< illumina::interop::model::summary::surface_summary >((std::vector< illumina::interop::model::summary::surface_summary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_surface_summary_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::summary::surface_summary > *)new_std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::surface_summary result;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::summary::surface_summary((const illumina::interop::model::summary::surface_summary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::summary::surface_summary *) &std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::surface_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::surface_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::surface_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__setitem(arg1,arg2,(illumina::interop::model::summary::surface_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::surface_summary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__AddRange(arg1,(std::vector< illumina::interop::model::summary::surface_summary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::summary::surface_summary > *)std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::surface_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::surface_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::surface_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Insert(arg1,arg2,(illumina::interop::model::summary::surface_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::surface_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::summary::surface_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::summary::surface_summary *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::surface_summary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::surface_summary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::surface_summary > *)std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Repeat((illumina::interop::model::summary::surface_summary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::surface_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::summary::surface_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_surface_summary_vector___(void * jarg1) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  illumina::interop::model::summary::lane_summary *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (illumina::interop::model::summary::lane_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::lane_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::lane_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::lane_summary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::lane_summary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::lane_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::summary::lane_summary > *)new std::vector< illumina::interop::model::summary::lane_summary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::lane_summary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::summary::lane_summary > *)new std::vector< illumina::interop::model::summary::lane_summary >((std::vector< illumina::interop::model::summary::lane_summary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_lane_summary_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::summary::lane_summary > *)new_std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::lane_summary result;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::summary::lane_summary((const illumina::interop::model::summary::lane_summary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::summary::lane_summary *) &std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::lane_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::lane_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::lane_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__setitem(arg1,arg2,(illumina::interop::model::summary::lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::lane_summary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__AddRange(arg1,(std::vector< illumina::interop::model::summary::lane_summary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::summary::lane_summary > *)std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::lane_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::lane_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::lane_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Insert(arg1,arg2,(illumina::interop::model::summary::lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::lane_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::summary::lane_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::summary::lane_summary *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::lane_summary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::lane_summary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::lane_summary > *)std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Repeat((illumina::interop::model::summary::lane_summary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::lane_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::summary::lane_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_lane_summary_vector___(void * jarg1) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  illumina::interop::model::summary::read_summary *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (illumina::interop::model::summary::read_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::read_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::read_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::read_summary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::read_summary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::read_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::summary::read_summary > *)new std::vector< illumina::interop::model::summary::read_summary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::read_summary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::summary::read_summary > *)new std::vector< illumina::interop::model::summary::read_summary >((std::vector< illumina::interop::model::summary::read_summary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_read_summary_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::summary::read_summary > *)new_std_vector_Sl_illumina_interop_model_summary_read_summary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::read_summary result;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::summary::read_summary((const illumina::interop::model::summary::read_summary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::summary::read_summary *) &std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::read_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::read_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::read_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__setitem(arg1,arg2,(illumina::interop::model::summary::read_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::read_summary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__AddRange(arg1,(std::vector< illumina::interop::model::summary::read_summary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::summary::read_summary > *)std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::read_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::read_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::read_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Insert(arg1,arg2,(illumina::interop::model::summary::read_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::read_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::summary::read_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::summary::read_summary *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::read_summary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::read_summary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::read_summary > *)std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Repeat((illumina::interop::model::summary::read_summary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_read_summary_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::read_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::summary::read_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_read_summary_vector___(void * jarg1) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::read_summary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_run_metrics__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_run_metrics__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_run_metrics__SWIG_2___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_run_info_exception_ImportCustomExceptionRegisterCallback_invalid_run_info_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_0___(unsigned long jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned long jarg6, float jarg7) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ::uint64_t arg6 ;
  float arg7 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (::uint64_t)jarg6; 
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_1___(unsigned long jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned long jarg6) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ::uint64_t arg6 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (::uint64_t)jarg6; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_2___(unsigned long jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_3___(unsigned long jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_4___(unsigned long jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_5___(unsigned long jarg1, char * jarg2) {
  void * jresult ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_6___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary__SWIG_7___() {
  void * jresult ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_id__SWIG_0___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = ((illumina::interop::model::summary::index_count_summary const *)arg1)->id();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_id__SWIG_1___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  size_t arg2 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_index1___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->index1();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_index2___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->index2();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_fraction_mapped___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::index_count_summary const *)arg1)->fraction_mapped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_cluster_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  ::uint64_t result;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (::uint64_t)((illumina::interop::model::summary::index_count_summary const *)arg1)->cluster_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_sample_id___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->sample_id();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_project_name___(void * jarg1) {
  char * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->project_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_add___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  ::uint64_t arg2 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  arg2 = (::uint64_t)jarg2; 
  result = (illumina::interop::model::summary::index_count_summary *) &(arg1)->operator +=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_update_fraction_mapped___(void * jarg1, double jarg2) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  double arg2 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update_fraction_mapped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_is_less___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  illumina::interop::model::summary::index_count_summary *arg2 = 0 ;
  bool result;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_count_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return 0;
  } 
  result = (bool)((illumina::interop::model::summary::index_count_summary const *)arg1)->operator <((illumina::interop::model::summary::index_count_summary const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_index_count_summary___(void * jarg1) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_0___(unsigned long jarg1, unsigned long jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_1___(unsigned long jarg1, unsigned long jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_2___(unsigned long jarg1, unsigned long jarg2, float jarg3, float jarg4) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_3___(unsigned long jarg1, unsigned long jarg2, float jarg3) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_4___(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg2; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_5___(unsigned long jarg1) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg1; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary__SWIG_6___() {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_reserve___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_push_back___(void * jarg1, void * jarg2) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_count_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_count_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::index_count_summary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_count_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = ((illumina::interop::model::summary::index_lane_summary const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_total_reads___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (illumina::interop::model::summary::index_lane_summary::read_count_t)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_reads();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_total_pf_reads___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (illumina::interop::model::summary::index_lane_summary::read_count_t)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_pf_reads();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_total_fraction_mapped_reads___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_fraction_mapped_reads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_mapped_reads_cv___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->mapped_reads_cv();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_min_mapped_reads___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->min_mapped_reads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_max_mapped_reads___(void * jarg1) {
  float jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->max_mapped_reads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_sort___(void * jarg1) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_set___(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, float jarg5, float jarg6, float jarg7) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  ::uint64_t arg2 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg3 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  arg2 = (::uint64_t)jarg2; 
  arg3 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg3; 
  arg4 = (illumina::interop::model::summary::index_lane_summary::read_count_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_clear___(void * jarg1) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_index_lane_summary___(void * jarg1) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_flowcell_summary__SWIG_0___(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  illumina::interop::model::summary::index_flowcell_summary *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::index_flowcell_summary *)new illumina::interop::model::summary::index_flowcell_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_flowcell_summary__SWIG_1___() {
  void * jresult ;
  illumina::interop::model::summary::index_flowcell_summary *result = 0 ;
  
  result = (illumina::interop::model::summary::index_flowcell_summary *)new illumina::interop::model::summary::index_flowcell_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_flowcell_summary_resize___(void * jarg1, unsigned long jarg2) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  illumina::interop::model::summary::index_flowcell_summary::size_type arg2 ;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_flowcell_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_flowcell_summary_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_lane_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_flowcell_summary_size___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  result = ((illumina::interop::model::summary::index_flowcell_summary const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_flowcell_summary_sort___(void * jarg1) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_flowcell_summary_clear___(void * jarg1) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_index_flowcell_summary___(void * jarg1) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  arg1 = (illumina::interop::model::summary::index_flowcell_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  illumina::interop::model::summary::index_count_summary *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_count_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::index_count_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_count_summary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_count_summary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_count_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::summary::index_count_summary > *)new std::vector< illumina::interop::model::summary::index_count_summary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_count_summary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::summary::index_count_summary > *)new std::vector< illumina::interop::model::summary::index_count_summary >((std::vector< illumina::interop::model::summary::index_count_summary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_count_summary_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_count_summary > *)new_std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_count_summary result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::summary::index_count_summary((const illumina::interop::model::summary::index_count_summary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_count_summary *) &std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_count_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::index_count_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__setitem(arg1,arg2,(illumina::interop::model::summary::index_count_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_count_summary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__AddRange(arg1,(std::vector< illumina::interop::model::summary::index_count_summary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_count_summary > *)std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_count_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::index_count_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Insert(arg1,arg2,(illumina::interop::model::summary::index_count_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_count_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::summary::index_count_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_count_summary *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_count_summary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_count_summary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_count_summary > *)std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Repeat((illumina::interop::model::summary::index_count_summary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_count_summary_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_count_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::summary::index_count_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_index_count_summary_vector___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Clear___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Add___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  illumina::interop::model::summary::index_lane_summary *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_lane_summary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::index_lane_summary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_lane_summary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_lane_summary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_lane_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary_vector__SWIG_0___() {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)new std::vector< illumina::interop::model::summary::index_lane_summary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary_vector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_lane_summary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)new std::vector< illumina::interop::model::summary::index_lane_summary >((std::vector< illumina::interop::model::summary::index_lane_summary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_index_lane_summary_vector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)new_std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_lane_summary result;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new illumina::interop::model::summary::index_lane_summary((const illumina::interop::model::summary::index_lane_summary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_lane_summary *) &std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_lane_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::index_lane_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_lane_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__setitem(arg1,arg2,(illumina::interop::model::summary::index_lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg2 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_lane_summary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__AddRange(arg1,(std::vector< illumina::interop::model::summary::index_lane_summary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  illumina::interop::model::summary::index_lane_summary *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (illumina::interop::model::summary::index_lane_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_lane_summary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Insert(arg1,arg2,(illumina::interop::model::summary::index_lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_lane_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__InsertRange(arg1,arg2,(std::vector< illumina::interop::model::summary::index_lane_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  illumina::interop::model::summary::index_lane_summary *arg1 = 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  arg1 = (illumina::interop::model::summary::index_lane_summary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_lane_summary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Repeat((illumina::interop::model::summary::index_lane_summary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_index_lane_summary_vector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg3 = 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< illumina::interop::model::summary::index_lane_summary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__SetRange(arg1,arg2,(std::vector< illumina::interop::model::summary::index_lane_summary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_index_lane_summary_vector___(void * jarg1) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_index_metrics__SWIG_0___(void * jarg1, unsigned long jarg2, void * jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *arg3 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::summary::index_lane_summary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_lane_summary & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_index_metrics__SWIG_1___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  size_t arg3 ;
  illumina::interop::model::summary::index_flowcell_summary *arg4 = 0 ;
  
  arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & type is null", 0);
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (illumina::interop::model::summary::index_flowcell_summary *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_flowcell_summary & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_index_metrics__SWIG_2___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::index_flowcell_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::index_flowcell_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::index_flowcell_summary & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_new_compass_cycle_table___() {
  void * jresult ;
  illumina::interop::model::table::compass_cycle_table *result = 0 ;
  
  result = (illumina::interop::model::table::compass_cycle_table *)new illumina::interop::model::table::compass_cycle_table();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_compass_cycle_table_resize___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IlluminafInterOpfSummary_compass_cycle_table_at___(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::table::compass_cycle_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_compass_cycle_table_column_at__SWIG_0___(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  std::string *result = 0 ;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (std::string *) &((illumina::interop::model::table::compass_cycle_table const *)arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return 0;
    }
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_compass_cycle_table_column_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  result = ((illumina::interop::model::table::compass_cycle_table const *)arg1)->column_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IlluminafInterOpfSummary_compass_cycle_table_row_count___(void * jarg1) {
  unsigned long jresult ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t result;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  result = ((illumina::interop::model::table::compass_cycle_table const *)arg1)->row_count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_delete_compass_cycle_table___(void * jarg1) {
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  
  arg1 = (illumina::interop::model::table::compass_cycle_table *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_compass_run_metrics__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_compass_run_metrics__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_compass_run_metrics__SWIG_2___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::summary::run_summary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::summary::run_summary & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IlluminafInterOpfSummary_summarize_compass_cycle_metrics___(void * jarg1, void * jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg2 = 0 ;
  
  arg1 = (illumina::interop::model::metrics::run_metrics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::metrics::run_metrics & type is null", 0);
    return ;
  } 
  arg2 = (illumina::interop::model::table::compass_cycle_table *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "illumina::interop::model::table::compass_cycle_table & type is null", 0);
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_compass_cycle_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_index_out_of_bounds_exception_ImportCustomExceptionRegisterCallback_index_out_of_bounds_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_metric_type_ImportCustomExceptionRegisterCallback_invalid_metric_type((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_channel_exception_ImportCustomExceptionRegisterCallback_invalid_channel_exception((&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ illumina::interop::model::invalid_filter_option exception thrown");
    return ; 
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      SWIG_CSharpSetPendingExceptionCustom_invalid_read_exception_ImportCustomExceptionRegisterCallback_invalid_read_exception((&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT illumina::interop::model::summary::stat_summary * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_surface_summary_SWIGUpcast___(illumina::interop::model::summary::surface_summary *jarg1) {
    return (illumina::interop::model::summary::stat_summary *)jarg1;
}

SWIGEXPORT illumina::interop::model::summary::stat_summary * SWIGSTDCALL CSharp_IlluminafInterOpfSummary_lane_summary_SWIGUpcast___(illumina::interop::model::summary::lane_summary *jarg1) {
    return (illumina::interop::model::summary::stat_summary *)jarg1;
}

#ifdef __cplusplus
}
#endif

