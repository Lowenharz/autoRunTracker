//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Run {

public class info : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal info(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(info obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~info() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_runPINVOKE.delete_info(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public info(string name, string date, string instrument_name, uint run_number, uint version, flowcell_layout flowcell, string_vector channels, image_dimensions image_dim, read_info_vector reads) : this(c_csharp_runPINVOKE.new_info__SWIG_0(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), string_vector.getCPtr(channels), image_dimensions.getCPtr(image_dim), read_info_vector.getCPtr(reads)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name, uint run_number, uint version, flowcell_layout flowcell, string_vector channels, image_dimensions image_dim) : this(c_csharp_runPINVOKE.new_info__SWIG_1(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), string_vector.getCPtr(channels), image_dimensions.getCPtr(image_dim)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name, uint run_number, uint version, flowcell_layout flowcell, string_vector channels) : this(c_csharp_runPINVOKE.new_info__SWIG_2(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), string_vector.getCPtr(channels)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name, uint run_number, uint version, flowcell_layout flowcell) : this(c_csharp_runPINVOKE.new_info__SWIG_3(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name, uint run_number, uint version) : this(c_csharp_runPINVOKE.new_info__SWIG_4(name, date, instrument_name, run_number, version), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name, uint run_number) : this(c_csharp_runPINVOKE.new_info__SWIG_5(name, date, instrument_name, run_number), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date, string instrument_name) : this(c_csharp_runPINVOKE.new_info__SWIG_6(name, date, instrument_name), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name, string date) : this(c_csharp_runPINVOKE.new_info__SWIG_7(name, date), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(string name) : this(c_csharp_runPINVOKE.new_info__SWIG_8(name), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info() : this(c_csharp_runPINVOKE.new_info__SWIG_9(), true) {
  }

  public info(flowcell_layout flowcell, read_info_vector reads, string_vector channels) : this(c_csharp_runPINVOKE.new_info__SWIG_10(flowcell_layout.getCPtr(flowcell), read_info_vector.getCPtr(reads), string_vector.getCPtr(channels)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(flowcell_layout flowcell, read_info_vector reads) : this(c_csharp_runPINVOKE.new_info__SWIG_11(flowcell_layout.getCPtr(flowcell), read_info_vector.getCPtr(reads)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public info(flowcell_layout flowcell) : this(c_csharp_runPINVOKE.new_info__SWIG_12(flowcell_layout.getCPtr(flowcell)), true) {
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void read(string run_folder) {
    c_csharp_runPINVOKE.info_read__SWIG_0(swigCPtr, run_folder);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void validate() {
    c_csharp_runPINVOKE.info_validate__SWIG_0(swigCPtr);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void validate_tiles() {
    c_csharp_runPINVOKE.info_validate_tiles(swigCPtr);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void validate(uint lane, uint tile) {
    c_csharp_runPINVOKE.info_validate__SWIG_1(swigCPtr, lane, tile);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void validate_cycle(uint lane, uint tile, uint cycle) {
    c_csharp_runPINVOKE.info_validate_cycle(swigCPtr, lane, tile, cycle);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void validate_read(uint lane, uint tile, uint read) {
    c_csharp_runPINVOKE.info_validate_read(swigCPtr, lane, tile, read);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public string instrument_name() {
    string ret = c_csharp_runPINVOKE.info_instrument_name(swigCPtr);
    return ret;
  }

  public string flowcell_id() {
    string ret = c_csharp_runPINVOKE.info_flowcell_id(swigCPtr);
    return ret;
  }

  public uint run_number() {
    uint ret = c_csharp_runPINVOKE.info_run_number(swigCPtr);
    return ret;
  }

  public string name() {
    string ret = c_csharp_runPINVOKE.info_name(swigCPtr);
    return ret;
  }

  public string date() {
    string ret = c_csharp_runPINVOKE.info_date(swigCPtr);
    return ret;
  }

  public uint version() {
    uint ret = c_csharp_runPINVOKE.info_version(swigCPtr);
    return ret;
  }

  public flowcell_layout flowcell() {
    flowcell_layout ret = new flowcell_layout(c_csharp_runPINVOKE.info_flowcell__SWIG_0(swigCPtr), false);
    return ret;
  }

  public string_vector channels() {
    string_vector ret = new string_vector(c_csharp_runPINVOKE.info_channels__SWIG_0(swigCPtr), false);
    return ret;
  }

  public image_dimensions dimensions_of_image() {
    image_dimensions ret = new image_dimensions(c_csharp_runPINVOKE.info_dimensions_of_image(swigCPtr), false);
    return ret;
  }

  public read_info_vector reads() {
    read_info_vector ret = new read_info_vector(c_csharp_runPINVOKE.info_reads__SWIG_0(swigCPtr), false);
    return ret;
  }

  public bool is_indexed() {
    bool ret = c_csharp_runPINVOKE.info_is_indexed(swigCPtr);
    return ret;
  }

  public bool is_paired_end() {
    bool ret = c_csharp_runPINVOKE.info_is_paired_end(swigCPtr);
    return ret;
  }

  public bool is_last_cycle_of_read(uint cycle) {
    bool ret = c_csharp_runPINVOKE.info_is_last_cycle_of_read(swigCPtr, cycle);
    return ret;
  }

  public uint cycle_within_read(uint cycle) {
    uint ret = c_csharp_runPINVOKE.info_cycle_within_read(swigCPtr, cycle);
    return ret;
  }

  public read_info read(uint read_number) {
    read_info ret = new read_info(c_csharp_runPINVOKE.info_read__SWIG_1(swigCPtr, read_number), false);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void channels(string_vector channels) {
    c_csharp_runPINVOKE.info_channels__SWIG_1(swigCPtr, string_vector.getCPtr(channels));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reads(read_info_vector read_vec) {
    c_csharp_runPINVOKE.info_reads__SWIG_1(swigCPtr, read_info_vector.getCPtr(read_vec));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_naming_method(tile_naming_method naming_method) {
    c_csharp_runPINVOKE.info_set_naming_method(swigCPtr, (int)naming_method);
  }

  public void flowcell(flowcell_layout flowcell) {
    c_csharp_runPINVOKE.info_flowcell__SWIG_1(swigCPtr, flowcell_layout.getCPtr(flowcell));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint total_cycles() {
    uint ret = c_csharp_runPINVOKE.info_total_cycles(swigCPtr);
    return ret;
  }

  public uint useable_cycles() {
    uint ret = c_csharp_runPINVOKE.info_useable_cycles(swigCPtr);
    return ret;
  }

  public void read_file(string filename) {
    c_csharp_runPINVOKE.info_read_file(swigCPtr, filename);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void parse(string data) {
    c_csharp_runPINVOKE.info_parse(swigCPtr, data);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void write(string filename) {
    c_csharp_runPINVOKE.info_write__SWIG_0(swigCPtr, filename);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void write(SWIGTYPE_p_std__ostream arg0) {
    c_csharp_runPINVOKE.info_write__SWIG_1(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0));
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
