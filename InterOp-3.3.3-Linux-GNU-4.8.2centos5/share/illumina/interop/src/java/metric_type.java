/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public final class metric_type {
  public final static metric_type Intensity = new metric_type("Intensity");
  public final static metric_type FWHM = new metric_type("FWHM");
  public final static metric_type BasePercent = new metric_type("BasePercent");
  public final static metric_type PercentNoCall = new metric_type("PercentNoCall");
  public final static metric_type Q20Percent = new metric_type("Q20Percent");
  public final static metric_type Q30Percent = new metric_type("Q30Percent");
  public final static metric_type AccumPercentQ20 = new metric_type("AccumPercentQ20");
  public final static metric_type AccumPercentQ30 = new metric_type("AccumPercentQ30");
  public final static metric_type QScore = new metric_type("QScore");
  public final static metric_type Clusters = new metric_type("Clusters");
  public final static metric_type ClustersPF = new metric_type("ClustersPF");
  public final static metric_type ClusterCount = new metric_type("ClusterCount");
  public final static metric_type ClusterCountPF = new metric_type("ClusterCountPF");
  public final static metric_type ErrorRate = new metric_type("ErrorRate");
  public final static metric_type PercentPhasing = new metric_type("PercentPhasing");
  public final static metric_type PercentPrephasing = new metric_type("PercentPrephasing");
  public final static metric_type PercentAligned = new metric_type("PercentAligned");
  public final static metric_type Phasing = new metric_type("Phasing");
  public final static metric_type PrePhasing = new metric_type("PrePhasing");
  public final static metric_type CorrectedIntensity = new metric_type("CorrectedIntensity");
  public final static metric_type CalledIntensity = new metric_type("CalledIntensity");
  public final static metric_type SignalToNoise = new metric_type("SignalToNoise");
  public final static metric_type PercentPF = new metric_type("PercentPF");
  public final static metric_type MinContrast = new metric_type("MinContrast");
  public final static metric_type MaxContrast = new metric_type("MaxContrast");
  public final static metric_type SubtilePFPercent = new metric_type("SubtilePFPercent");
  public final static metric_type SubtileClustersPF = new metric_type("SubtileClustersPF");
  public final static metric_type SubtileDensityPF = new metric_type("SubtileDensityPF");
  public final static metric_type SubtileFwhm = new metric_type("SubtileFwhm");
  public final static metric_type SubtileQ30Percent = new metric_type("SubtileQ30Percent");
  public final static metric_type SubtileDensity = new metric_type("SubtileDensity");
  public final static metric_type SubtileClusters = new metric_type("SubtileClusters");
  public final static metric_type DistortionByTile = new metric_type("DistortionByTile");
  public final static metric_type EventByCycle = new metric_type("EventByCycle");
  public final static metric_type EventByType = new metric_type("EventByType");
  public final static metric_type MaxResidualR = new metric_type("MaxResidualR");
  public final static metric_type Theta = new metric_type("Theta");
  public final static metric_type ThetaZ = new metric_type("ThetaZ");
  public final static metric_type OccupiedCountK = new metric_type("OccupiedCountK");
  public final static metric_type PercentOccupied = new metric_type("PercentOccupied");
  public final static metric_type MetricTypeCount = new metric_type("MetricTypeCount");
  public final static metric_type UnknownMetricType = new metric_type("UnknownMetricType", interop_runJNI.UnknownMetricType_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static metric_type swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + metric_type.class + " with value " + swigValue);
  }

  private metric_type(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private metric_type(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private metric_type(String swigName, metric_type swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static metric_type[] swigValues = { Intensity, FWHM, BasePercent, PercentNoCall, Q20Percent, Q30Percent, AccumPercentQ20, AccumPercentQ30, QScore, Clusters, ClustersPF, ClusterCount, ClusterCountPF, ErrorRate, PercentPhasing, PercentPrephasing, PercentAligned, Phasing, PrePhasing, CorrectedIntensity, CalledIntensity, SignalToNoise, PercentPF, MinContrast, MaxContrast, SubtilePFPercent, SubtileClustersPF, SubtileDensityPF, SubtileFwhm, SubtileQ30Percent, SubtileDensity, SubtileClusters, DistortionByTile, EventByCycle, EventByType, MaxResidualR, Theta, ThetaZ, OccupiedCountK, PercentOccupied, MetricTypeCount, UnknownMetricType };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

