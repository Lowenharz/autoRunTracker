/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/io/metric_file_stream.h"
#include "interop/io/paths.h"
#include "interop/model/run/run_exceptions.h"
#include "interop/util/xml_exceptions.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1format_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::io::format_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::io::format_exception *)new illumina::interop::io::format_exception((std::string const &)*arg1);
  *(illumina::interop::io::format_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1format_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::format_exception *arg1 = (illumina::interop::io::format_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::format_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1file_1not_1found_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::io::file_not_found_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::io::file_not_found_exception *)new illumina::interop::io::file_not_found_exception((std::string const &)*arg1);
  *(illumina::interop::io::file_not_found_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1file_1not_1found_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::file_not_found_exception *arg1 = (illumina::interop::io::file_not_found_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::file_not_found_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1bad_1format_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::io::bad_format_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::io::bad_format_exception *)new illumina::interop::io::bad_format_exception((std::string const &)*arg1);
  *(illumina::interop::io::bad_format_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1bad_1format_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::bad_format_exception *arg1 = (illumina::interop::io::bad_format_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::bad_format_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1incomplete_1file_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::io::incomplete_file_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::io::incomplete_file_exception *)new illumina::interop::io::incomplete_file_exception((std::string const &)*arg1);
  *(illumina::interop::io::incomplete_file_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1incomplete_1file_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::incomplete_file_exception *arg1 = (illumina::interop::io::incomplete_file_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::incomplete_file_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1invalid_1argument(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::io::invalid_argument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::io::invalid_argument *)new illumina::interop::io::invalid_argument((std::string const &)*arg1);
  *(illumina::interop::io::invalid_argument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1invalid_1argument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::invalid_argument *arg1 = (illumina::interop::io::invalid_argument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::invalid_argument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1rta_1config_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = illumina::interop::io::paths::rta_config((std::string const &)*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1rta_1config_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::io::paths::rta_config((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::io::paths::run_info((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1parameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = illumina::interop::io::paths::run_parameters((std::string const &)*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1parameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::io::paths::run_parameters((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::io::paths::run_info();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1parameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jstring jresult = 0 ;
  bool arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = illumina::interop::io::paths::run_parameters(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1run_1parameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::io::paths::run_parameters();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1rta_1config_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = illumina::interop::io::paths::rta_config(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1rta_1config_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::io::paths::rta_config();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1interop_1filename_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  bool arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = illumina::interop::io::paths::interop_filename((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1commJNI_paths_1interop_1filename_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  result = illumina::interop::io::paths::interop_filename((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_new_1paths(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::io::paths *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::io::paths *)new illumina::interop::io::paths();
  *(illumina::interop::io::paths **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_delete_1paths(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::io::paths *arg1 = (illumina::interop::io::paths *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::io::paths **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_148(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_149(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_150(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_151(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_152(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_153(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_154(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_155(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_156(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_157(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_158(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_159(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_160(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_161(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_162(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_163(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_164(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_165(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_166(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_167(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_168(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_compute_1buffer_1size_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR compute_buffer_size< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg1);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1to_1buffer_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = 0 ;
  ::uint8_t *arg2 = (::uint8_t *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return 0;
  } 
  arg2 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  try {
    result = illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop_to_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg1,arg2,arg3);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg2), reinterpret_cast<jbyte*>(arg2), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1from_1buffer_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ::uint8_t *arg1 = (::uint8_t *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = reinterpret_cast<unsigned char*>(jenv->GetByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), 0)); 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop_from_buffer< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >(arg1,arg2,*arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), 0);
  arg1 = NULL;
  
  
  if (arg1)
  {
    jenv->ReleaseByteArrayElements(reinterpret_cast<jbyteArray>(jarg1), reinterpret_cast<jbyte*>(arg1), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((std::string const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1commJNI_read_1interop_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR read_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((std::string const &)*arg1,*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_169(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jshort jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  bool arg3 ;
  ::int16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (::int16_t)jarg4; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_170(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1commJNI_write_1interop_1_1SWIG_171(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return 0;
  } 
  try {
    result = (bool)illumina::interop::io::SWIGTEMPLATEDISAMBIGUATOR write_interop< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((std::string const &)*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_format_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::io::format_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_file_1not_1found_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::io::file_not_found_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_bad_1format_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::io::format_exception **)&baseptr = *(illumina::interop::io::bad_format_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_incomplete_1file_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::io::format_exception **)&baseptr = *(illumina::interop::io::incomplete_file_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1commJNI_invalid_1argument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::io::invalid_argument **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

