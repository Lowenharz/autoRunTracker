/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class image_metric extends base_cycle_metric {
  private transient long swigCPtr;

  protected image_metric(long cPtr, boolean cMemoryOwn) {
    super(interop_metricsJNI.image_metric_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(image_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_metricsJNI.delete_image_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public image_metric() {
    this(interop_metricsJNI.new_image_metric__SWIG_0(), true);
  }

  public image_metric(image_metric_header header) {
    this(interop_metricsJNI.new_image_metric__SWIG_1(image_metric_header.getCPtr(header), header), true);
  }

  public image_metric(long lane, long tile, long cycle, int channel_count, ushort_vector min_contrast, ushort_vector max_contrast) {
    this(interop_metricsJNI.new_image_metric__SWIG_2(lane, tile, cycle, channel_count, ushort_vector.getCPtr(min_contrast), min_contrast, ushort_vector.getCPtr(max_contrast), max_contrast), true);
  }

  public image_metric(long lane, long tile, long cycle, int channel_count, short[] min_contrast, short[] max_contrast) {
    this(interop_metricsJNI.new_image_metric__SWIG_3(lane, tile, cycle, channel_count, min_contrast, max_contrast), true);
  }

  public int min_contrast(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.image_metric_min_contrast(swigCPtr, this, channel);
  }

  public int max_contrast(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.image_metric_max_contrast(swigCPtr, this, channel);
  }

  public ushort_vector min_contrast_array() {
    return new ushort_vector(interop_metricsJNI.image_metric_min_contrast_array(swigCPtr, this), false);
  }

  public ushort_vector max_contrast_array() {
    return new ushort_vector(interop_metricsJNI.image_metric_max_contrast_array(swigCPtr, this), false);
  }

  public int channel_count() {
    return interop_metricsJNI.image_metric_channel_count(swigCPtr, this);
  }

  public boolean is_any_channel_blank() {
    return interop_metricsJNI.image_metric_is_any_channel_blank(swigCPtr, this);
  }

  public void trim(long channel_count) {
    interop_metricsJNI.image_metric_trim(swigCPtr, this, channel_count);
  }

  public int minContrast(long channel) {
    return interop_metricsJNI.image_metric_minContrast__SWIG_0(swigCPtr, this, channel);
  }

  public int maxContrast(long channel) {
    return interop_metricsJNI.image_metric_maxContrast__SWIG_0(swigCPtr, this, channel);
  }

  public ushort_vector minContrast() {
    return new ushort_vector(interop_metricsJNI.image_metric_minContrast__SWIG_1(swigCPtr, this), false);
  }

  public ushort_vector maxContrast() {
    return new ushort_vector(interop_metricsJNI.image_metric_maxContrast__SWIG_1(swigCPtr, this), false);
  }

  public int channelCount() {
    return interop_metricsJNI.image_metric_channelCount(swigCPtr, this);
  }

  public static String prefix() {
    return interop_metricsJNI.image_metric_prefix();
  }

  public final static int MAX_CHANNELS = interop_metricsJNI.image_metric_MAX_CHANNELS_get();
  public final static int TYPE = interop_metricsJNI.image_metric_TYPE_get();
  public final static int LATEST_VERSION = interop_metricsJNI.image_metric_LATEST_VERSION_get();

}
