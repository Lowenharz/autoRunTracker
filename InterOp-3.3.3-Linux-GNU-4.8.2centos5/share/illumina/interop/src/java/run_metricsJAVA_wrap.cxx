/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include "interop/model/model_exceptions.h"


#include "interop/logic/metric/extraction_metric.h"
#include "interop/logic/metric/q_metric.h"
#include "interop/logic/utils/metric_type_ext.h"
#include "interop/logic/utils/metrics_to_load.h"


#include "interop/model/run_metrics.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1invalid_1channel_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_channel_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_channel_exception *)new illumina::interop::model::invalid_channel_exception((std::string const &)*arg1);
  *(illumina::interop::model::invalid_channel_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_delete_1invalid_1channel_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_channel_exception *arg1 = (illumina::interop::model::invalid_channel_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_channel_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1invalid_1metric_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_metric_type *)new illumina::interop::model::invalid_metric_type((std::string const &)*arg1);
  *(illumina::interop::model::invalid_metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_delete_1invalid_1metric_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_metric_type *arg1 = (illumina::interop::model::invalid_metric_type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_metric_type **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1invalid_1parameter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_parameter *)new illumina::interop::model::invalid_parameter((std::string const &)*arg1);
  *(illumina::interop::model::invalid_parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_delete_1invalid_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_parameter *arg1 = (illumina::interop::model::invalid_parameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_parameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_copy_1focus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return ;
  } 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    illumina::interop::logic::metric::copy_focus((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg1,arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1q_1metric_1bins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1q_1metric_1bins_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1q_1metric_1bins_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_q_metric_bins((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1cumulative_1distribution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1cumulative_1distribution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1cumulative_1distribution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::metric::populate_cumulative_distribution(*arg1);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_requires_1legacy_1bins(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  size_t arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (bool)illumina::interop::logic::metric::requires_legacy_bins(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1legacy_1q_1score_1bins_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_score_bin > & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = (size_t)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_compress_1q_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  illumina::interop::logic::metric::compress_q_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_compress_1q_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  illumina::interop::logic::metric::compress_q_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1legacy_1q_1score_1bins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_score_bin > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_populate_1legacy_1q_1score_1bins_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_score_bin > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  illumina::interop::logic::metric::populate_legacy_q_score_bins(*arg1,*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1qvals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1qvals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_count_1qvals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::count_qvals((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1compressed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1compressed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1compressed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  result = (bool)illumina::interop::logic::metric::is_compressed((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_max_1qval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_max_1qval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_max_1qval_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::metric::max_qval((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_index_1for_1q_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = illumina::interop::logic::metric::index_for_q_value((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_index_1for_1q_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = illumina::interop::logic::metric::index_for_q_value((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_create_1collapse_1q_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > & reference is null");
    return ;
  } 
  illumina::interop::logic::metric::create_collapse_q_metrics((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_create_1q_1metrics_1by_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  try {
    illumina::interop::logic::metric::create_q_metrics_by_lane((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_to_1group(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  illumina::interop::constants::metric_group result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (illumina::interop::constants::metric_group)illumina::interop::logic::utils::to_group(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_to_1description(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = illumina::interop::logic::utils::to_description(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1descriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_descriptions(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_to_1feature_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_to_1feature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_group arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1base_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_base_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1channel_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_channel_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1read_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_read_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1cycle_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_cycle_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1tile_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_tile_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_to_1feature_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  illumina::interop::constants::event_type arg1 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::logic::utils::to_feature(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1subtile_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_subtile_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1interval_1event(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::event_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_interval_event(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1iuo_1metric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_iuo_metric(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_is_1iuo(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  illumina::interop::constants::metric_group arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = (bool)illumina::interop::logic::utils::is_iuo(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1metrics_1to_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  illumina::interop::constants::metric_group arg1 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load(arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1metrics_1to_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  illumina::interop::constants::metric_type arg1 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load(arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1metrics_1to_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_group > const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load((std::vector< enum illumina::interop::constants::metric_group > const &)*arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1metrics_1to_1load_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_type > const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  illumina::interop::logic::utils::list_metrics_to_load((std::vector< enum illumina::interop::constants::metric_type > const &)*arg1,*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1metrics_1to_1load_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  std::string *arg1 = 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  illumina::interop::constants::instrument_type arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::constants::instrument_type)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::utils::list_metrics_to_load((std::string const &)*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1summary_1metric_1groups_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_group > & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::utils::list_summary_metric_groups(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1summary_1metric_1groups_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_group > & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  illumina::interop::logic::utils::list_summary_metric_groups(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1index_1summary_1metric_1groups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_group > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_index_summary_metric_groups(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1summary_1metrics_1to_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< unsigned char > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1summary_1metrics_1to_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1summary_1metrics_1to_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_summary_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1index_1metrics_1to_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_index_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1analysis_1metrics_1to_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::utils::list_analysis_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1analysis_1metrics_1to_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_analysis_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1event_1metrics_1to_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_event_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1subtile_1metrics_1to_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_subtile_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1run_1diagnostics_1metrics_1to_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_run_diagnostics_metrics_to_load(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_list_1run_1diagnostics_1metric_1groups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::metric_group > & reference is null");
    return ;
  } 
  illumina::interop::logic::utils::list_run_diagnostics_metric_groups(*arg1);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1run_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics();
  *(illumina::interop::model::metrics::run_metrics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1run_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = 0 ;
  illumina::interop::model::run::parameters *arg2 = 0 ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::run::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::parameters const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics((illumina::interop::model::run::info const &)*arg1,(illumina::interop::model::run::parameters const &)*arg2);
  *(illumina::interop::model::metrics::run_metrics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_new_1run_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = 0 ;
  illumina::interop::model::metrics::run_metrics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_metrics *)new illumina::interop::model::metrics::run_metrics((illumina::interop::model::run::info const &)*arg1);
  *(illumina::interop::model::metrics::run_metrics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  try {
    (arg1)->read((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  size_t arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< unsigned char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > const & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< unsigned char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > const & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3,arg4);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< unsigned char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > const & reference is null");
    return ;
  } 
  try {
    (arg1)->read((std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1xml(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->read_xml((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1run_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read_run_info((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1run_1parameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    result = (arg1)->read_run_parameters((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1run_1parameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->read_run_parameters((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1finalize_1after_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    (arg1)->finalize_after_load(arg2);
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1finalize_1after_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  try {
    (arg1)->finalize_after_load();
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1legacy_1channel_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::instrument_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::instrument_type)jarg2; 
  (arg1)->legacy_channel_update(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1count_1legacy_1bins_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->count_legacy_bins(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1count_1legacy_1bins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->count_legacy_bins();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1is_1run_1parameters_1required_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_run_parameters_required(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1is_1run_1parameters_1required_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_run_parameters_required();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1run_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::run::info *) &((illumina::interop::model::metrics::run_metrics const *)arg1)->run_info();
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1run_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::info *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::run::info **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return ;
  } 
  (arg1)->run_info((illumina::interop::model::run::info const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1run_1parameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::run::parameters *) &((illumina::interop::model::metrics::run_metrics const *)arg1)->run_parameters();
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1run_1parameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::run::parameters *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::run::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::parameters const & reference is null");
    return ;
  } 
  (arg1)->run_parameters((illumina::interop::model::run::parameters const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1list_1filenames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->list_filenames(arg2,*arg3,(std::string const &)*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1list_1filenames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->list_filenames(arg2,*arg3,(std::string const &)*arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1list_1filenames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1list_1filenames_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1list_1filenames_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->list_filenames(*arg2,(std::string const &)*arg3);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1check_1for_1data_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  (arg1)->check_for_data_sources((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jboolean jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::vector< unsigned char > *arg4 = 0 ;
  size_t arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  arg4 = *(std::vector< unsigned char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > const & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,(std::vector< unsigned char > const &)*arg4,arg5,arg6);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::vector< unsigned char > *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  arg4 = *(std::vector< unsigned char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > const & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  try {
    (arg1)->read_metrics((std::string const &)*arg2,arg3,(std::vector< unsigned char > const &)*arg4,arg5);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1write_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics((std::string const &)*arg2,arg3);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1write_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics((std::string const &)*arg2);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1read_1metrics_1from_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  {
    if (jarg3) {
      arg3 = (uint8_t *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t const) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  try {
    (arg1)->read_metrics_from_buffer(arg2,arg3,arg4);
  }
  catch(illumina::interop::io::file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1write_1metrics_1to_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyteArray jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  {
    if (jarg3) {
      arg3 = (uint8_t *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t const) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  try {
    ((illumina::interop::model::metrics::run_metrics const *)arg1)->write_metrics_to_buffer(arg2,arg3,arg4);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::io::incomplete_file_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/incomplete_file_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1calculate_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  try {
    result = ((illumina::interop::model::metrics::run_metrics const *)arg1)->calculate_buffer_size(arg2);
  }
  catch(illumina::interop::io::invalid_argument &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_argument");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  catch(illumina::interop::io::bad_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  try {
    (arg1)->validate();
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1is_1group_1empty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_group_empty((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1is_1group_1empty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::constants::metric_group arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_group)jarg2; 
  result = (bool)((illumina::interop::model::metrics::run_metrics const *)arg1)->is_group_empty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1populate_1id_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::tile_metric_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::run_metrics::tile_metric_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics::tile_metric_map_t & reference is null");
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1populate_1id_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::cycle_metric_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::run_metrics::cycle_metric_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics::cycle_metric_map_t & reference is null");
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1populate_1id_1map_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metrics::run_metrics::event_metric_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::run_metrics::event_metric_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics::event_metric_map_t & reference is null");
    return ;
  } 
  ((illumina::interop::model::metrics::run_metrics const *)arg1)->populate_id_map(*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1corrected_1intensity_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1corrected_1intensity_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::corrected_intensity_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1error_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1error_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::error_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1extraction_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1extraction_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::extraction_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1image_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1image_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::image_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1q_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1q_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1tile_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1tile_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::tile_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1index_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1index_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::index_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1q_1collapsed_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1q_1collapsed_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_collapsed_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1q_1by_1lane_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1q_1by_1lane_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_by_lane_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1alignment_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1alignment_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::alignment_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1basecalling_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1basecalling_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::basecalling_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1color_1matrix_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1color_1matrix_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::color_matrix_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1distortion_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1distortion_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::distortion_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1dynamic_1phasing_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1dynamic_1phasing_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1event_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1event_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::event_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1extended_1tile_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1extended_1tile_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::extended_tile_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1fwhm_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1fwhm_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::fwhm_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1pf_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1pf_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::pf_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1phasing_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1phasing_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::phasing_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1q_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1q_1grid_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::q_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1registration_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1registration_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::registration_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1run_1diagnostics_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1run_1diagnostics_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::run_diagnostics_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1set_1static_1run_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const & reference is null");
    return ;
  } 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_run_1metrics_1static_1run_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_metric_set< illumina::interop::model::metrics::static_run_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_delete_1run_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::run_metrics *arg1 = (illumina::interop::model::metrics::run_metrics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_invalid_1channel_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_channel_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_invalid_1metric_1type_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_metric_type **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1run_1metricsJNI_invalid_1parameter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_parameter **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

