/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include "interop/util/time.h"
#include "interop/constants/enum_description.h"
#include "interop/model/metric_base/metric_exceptions.h"
#include "interop/model/run/run_exceptions.h"
#include "interop/util/xml_exceptions.h"


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    
SWIGINTERN std::vector< illumina::interop::model::metrics::index_info >::const_reference std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__get(std::vector< illumina::interop::model::metrics::index_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__set(std::vector< illumina::interop::model::metrics::index_info > *self,int i,std::vector< illumina::interop::model::metrics::index_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN illumina::interop::model::metric_base::base_metric const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__get(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_metric >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__set(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,unsigned long const &key,illumina::interop::model::metric_base::base_metric const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__del(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_metric >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__has_key(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_metric >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN illumina::interop::model::metric_base::base_cycle_metric const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__get(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__set(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,unsigned long const &key,illumina::interop::model::metric_base::base_cycle_metric const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__del(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__has_key(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metric_base::base_cycle_metric >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::read_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__get(std::vector< illumina::interop::model::metrics::read_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__set(std::vector< illumina::interop::model::metrics::read_metric > *self,int i,std::vector< illumina::interop::model::metrics::read_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_score_bin >::const_reference std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__get(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__set(std::vector< illumina::interop::model::metrics::q_score_bin > *self,int i,std::vector< illumina::interop::model::metrics::q_score_bin >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::const_reference std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__get(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__set(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *self,int i,std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum illumina::interop::constants::metric_type >::const_reference std_vector_Sl_illumina_interop_constants_metric_type_Sg__get(std::vector< illumina::interop::constants::metric_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_type_Sg__set(std::vector< illumina::interop::constants::metric_type > *self,int i,std::vector< enum illumina::interop::constants::metric_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum illumina::interop::constants::metric_group >::const_reference std_vector_Sl_illumina_interop_constants_metric_group_Sg__get(std::vector< illumina::interop::constants::metric_group > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_metric_group_Sg__set(std::vector< illumina::interop::constants::metric_group > *self,int i,std::vector< enum illumina::interop::constants::metric_group >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__get(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__set(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *self,int i,std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::error_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__get(std::vector< illumina::interop::model::metrics::error_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__set(std::vector< illumina::interop::model::metrics::error_metric > *self,int i,std::vector< illumina::interop::model::metrics::error_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::extraction_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__get(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__set(std::vector< illumina::interop::model::metrics::extraction_metric > *self,int i,std::vector< illumina::interop::model::metrics::extraction_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::image_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__get(std::vector< illumina::interop::model::metrics::image_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__set(std::vector< illumina::interop::model::metrics::image_metric > *self,int i,std::vector< illumina::interop::model::metrics::image_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__get(std::vector< illumina::interop::model::metrics::q_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__set(std::vector< illumina::interop::model::metrics::q_metric > *self,int i,std::vector< illumina::interop::model::metrics::q_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::tile_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__get(std::vector< illumina::interop::model::metrics::tile_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__set(std::vector< illumina::interop::model::metrics::tile_metric > *self,int i,std::vector< illumina::interop::model::metrics::tile_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::index_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__get(std::vector< illumina::interop::model::metrics::index_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__set(std::vector< illumina::interop::model::metrics::index_metric > *self,int i,std::vector< illumina::interop::model::metrics::index_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_collapsed_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__get(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__set(std::vector< illumina::interop::model::metrics::q_collapsed_metric > *self,int i,std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_by_lane_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__get(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__set(std::vector< illumina::interop::model::metrics::q_by_lane_metric > *self,int i,std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    
SWIGINTERN std::vector< illumina::interop::model::metrics::point2d >::const_reference std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__get(std::vector< illumina::interop::model::metrics::point2d > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__set(std::vector< illumina::interop::model::metrics::point2d > *self,int i,std::vector< illumina::interop::model::metrics::point2d >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN illumina::interop::model::metrics::event_metric const &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__get(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metrics::event_metric >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__set(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,unsigned long const &key,illumina::interop::model::metrics::event_metric const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__del(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metrics::event_metric >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__has_key(std::map< uint64_t,illumina::interop::model::metrics::event_metric > *self,unsigned long const &key){
                std::map<unsigned long,illumina::interop::model::metrics::event_metric >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::alignment_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__get(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__set(std::vector< illumina::interop::model::metrics::alignment_metric > *self,int i,std::vector< illumina::interop::model::metrics::alignment_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::basecalling_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__get(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__set(std::vector< illumina::interop::model::metrics::basecalling_metric > *self,int i,std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::color_matrix_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__get(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__set(std::vector< illumina::interop::model::metrics::color_matrix_metric > *self,int i,std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::distortion_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__get(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__set(std::vector< illumina::interop::model::metrics::distortion_metric > *self,int i,std::vector< illumina::interop::model::metrics::distortion_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__get(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__set(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *self,int i,std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::event_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__get(std::vector< illumina::interop::model::metrics::event_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__set(std::vector< illumina::interop::model::metrics::event_metric > *self,int i,std::vector< illumina::interop::model::metrics::event_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::extended_tile_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__get(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__set(std::vector< illumina::interop::model::metrics::extended_tile_metric > *self,int i,std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__get(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__set(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *self,int i,std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::pf_grid_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__get(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__set(std::vector< illumina::interop::model::metrics::pf_grid_metric > *self,int i,std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::phasing_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__get(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__set(std::vector< illumina::interop::model::metrics::phasing_metric > *self,int i,std::vector< illumina::interop::model::metrics::phasing_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::q_grid_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__get(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__set(std::vector< illumina::interop::model::metrics::q_grid_metric > *self,int i,std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::registration_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__get(std::vector< illumina::interop::model::metrics::registration_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__set(std::vector< illumina::interop::model::metrics::registration_metric > *self,int i,std::vector< illumina::interop::model::metrics::registration_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__get(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__set(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *self,int i,std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::metrics::static_run_metric >::const_reference std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__get(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__set(std::vector< illumina::interop::model::metrics::static_run_metric > *self,int i,std::vector< illumina::interop::model::metrics::static_run_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1out_1of_1bounds_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::index_out_of_bounds_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::index_out_of_bounds_exception *)new illumina::interop::model::index_out_of_bounds_exception((std::string const &)*arg1);
  *(illumina::interop::model::index_out_of_bounds_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1index_1out_1of_1bounds_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::index_out_of_bounds_exception *arg1 = (illumina::interop::model::index_out_of_bounds_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::index_out_of_bounds_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1csharp_1date_1time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ::uint64_t arg1 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::util::csharp_date_time *)new illumina::interop::util::csharp_date_time(arg1);
  *(illumina::interop::util::csharp_date_time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1csharp_1date_1time_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::util::csharp_date_time *)new illumina::interop::util::csharp_date_time();
  *(illumina::interop::util::csharp_date_time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1unix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  result = (::uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->to_unix();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1seconds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  result = (double)((illumina::interop::util::csharp_date_time const *)arg1)->to_seconds();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1unix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ::uint64_t arg1 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (::uint64_t)illumina::interop::util::csharp_date_time::to_unix(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1seconds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  ::uint64_t arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (double)illumina::interop::util::csharp_date_time::to_seconds(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1csharp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ::uint64_t arg1 ;
  illumina::interop::util::csharp_date_time result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = illumina::interop::util::csharp_date_time::to_csharp(arg1);
  *(illumina::interop::util::csharp_date_time **)&jresult = new illumina::interop::util::csharp_date_time((const illumina::interop::util::csharp_date_time &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (::uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (::uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  result = (::uint64_t) ((arg1)->value);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  result = (uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->operator uint64_t();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1to_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  result = (::uint64_t)((illumina::interop::util::csharp_date_time const *)arg1)->to_binary();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_csharp_1date_1time_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  illumina::interop::util::csharp_date_time *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  arg2 = *(illumina::interop::util::csharp_date_time **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::util::csharp_date_time const & reference is null");
    return 0;
  } 
  result = (bool)((illumina::interop::util::csharp_date_time const *)arg1)->operator ==((illumina::interop::util::csharp_date_time const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1csharp_1date_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::util::csharp_date_time *arg1 = (illumina::interop::util::csharp_date_time *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::util::csharp_date_time **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1empty_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::empty_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::empty_header *)new illumina::interop::model::metric_base::empty_header();
  *(illumina::interop::model::metric_base::empty_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1empty_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::empty_header *arg1 = (illumina::interop::model::metric_base::empty_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::empty_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metric_base::base_metric_header::default_header();
  *(illumina::interop::model::metric_base::base_metric_header **)&jresult = new illumina::interop::model::metric_base::base_metric_header((const illumina::interop::model::metric_base::base_metric_header &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_metric_header *)new illumina::interop::model::metric_base::base_metric_header();
  *(illumina::interop::model::metric_base::base_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_metric_header *arg1 = (illumina::interop::model::metric_base::base_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1empty_1metric(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::empty_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::empty_metric *)new illumina::interop::model::metric_base::empty_metric();
  *(illumina::interop::model::metric_base::empty_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1empty_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::empty_metric *arg1 = (illumina::interop::model::metric_base::empty_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::empty_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1LANE_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::LANE_BIT_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1TILE_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::TILE_BIT_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1CYCLE_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::CYCLE_BIT_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1READ_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::READ_BIT_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1RESERVED_1BIT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::RESERVED_BIT_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1READ_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::READ_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1CYCLE_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::CYCLE_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1EVENT_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::EVENT_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1TILE_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::TILE_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1LANE_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_metric::LANE_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric(arg1,arg2);
  *(illumina::interop::model::metric_base::base_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric(arg1);
  *(illumina::interop::model::metric_base::base_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_metric *)new illumina::interop::model::metric_base::base_metric();
  *(illumina::interop::model::metric_base::base_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1set_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->id();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1tile_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->tile_hash();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1create_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::create_id(arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1create_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::create_id(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1lane_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::lane_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1tile_1hash_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::tile_hash_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1tile_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_metric::tile_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1tile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->tile();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->number(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->section(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->surface(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1swath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->swath(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1phyiscalLocationIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  bool arg6 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationIndex(arg2,arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1phyiscalLocationColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  bool arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationColumn(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1phyiscalLocationRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->phyiscalLocationRow(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1physical_1location_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  bool arg6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = ((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_index(arg2,arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1physical_1location_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  bool arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_column(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1physical_1location_1row(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_metric const *)arg1)->physical_location_row(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::base_metric::suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_metric *arg1 = (illumina::interop::model::metric_base::base_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1cycle_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_cycle_metric_header *)new illumina::interop::model::metric_base::base_cycle_metric_header();
  *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metric_base::base_cycle_metric_header::default_header();
  *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jresult = new illumina::interop::model::metric_base::base_cycle_metric_header((const illumina::interop::model::metric_base::base_cycle_metric_header &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1header_1max_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_cycle_metric_header const *)arg1)->max_cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1cycle_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_cycle_metric_header *arg1 = (illumina::interop::model::metric_base::base_cycle_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1cycle_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metric_base::base_cycle_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1cycle_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1,arg2);
  *(illumina::interop::model::metric_base::base_cycle_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1cycle_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric(arg1);
  *(illumina::interop::model::metric_base::base_cycle_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1cycle_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_cycle_metric *)new illumina::interop::model::metric_base::base_cycle_metric();
  *(illumina::interop::model::metric_base::base_cycle_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1set_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1set_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->id();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1cycle_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_cycle_metric const *)arg1)->cycle_hash();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1cycle_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::cycle_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1reserved_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::reserved_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1create_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_cycle_metric::create_id(arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1cycle_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_cycle_metric *arg1 = (illumina::interop::model::metric_base::base_cycle_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1read_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_read_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_read_metric_header *)new illumina::interop::model::metric_base::base_read_metric_header();
  *(illumina::interop::model::metric_base::base_read_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_read_metric_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metric_base::base_read_metric_header::default_header();
  *(illumina::interop::model::metric_base::base_read_metric_header **)&jresult = new illumina::interop::model::metric_base::base_read_metric_header((const illumina::interop::model::metric_base::base_read_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1read_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_read_metric_header *arg1 = (illumina::interop::model::metric_base::base_read_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1read_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_read_metric *)new illumina::interop::model::metric_base::base_read_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metric_base::base_read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1set_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1set_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_read_metric const *)arg1)->read();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_read_metric const *)arg1)->id();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1create_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_read_metric::create_id(arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1read_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_read_metric::read_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1read_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_read_metric *arg1 = (illumina::interop::model::metric_base::base_read_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_static_run_metric_header *)new illumina::interop::model::metric_base::base_static_run_metric_header();
  *(illumina::interop::model::metric_base::base_static_run_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1static_1run_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_static_run_metric_header *arg1 = (illumina::interop::model::metric_base::base_static_run_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1CHANNEL_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_static_run_metric::CHANNEL_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1DISTORTION_1BIT_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::base_static_run_metric::DISTORTION_BIT_SHIFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metric(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg1 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_static_run_metric *)new illumina::interop::model::metric_base::base_static_run_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metric_base::base_static_run_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1set_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::count_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)jarg4; 
  (arg1)->set_base(arg2,arg3,arg4);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::base_static_run_metric::suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::id_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->id();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1create_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_static_run_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_static_run_metric::id_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::id_t)illumina::interop::model::metric_base::base_static_run_metric::create_id(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1camera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::count_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->camera();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::count_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::count_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->channel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1distortion_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  illumina::interop::model::metric_base::base_static_run_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_static_run_metric::ushort_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->distortion_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (uint32_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1tile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  result = (uint32_t)((illumina::interop::model::metric_base::base_static_run_metric const *)arg1)->tile();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1static_1run_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_static_run_metric *arg1 = (illumina::interop::model::metric_base::base_static_run_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_event_metric_header *)new illumina::interop::model::metric_base::base_event_metric_header();
  *(illumina::interop::model::metric_base::base_event_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metric_base::base_event_metric_header::default_header();
  *(illumina::interop::model::metric_base::base_event_metric_header **)&jresult = new illumina::interop::model::metric_base::base_event_metric_header((const illumina::interop::model::metric_base::base_event_metric_header &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1header_1max_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric_header **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metric_base::base_event_metric_header const *)arg1)->max_cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1event_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_event_metric_header *arg1 = (illumina::interop::model::metric_base::base_event_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::constants::event_type arg4 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::constants::event_type)jarg4; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::metric_base::base_event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metric_base::base_event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1,arg2);
  *(illumina::interop::model::metric_base::base_event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric(arg1);
  *(illumina::interop::model::metric_base::base_event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::base_event_metric *)new illumina::interop::model::metric_base::base_event_metric();
  *(illumina::interop::model::metric_base::base_event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1set_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1set_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  (arg1)->set_base(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1event_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::constants::event_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  result = (illumina::interop::constants::event_type)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->event_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1event_1type_1long(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  result = (::uint64_t)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->event_type_long();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1event_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::constants::event_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::event_type)jarg2; 
  (arg1)->event_type(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::id_t)((illumina::interop::model::metric_base::base_event_metric const *)arg1)->id();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1create_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t arg4 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metric_base::base_event_metric::create_id(arg1,arg2,arg3,arg4);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1event_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::base_event_metric *arg1 = (illumina::interop::model::metric_base::base_event_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1point2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d();
  *(illumina::interop::model::metrics::point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1point2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d(arg1,arg2);
  *(illumina::interop::model::metrics::point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1point2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::point2d *arg1 = 0 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::point2d const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::point2d *)new illumina::interop::model::metrics::point2d((illumina::interop::model::metrics::point2d const &)*arg1);
  *(illumina::interop::model::metrics::point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::point2d **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::point2d const *)arg1)->x();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::point2d **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::point2d const *)arg1)->y();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1point2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::point2d *arg1 = (illumina::interop::model::metrics::point2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::point2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1info_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::index_info > *)new std::vector< illumina::interop::model::metrics::index_info >();
  *(std::vector< illumina::interop::model::metrics::index_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1info_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::index_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::index_info >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::index_info > *)new std::vector< illumina::interop::model::metrics::index_info >(arg1);
  *(std::vector< illumina::interop::model::metrics::index_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_info > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_info > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::index_info > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::index_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::index_info >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::index_info >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_info >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::index_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::index_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::index_info >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_info_Sg__set(arg1,arg2,(illumina::interop::model::metrics::index_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1index_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::index_info > *arg1 = (std::vector< illumina::interop::model::metrics::index_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_info > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_metric >();
  *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_metric > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned long,illumina::interop::model::metric_base::base_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< unsigned long,illumina::interop::model::metric_base::base_metric > const & reference is null");
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_metric >((std::map< unsigned long,illumina::interop::model::metric_base::base_metric > const &)*arg1);
  *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  result = (unsigned int)((std::map< uint64_t,illumina::interop::model::metric_base::base_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metric_base::base_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  illumina::interop::model::metric_base::base_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::base_metric *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__get(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(illumina::interop::model::metric_base::base_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  illumina::interop::model::metric_base::base_metric *arg3 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::base_metric **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_metric const & reference is null");
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__set(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_metric const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__del(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_metric_Sg__has_key(arg1,(unsigned long const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1tile_1metric_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1cycle_1metric_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric >();
  *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1cycle_1metric_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric > const & reference is null");
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *)new std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric >((std::map< unsigned long,illumina::interop::model::metric_base::base_cycle_metric > const &)*arg1);
  *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  result = (unsigned int)((std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  illumina::interop::model::metric_base::base_cycle_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::base_cycle_metric *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__get(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(illumina::interop::model::metric_base::base_cycle_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric *arg3 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric const & reference is null");
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__set(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metric_base::base_cycle_metric const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__del(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_cycle_1metric_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metric_base_base_cycle_metric_Sg__has_key(arg1,(unsigned long const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1cycle_1metric_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metric_base::base_cycle_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::read_metric > *)new std::vector< illumina::interop::model::metrics::read_metric >();
  *(std::vector< illumina::interop::model::metrics::read_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::read_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::read_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::read_metric > *)new std::vector< illumina::interop::model::metrics::read_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::read_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::read_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::read_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::read_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::read_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::read_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::read_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::read_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::read_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::read_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::read_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::read_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::read_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::read_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::read_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_read_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::read_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1read_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::read_metric > *arg1 = (std::vector< illumina::interop::model::metrics::read_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::read_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)new std::vector< illumina::interop::model::metrics::q_score_bin >();
  *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::q_score_bin > *)new std::vector< illumina::interop::model::metrics::q_score_bin >(arg1);
  *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_score_bin > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_score_bin > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_score_bin >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::q_score_bin > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_score_bin >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_score_bin >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::q_score_bin >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_score_bin >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::q_score_bin >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_score_bin >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::q_score_bin >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_score_bin >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_score_bin_Sg__set(arg1,arg2,(illumina::interop::model::metrics::q_score_bin const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1score_1bin_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::q_score_bin > *arg1 = (std::vector< illumina::interop::model::metrics::q_score_bin > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_score_bin > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1name_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >();
  *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1name_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  std::string arg2 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >(arg1,arg2);
  *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1name_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< illumina::interop::constants::metric_type,std::string > const & reference is null");
    return 0;
  } 
  result = (std::pair< illumina::interop::constants::metric_type,std::string > *)new std::pair< illumina::interop::constants::metric_type,std::string >((std::pair< illumina::interop::constants::metric_type,std::string > const &)*arg1);
  *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1name_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1name_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  illumina::interop::constants::metric_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1; 
  result = (illumina::interop::constants::metric_type) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1name_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1name_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1metric_1type_1name_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = (std::pair< illumina::interop::constants::metric_type,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1description_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >();
  *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1description_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >(arg1,(std::string const &)*arg2);
  *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1description_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< illumina::interop::constants::metric_type,std::string > *arg1 = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< illumina::interop::constants::metric_type,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< illumina::interop::constants::metric_type,std::string > const & reference is null");
    return 0;
  } 
  result = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *)new illumina::interop::constants::enum_description< illumina::interop::constants::metric_type >((std::pair< illumina::interop::constants::metric_type,std::string > const &)*arg1);
  *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jarg1; 
  result = (illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type >::enum_t)((illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jarg1; 
  result = (std::string *) &((illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > const *)arg1)->description();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1metric_1type_1description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *arg1 = (illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1description_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >();
  *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1description_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type arg1 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type)jarg1; 
  result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *)new std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >(arg1);
  *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >::value_type *) &std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1description_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_constants_enum_description_Sl_illumina_interop_constants_metric_type_Sg__Sg__set(arg1,arg2,(illumina::interop::constants::enum_description< enum illumina::interop::constants::metric_type > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1metric_1type_1description_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *arg1 = (std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::constants::enum_description< illumina::interop::constants::metric_type > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::constants::metric_type > *)new std::vector< illumina::interop::constants::metric_type >();
  *(std::vector< illumina::interop::constants::metric_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1type_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type arg1 ;
  std::vector< illumina::interop::constants::metric_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum illumina::interop::constants::metric_type >::size_type)jarg1; 
  result = (std::vector< illumina::interop::constants::metric_type > *)new std::vector< illumina::interop::constants::metric_type >(arg1);
  *(std::vector< illumina::interop::constants::metric_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_type > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_type > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::metric_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::constants::metric_type > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::value_type *arg2 = 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  temp2 = (std::vector< enum illumina::interop::constants::metric_type >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum illumina::interop::constants::metric_type >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::metric_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum illumina::interop::constants::metric_type >::value_type *) &std_vector_Sl_illumina_interop_constants_metric_type_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1type_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::metric_type >::value_type *arg3 = 0 ;
  std::vector< enum illumina::interop::constants::metric_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum illumina::interop::constants::metric_type >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_type_Sg__set(arg1,arg2,(enum illumina::interop::constants::metric_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1metric_1type_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::constants::metric_type > *arg1 = (std::vector< illumina::interop::constants::metric_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::constants::metric_type > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1group_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::constants::metric_group > *)new std::vector< illumina::interop::constants::metric_group >();
  *(std::vector< illumina::interop::constants::metric_group > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1metric_1group_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type arg1 ;
  std::vector< illumina::interop::constants::metric_group > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum illumina::interop::constants::metric_group >::size_type)jarg1; 
  result = (std::vector< illumina::interop::constants::metric_group > *)new std::vector< illumina::interop::constants::metric_group >(arg1);
  *(std::vector< illumina::interop::constants::metric_group > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_group > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::metric_group > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::metric_group >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::constants::metric_group > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::value_type *arg2 = 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  temp2 = (std::vector< enum illumina::interop::constants::metric_group >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum illumina::interop::constants::metric_group >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::metric_group >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum illumina::interop::constants::metric_group >::value_type *) &std_vector_Sl_illumina_interop_constants_metric_group_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_metric_1group_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::metric_group >::value_type *arg3 = 0 ;
  std::vector< enum illumina::interop::constants::metric_group >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum illumina::interop::constants::metric_group >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_metric_group_Sg__set(arg1,arg2,(enum illumina::interop::constants::metric_group const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1metric_1group_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::constants::metric_group > *arg1 = (std::vector< illumina::interop::constants::metric_group > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::constants::metric_group > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::corrected_intensity_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::corrected_intensity_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric();
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *arg7 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg8 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & reference is null");
    return 0;
  } 
  arg7 = *(illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5,(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg6,(illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t const &)*arg7,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg8);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jfloat jarg5, jfloatArray jarg6, jshortArray jarg7, jintArray jarg8) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::float_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t arg7 = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t arg8 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  
  arg7 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg7), 0));
  
  
  arg8 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg8), 0));
  
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg7), reinterpret_cast<jshort*>(arg7), 0);
  arg7 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg8), reinterpret_cast<jint*>(arg8), 0);
  arg8 = NULL;
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg7), reinterpret_cast<jshort*>(arg7), JNI_ABORT);
  }
  
  
  if (arg8)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg8), reinterpret_cast<jint*>(arg8), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg4,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg5);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jshortArray jarg4, jintArray jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t arg4 = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t arg5 = (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t) (illumina::interop::model::metrics::corrected_intensity_metric::uint_pointer_t)0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  
  arg4 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg4), 0));
  
  
  arg5 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg5), 0));
  
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg4), reinterpret_cast<jshort*>(arg4), 0);
  arg4 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg5), reinterpret_cast<jint*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg4), reinterpret_cast<jshort*>(arg4), JNI_ABORT);
  }
  
  
  if (arg5)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg5), reinterpret_cast<jint*>(arg5), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1corrected_1intensity_1metric_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::corrected_intensity_metric *)new illumina::interop::model::metrics::corrected_intensity_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg4);
  *(illumina::interop::model::metrics::corrected_intensity_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t const &)*arg5);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1average_1cycle_1intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->average_cycle_intensity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1all_1float(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all_float(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1called(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_called(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1called_1counts_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->called_counts_array();
  *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1called_1array_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_called_array();
  *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1all_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->corrected_int_all_array();
  *(illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1called_1counts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->called_counts(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1no_1calls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->no_calls();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1signal_1to_1noise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->signal_to_noise();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1total_1calls_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_calls(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1total_1calls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_calls();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1total_1intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_intensity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1total_1called_1intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->total_called_intensity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percent_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::constants::dna_bases arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::constants::dna_bases)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_base(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percent_1bases(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_bases();
  *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jresult = new illumina::interop::model::metrics::corrected_intensity_metric::float_array_t((const illumina::interop::model::metrics::corrected_intensity_metric::float_array_t &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percent_1nocall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  try {
    result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percent_nocall();
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1corrected_1int_1called_1array_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const & reference is null");
    return ;
  } 
  (arg1)->corrected_int_called_array((illumina::interop::model::metrics::corrected_intensity_metric::float_array_t const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1any_1valid_1called_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->any_valid_called_int();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1averageCycleIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->averageCycleIntensity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1correctedIntAll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntAll(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1correctedIntCalled_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntCalled(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1correctedIntCalled_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::float_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntCalled();
  *(illumina::interop::model::metrics::corrected_intensity_metric::float_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1correctedIntAll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->correctedIntAll();
  *(illumina::interop::model::metrics::corrected_intensity_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1calledCounts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t *) &((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->calledCounts();
  *(illumina::interop::model::metrics::corrected_intensity_metric::uint_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1noCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->noCalls();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percentBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::difference_type arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric::difference_type)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentBase(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1calledCounts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric::difference_type arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metrics::corrected_intensity_metric::difference_type)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->calledCounts(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1signalToNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->signalToNoise();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1totalCalls_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  bool arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalls(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1totalCalls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalls();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1totalIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalIntensity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1totalCalledIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->totalCalledIntensity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percentIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentIntensity(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1percentCalledIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::corrected_intensity_metric const *)arg1)->percentCalledIntensity(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::corrected_intensity_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1corrected_1intensity_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::corrected_intensity_metric *arg1 = (illumina::interop::model::metrics::corrected_intensity_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1MAX_1MISMATCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::error_metric::MAX_MISMATCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::error_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::error_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1error_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric();
  *(illumina::interop::model::metrics::error_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1error_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::error_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1error_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::error_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::error_metric *)new illumina::interop::model::metrics::error_metric(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::metrics::error_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1error_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::error_metric const *)arg1)->error_rate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1mismatch_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_cluster_count(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1mismatch_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1mismatch_1cluster_1counts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  illumina::interop::model::metrics::error_metric::uint_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::error_metric::uint_array_t *) &((illumina::interop::model::metrics::error_metric const *)arg1)->mismatch_cluster_counts();
  *(illumina::interop::model::metrics::error_metric::uint_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1errorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::error_metric const *)arg1)->errorRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::error_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1error_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::error_metric *arg1 = (illumina::interop::model::metrics::error_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::error_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1MAX_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extraction_metric_header::MAX_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::extraction_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::extraction_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric_header *)new illumina::interop::model::metrics::extraction_metric_header(arg1);
  *(illumina::interop::model::metrics::extraction_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1channel_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  illumina::interop::model::metrics::extraction_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric_header::ushort_t)((illumina::interop::model::metrics::extraction_metric_header const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1channel_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->channel_count(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::extraction_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::extraction_metric_header::default_header();
  *(illumina::interop::model::metrics::extraction_metric_header **)&jresult = new illumina::interop::model::metrics::extraction_metric_header((const illumina::interop::model::metrics::extraction_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1extraction_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::extraction_metric_header *arg1 = (illumina::interop::model::metrics::extraction_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::extraction_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1MAX_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extraction_metric::MAX_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extraction_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extraction_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric();
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric((illumina::interop::model::metrics::extraction_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metric_base::base_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  arg6 = *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshortArray jarg5, jfloatArray jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metric_base::base_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  
  arg5 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg5), 0));
  
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshortArray jarg5, jfloatArray jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metric_base::base_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metric_base::base_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  
  arg5 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg5), 0));
  
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = *(illumina::interop::util::csharp_date_time **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null illumina::interop::util::csharp_date_time const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  arg6 = *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jshortArray jarg5, jfloatArray jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = *(illumina::interop::util::csharp_date_time **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null illumina::interop::util::csharp_date_time const");
    return 0;
  }
  arg4 = *argp4; 
  
  arg5 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg5), 0));
  
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jshortArray jarg5, jfloatArray jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::util::csharp_date_time arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t) (illumina::interop::model::metrics::extraction_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::extraction_metric::float_pointer_t arg6 = (illumina::interop::model::metrics::extraction_metric::float_pointer_t) (illumina::interop::model::metrics::extraction_metric::float_pointer_t)0 ;
  illumina::interop::util::csharp_date_time const *argp4 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  argp4 = *(illumina::interop::util::csharp_date_time **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null illumina::interop::util::csharp_date_time const");
    return 0;
  }
  arg4 = *argp4; 
  
  arg5 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg5), 0));
  
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extraction_1metric_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extraction_metric *)new illumina::interop::model::metrics::extraction_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg4,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg5);
  *(illumina::interop::model::metrics::extraction_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg5 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg5));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg5), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (illumina::interop::model::metric_base::base_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (illumina::interop::model::metric_base::base_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & reference is null");
    return ;
  } 
  arg7 = *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,arg5,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg6,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg7);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::ushort_array_t const & reference is null");
    return ;
  } 
  arg6 = *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::extraction_metric::float_array_t const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::extraction_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::extraction_metric::float_array_t const &)*arg6);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1date_1time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1date_1time_1csharp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::util::csharp_date_time *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time_csharp();
  *(illumina::interop::util::csharp_date_time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1date_1time_1csharp_1raw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->date_time_csharp_raw();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1max_1intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->max_intensity(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1focus_1score(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::extraction_metric const *)arg1)->focus_score(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1max_1intensity_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::ushort_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->max_intensity_values();
  *(illumina::interop::model::metrics::extraction_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1focus_1scores(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::float_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->focus_scores();
  *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::extraction_metric const *)arg1)->channel_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1focusScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::extraction_metric const *)arg1)->focusScore(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1dateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ulong_t)((illumina::interop::model::metrics::extraction_metric const *)arg1)->dateTime();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1focusScores(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metrics::extraction_metric::float_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::extraction_metric::float_array_t *) &((illumina::interop::model::metrics::extraction_metric const *)arg1)->focusScores();
  *(illumina::interop::model::metrics::extraction_metric::float_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1date_1time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ulong_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->date_time(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1is_1any_1p90_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::extraction_metric const *)arg1)->is_any_p90_zero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::extraction_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1extraction_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::extraction_metric *arg1 = (illumina::interop::model::metrics::extraction_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::extraction_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1MAX_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::image_metric_header::MAX_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1image_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::image_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::image_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header *)new illumina::interop::model::metrics::image_metric_header(arg1);
  *(illumina::interop::model::metrics::image_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1channelCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  illumina::interop::model::metrics::image_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header::ushort_t)((illumina::interop::model::metrics::image_metric_header const *)arg1)->channelCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1channel_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  illumina::interop::model::metrics::image_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric_header::ushort_t)((illumina::interop::model::metrics::image_metric_header const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1channel_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->channel_count(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::image_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::image_metric_header::default_header();
  *(illumina::interop::model::metrics::image_metric_header **)&jresult = new illumina::interop::model::metrics::image_metric_header((const illumina::interop::model::metrics::image_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1image_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::image_metric_header *arg1 = (illumina::interop::model::metrics::image_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::image_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1MAX_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::image_metric::MAX_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::image_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::image_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1image_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric();
  *(illumina::interop::model::metrics::image_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1image_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::image_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric((illumina::interop::model::metrics::image_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::image_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1image_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *arg5 = 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *arg6 = 0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::image_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  arg6 = *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::image_metric::ushort_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::image_metric::ushort_array_t const &)*arg5,(illumina::interop::model::metrics::image_metric::ushort_array_t const &)*arg6);
  *(illumina::interop::model::metrics::image_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1image_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jshortArray jarg5, jshortArray jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::ushort_t arg4 ;
  illumina::interop::model::metrics::image_metric::ushort_pointer_t arg5 = (illumina::interop::model::metrics::image_metric::ushort_pointer_t) (illumina::interop::model::metrics::image_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::image_metric::ushort_pointer_t arg6 = (illumina::interop::model::metrics::image_metric::ushort_pointer_t) (illumina::interop::model::metrics::image_metric::ushort_pointer_t)0 ;
  illumina::interop::model::metrics::image_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::ushort_t)jarg4; 
  
  arg5 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg5), 0));
  
  
  arg6 = reinterpret_cast<unsigned short*>(jenv->GetShortArrayElements(reinterpret_cast<jshortArray>(jarg6), 0));
  
  result = (illumina::interop::model::metrics::image_metric *)new illumina::interop::model::metrics::image_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::metrics::image_metric **)&jresult = result; 
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg6), reinterpret_cast<jshort*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg5), reinterpret_cast<jshort*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseShortArrayElements(reinterpret_cast<jshortArray>(jarg6), reinterpret_cast<jshort*>(arg6), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1min_1contrast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->min_contrast(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1max_1contrast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->max_contrast(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1min_1contrast_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->min_contrast_array();
  *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1max_1contrast_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->max_contrast_array();
  *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1is_1any_1channel_1blank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::image_metric const *)arg1)->is_any_channel_blank();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1minContrast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->minContrast(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1maxContrast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->maxContrast(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1minContrast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->minContrast();
  *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1maxContrast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metrics::image_metric::ushort_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::image_metric::ushort_array_t *) &((illumina::interop::model::metrics::image_metric const *)arg1)->maxContrast();
  *(illumina::interop::model::metrics::image_metric::ushort_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1channelCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::ushort_t)((illumina::interop::model::metrics::image_metric const *)arg1)->channelCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::image_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1image_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::image_metric *arg1 = (illumina::interop::model::metrics::image_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::image_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg2 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg3 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg2; 
  arg3 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg3; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg2; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1,arg2);
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type arg1 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::q_score_bin::bin_type)jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin(arg1);
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1bin_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_score_bin *)new illumina::interop::model::metrics::q_score_bin();
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_bin **)&jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->lower();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1upper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_bin **)&jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->upper();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1bin_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  illumina::interop::model::metrics::q_score_bin::bin_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_bin **)&jarg1; 
  result = (illumina::interop::model::metrics::q_score_bin::bin_type)((illumina::interop::model::metrics::q_score_bin const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1score_1bin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_score_bin *arg1 = (illumina::interop::model::metrics::q_score_bin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_score_bin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1MAX_1Q_1BINS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_score_header::MAX_Q_BINS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_score_header *)new illumina::interop::model::metrics::q_score_header();
  *(illumina::interop::model::metrics::q_score_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1score_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_score_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_score_header *)new illumina::interop::model::metrics::q_score_header((illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const &)*arg1);
  *(illumina::interop::model::metrics::q_score_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1bin_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metrics::q_score_bin *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->bin_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1get_1bins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  result = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->get_bins();
  *(illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1bins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  result = (illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *) &(arg1)->bins();
  *(illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1bin_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->bin_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1q_1val_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->q_val_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1index_1for_1q_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->index_for_q_value(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1binCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::q_score_header const *)arg1)->binCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::q_score_header::default_header();
  *(illumina::interop::model::metrics::q_score_header **)&jresult = new illumina::interop::model::metrics::q_score_header((const illumina::interop::model::metrics::q_score_header &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1binAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_score_bin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::q_score_bin *) &((illumina::interop::model::metrics::q_score_header const *)arg1)->binAt(arg2);
  *(illumina::interop::model::metrics::q_score_bin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1score_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_score_header *arg1 = (illumina::interop::model::metrics::q_score_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_score_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1MAX_1Q_1BINS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_metric::MAX_Q_BINS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric();
  *(illumina::interop::model::metrics::q_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric((illumina::interop::model::metrics::q_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::q_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg4 = 0 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::q_metric::uint32_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::uint32_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg4);
  *(illumina::interop::model::metrics::q_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint_pointer_t arg4 = (illumina::interop::model::metrics::q_metric::uint_pointer_t) (illumina::interop::model::metrics::q_metric::uint_pointer_t)0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  illumina::interop::model::metrics::q_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  
  arg4 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg4), 0));
  
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  result = (illumina::interop::model::metrics::q_metric *)new illumina::interop::model::metrics::q_metric(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::metrics::q_metric **)&jresult = result; 
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg4), reinterpret_cast<jint*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg4), reinterpret_cast<jint*>(arg4), JNI_ABORT);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::q_metric::uint32_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::uint32_vector const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1qscore_1hist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->qscore_hist(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1qscore_1hist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::q_metric::uint32_vector *) &((illumina::interop::model::metrics::q_metric const *)arg1)->qscore_hist();
  *(illumina::interop::model::metrics::q_metric::uint32_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::q_metric const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1sum_1qscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->sum_qscore();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1sum_1qscore_1cumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->sum_qscore_cumulative();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1total_1over_1qscore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = *(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1total_1over_1qscore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1total_1over_1qscore_1cumulative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore_cumulative(arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1percent_1over_1qscore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1percent_1over_1qscore_1cumulative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore_cumulative(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1total_1over_1qscore_1cumulative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = *(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (::uint64_t)((illumina::interop::model::metrics::q_metric const *)arg1)->total_over_qscore_cumulative(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1percent_1over_1qscore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = *(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1percent_1over_1qscore_1cumulative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg3 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = *(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::q_metric const *)arg1)->percent_over_qscore_cumulative(arg2,(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1median_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::qscore_bin_vector_type *arg2 = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::q_metric::qscore_bin_vector_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->median((illumina::interop::model::metrics::q_metric::qscore_bin_vector_type const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1median_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->median();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1is_1cumulative_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::q_metric const *)arg1)->is_cumulative_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1accumulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::q_metric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric const & reference is null");
    return ;
  } 
  (arg1)->accumulate((illumina::interop::model::metrics::q_metric const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1compress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::header_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::q_metric::header_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::header_type const & reference is null");
    return ;
  } 
  (arg1)->compress((illumina::interop::model::metrics::q_metric::header_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1qscoreHist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_metric const *)arg1)->qscoreHist(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1qscoreHist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::q_metric::uint32_vector *) &((illumina::interop::model::metrics::q_metric const *)arg1)->qscoreHist();
  *(illumina::interop::model::metrics::q_metric::uint32_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::q_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_metric *arg1 = (illumina::interop::model::metrics::q_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1header(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  illumina::interop::model::metrics::tile_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::metrics::tile_metric_header *)new illumina::interop::model::metrics::tile_metric_header(arg1);
  *(illumina::interop::model::metrics::tile_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1header_1density(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric_header **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric_header const *)arg1)->density();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::tile_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::tile_metric_header::default_header();
  *(illumina::interop::model::metrics::tile_metric_header **)&jresult = new illumina::interop::model::metrics::tile_metric_header((const illumina::interop::model::metrics::tile_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1tile_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::tile_metric_header *arg1 = (illumina::interop::model::metrics::tile_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::tile_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::metrics::read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  float arg2 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1,arg2);
  *(illumina::interop::model::metrics::read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric::uint_t arg1 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::read_metric::uint_t)jarg1; 
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric(arg1);
  *(illumina::interop::model::metrics::read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1read_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::read_metric *)new illumina::interop::model::metrics::read_metric();
  *(illumina::interop::model::metrics::read_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  illumina::interop::model::metrics::read_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::read_metric::uint_t)((illumina::interop::model::metrics::read_metric const *)arg1)->read();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1aligned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_aligned();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1phasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_phasing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1prephasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::read_metric const *)arg1)->percent_prephasing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1aligned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_aligned(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1phasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_phasing(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_read_1metric_1percent_1prephasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_prephasing(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1read_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::read_metric *arg1 = (illumina::interop::model::metrics::read_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::read_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::tile_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::tile_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric();
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg7 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(illumina::interop::model::metrics::tile_metric::read_metric_vector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg7);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg3 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = *(illumina::interop::model::metrics::tile_metric::read_metric_vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg3);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg2 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::metrics::tile_metric::read_metric_vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric const &)*arg1,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg2);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric((illumina::interop::model::metrics::tile_metric const &)*arg1);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *arg5 = 0 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(illumina::interop::model::metrics::tile_metric::read_metric_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::tile_metric::read_metric_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4,(illumina::interop::model::metrics::tile_metric::read_metric_vector const &)*arg5);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1tile_1metric_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::metrics::tile_metric *)new illumina::interop::model::metrics::tile_metric(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::metrics::tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1density(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1density_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_k();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1density_1pf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1density_1pf_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_density_pf_k();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_k();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count_1m(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_m();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count_1pf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count_1pf_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf_k();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1cluster_1count_1pf_1m(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->cluster_count_pf_m();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1pf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1read_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  illumina::interop::model::metrics::tile_metric::read_metric_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::tile_metric::read_metric_vector *) &((illumina::interop::model::metrics::tile_metric const *)arg1)->read_metrics();
  *(illumina::interop::model::metrics::tile_metric::read_metric_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1aligned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_aligned(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1phasing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_phasing(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1prephasing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_prephasing(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1aligned_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_aligned_at(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1phasing_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_phasing_at(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1percent_1prephasing_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->percent_prephasing_at(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1read_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::tile_metric const *)arg1)->read_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1is_1dead_1tile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::tile_metric const *)arg1)->is_dead_tile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1update_1phasing_1if_1missing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->update_phasing_if_missing(arg2,arg3,arg4);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1clusterDensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterDensity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1clusterDensityPf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterDensityPf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1clusterCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterCount();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1clusterCountPf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::tile_metric const *)arg1)->clusterCountPf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::tile_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1tile_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::tile_metric *arg1 = (illumina::interop::model::metrics::tile_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::tile_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::index_info *)new illumina::interop::model::metrics::index_info();
  *(illumina::interop::model::metrics::index_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ::uint64_t arg4 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metrics::index_info *)new illumina::interop::model::metrics::index_info((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(illumina::interop::model::metrics::index_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1index_1seq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->index_seq();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1sample_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->sample_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1sample_1proj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::metrics::index_info const *)arg1)->sample_proj();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = (::uint64_t)((illumina::interop::model::metrics::index_info const *)arg1)->cluster_count();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1is_1dual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::index_info const *)arg1)->is_dual();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1index1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->index1();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1index2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->index2();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1info_1unique_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  result = ((illumina::interop::model::metrics::index_info const *)arg1)->unique_id();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1index_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::index_info *arg1 = (illumina::interop::model::metrics::index_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::index_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1metric_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::index_metric_header *)new illumina::interop::model::metrics::index_metric_header();
  *(illumina::interop::model::metrics::index_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1header_1index_1order_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric_header **)&jarg1; 
  result = (std::vector< std::string > *) &((illumina::interop::model::metrics::index_metric_header const *)arg1)->index_order();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1header_1index_1order_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::index_metric_header **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->index_order((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::index_metric_header::default_header();
  *(illumina::interop::model::metrics::index_metric_header **)&jresult = new illumina::interop::model::metrics::index_metric_header((const illumina::interop::model::metrics::index_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1index_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::index_metric_header *arg1 = (illumina::interop::model::metrics::index_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::index_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::index_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::index_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric();
  *(illumina::interop::model::metrics::index_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::index_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric((illumina::interop::model::metrics::index_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::index_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1index_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::index_metric::index_array_t *arg4 = 0 ;
  illumina::interop::model::metrics::index_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::index_metric::index_array_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::index_metric::index_array_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::index_metric *)new illumina::interop::model::metrics::index_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::index_metric::index_array_t const &)*arg4);
  *(illumina::interop::model::metrics::index_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::index_metric const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1indices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metrics::index_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metrics::index_info *) &((illumina::interop::model::metrics::index_metric const *)arg1)->indices(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metrics::index_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1indices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  illumina::interop::model::metrics::index_metric::index_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::index_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::index_metric::index_array_t *) &((illumina::interop::model::metrics::index_metric const *)arg1)->indices();
  *(illumina::interop::model::metrics::index_metric::index_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::index_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1index_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::index_metric *arg1 = (illumina::interop::model::metrics::index_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::index_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1collapsed_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_collapsed_header *)new illumina::interop::model::metrics::q_collapsed_header();
  *(illumina::interop::model::metrics::q_collapsed_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1collapsed_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_collapsed_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_collapsed_header *)new illumina::interop::model::metrics::q_collapsed_header((illumina::interop::model::metrics::q_score_header::qscore_bin_vector_type const &)*arg1);
  *(illumina::interop::model::metrics::q_collapsed_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_header result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::q_collapsed_header::default_header();
  *(illumina::interop::model::metrics::q_collapsed_header **)&jresult = new illumina::interop::model::metrics::q_collapsed_header((const illumina::interop::model::metrics::q_collapsed_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::q_collapsed_header *arg1 = (illumina::interop::model::metrics::q_collapsed_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1collapsed_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_collapsed_header *arg1 = (illumina::interop::model::metrics::q_collapsed_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_collapsed_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_collapsed_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1collapsed_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric();
  *(illumina::interop::model::metrics::q_collapsed_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1collapsed_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_collapsed_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric((illumina::interop::model::metrics::q_collapsed_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::q_collapsed_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1collapsed_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg5 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg6 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg7 ;
  illumina::interop::model::metrics::q_collapsed_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg5; 
  arg6 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg6; 
  arg7 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::q_collapsed_metric *)new illumina::interop::model::metrics::q_collapsed_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::metrics::q_collapsed_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1q20(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->q20();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1q30(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->q30();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1total(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->total();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1median_1qscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->median_qscore();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1median_1qscore_1flt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->median_qscore_flt();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1cumulative_1q20(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_q20();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1cumulative_1q30(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_q30();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1cumulative_1total(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::q_collapsed_metric::ulong_t)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_total();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1percent_1over_1q20(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->percent_over_q20();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1percent_1over_1q30(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->percent_over_q30();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1cumulative_1percent_1over_1q20(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_percent_over_q20();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1cumulative_1percent_1over_1q30(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::q_collapsed_metric const *)arg1)->cumulative_percent_over_q30();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1accumulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  illumina::interop::model::metrics::q_collapsed_metric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_collapsed_metric const & reference is null");
    return ;
  } 
  (arg1)->accumulate((illumina::interop::model::metrics::q_collapsed_metric const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::q_collapsed_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::q_collapsed_metric::suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1collapsed_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_collapsed_metric *arg1 = (illumina::interop::model::metrics::q_collapsed_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1by_1lane_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_by_lane_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1by_1lane_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_by_lane_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1by_1lane_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric();
  *(illumina::interop::model::metrics::q_by_lane_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1by_1lane_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric((illumina::interop::model::metrics::q_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::q_by_lane_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1by_1lane_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::q_metric::uint32_vector *arg4 = 0 ;
  illumina::interop::model::metrics::q_by_lane_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::q_metric::uint32_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric::uint32_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_by_lane_metric *)new illumina::interop::model::metrics::q_by_lane_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::q_metric::uint32_vector const &)*arg4);
  *(illumina::interop::model::metrics::q_by_lane_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1by_1lane_1metric_1accumulate_1by_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::q_by_lane_metric *arg1 = (illumina::interop::model::metrics::q_by_lane_metric *) 0 ;
  illumina::interop::model::metrics::q_metric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::q_by_lane_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::q_metric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_metric const & reference is null");
    return ;
  } 
  (arg1)->accumulate_by_lane((illumina::interop::model::metrics::q_metric const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1by_1lane_1metric_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::q_by_lane_metric::suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1by_1lane_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_by_lane_metric *arg1 = (illumina::interop::model::metrics::q_by_lane_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_by_lane_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1corrected_1intensity_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1corrected_1intensity_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1corrected_1intensity_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1corrected_1intensity_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1corrected_1intensity_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1corrected_1intensity_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1corrected_1intensity_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >();
  *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1corrected_1intensity_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *)new std::vector< illumina::interop::model::metrics::corrected_intensity_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::corrected_intensity_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1corrected_1intensity_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::corrected_intensity_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_corrected_intensity_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::corrected_intensity_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1corrected_1intensity_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *arg1 = (std::vector< illumina::interop::model::metrics::corrected_intensity_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1error_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1error_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1error_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1error_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1error_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1error_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1error_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::error_metric > *)new std::vector< illumina::interop::model::metrics::error_metric >();
  *(std::vector< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1error_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::error_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::error_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::error_metric > *)new std::vector< illumina::interop::model::metrics::error_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::error_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::error_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::error_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::error_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::error_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::error_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::error_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::error_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::error_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::error_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::error_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::error_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1error_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::error_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::error_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::error_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_error_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::error_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1error_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::error_metric > *arg1 = (std::vector< illumina::interop::model::metrics::error_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::error_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extraction_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extraction_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extraction_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extraction_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extraction_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1extraction_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1extraction_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)new std::vector< illumina::interop::model::metrics::extraction_metric >();
  *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1extraction_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::extraction_metric > *)new std::vector< illumina::interop::model::metrics::extraction_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extraction_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extraction_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extraction_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::extraction_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::extraction_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::extraction_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::extraction_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extraction_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::extraction_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extraction_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extraction_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::extraction_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::extraction_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extraction_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::extraction_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1extraction_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::extraction_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extraction_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::extraction_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1image_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1image_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1image_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1image_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1image_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1image_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1image_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::image_metric > *)new std::vector< illumina::interop::model::metrics::image_metric >();
  *(std::vector< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1image_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::image_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::image_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::image_metric > *)new std::vector< illumina::interop::model::metrics::image_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::image_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::image_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::image_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::image_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::image_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::image_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::image_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::image_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::image_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::image_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::image_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::image_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1image_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::image_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::image_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::image_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_image_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::image_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1image_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::image_metric > *arg1 = (std::vector< illumina::interop::model::metrics::image_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::image_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1q_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::q_metric > *)new std::vector< illumina::interop::model::metrics::q_metric >();
  *(std::vector< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::q_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::q_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::q_metric > *)new std::vector< illumina::interop::model::metrics::q_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::q_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::q_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::q_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::q_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::q_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::q_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1q_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::q_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1tile_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1tile_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1tile_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1tile_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1tile_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1tile_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1tile_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::tile_metric > *)new std::vector< illumina::interop::model::metrics::tile_metric >();
  *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1tile_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::tile_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::tile_metric > *)new std::vector< illumina::interop::model::metrics::tile_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::tile_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::tile_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::tile_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::tile_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::tile_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::tile_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::tile_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::tile_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::tile_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1tile_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::tile_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::tile_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::tile_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_tile_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1tile_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::tile_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1index_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1index_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1index_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1index_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1index_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1index_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1index_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::index_metric > *)new std::vector< illumina::interop::model::metrics::index_metric >();
  *(std::vector< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1index_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::index_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::index_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::index_metric > *)new std::vector< illumina::interop::model::metrics::index_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::index_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::index_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::index_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::index_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::index_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::index_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::index_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::index_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::index_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::index_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1index_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::index_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::index_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::index_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_index_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::index_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1index_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::index_metric > *arg1 = (std::vector< illumina::interop::model::metrics::index_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::index_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1collapsed_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1collapsed_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1collapsed_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1collapsed_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1collapsed_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1q_1collapsed_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1collapsed_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)new std::vector< illumina::interop::model::metrics::q_collapsed_metric >();
  *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1collapsed_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *)new std::vector< illumina::interop::model::metrics::q_collapsed_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::q_collapsed_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1collapsed_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_collapsed_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_collapsed_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::q_collapsed_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1q_1collapsed_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::q_collapsed_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_collapsed_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1by_1lane_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1by_1lane_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1by_1lane_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1by_1lane_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1by_1lane_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1q_1by_1lane_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1by_1lane_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)new std::vector< illumina::interop::model::metrics::q_by_lane_metric >();
  *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1by_1lane_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *)new std::vector< illumina::interop::model::metrics::q_by_lane_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::q_by_lane_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1by_1lane_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_by_lane_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_by_lane_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::q_by_lane_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1q_1by_1lane_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::q_by_lane_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_by_lane_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1point2d_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::point2d > *)new std::vector< illumina::interop::model::metrics::point2d >();
  *(std::vector< illumina::interop::model::metrics::point2d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1point2d_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::point2d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::point2d >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::point2d > *)new std::vector< illumina::interop::model::metrics::point2d >(arg1);
  *(std::vector< illumina::interop::model::metrics::point2d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::point2d > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::point2d > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::point2d >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::point2d > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  std::vector< illumina::interop::model::metrics::point2d >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::point2d >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::point2d >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::point2d >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::point2d >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::point2d >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::point2d >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_point2d_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::point2d >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::point2d >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::point2d >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_point2d_Sg__set(arg1,arg2,(illumina::interop::model::metrics::point2d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1point2d_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::point2d > *arg1 = (std::vector< illumina::interop::model::metrics::point2d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::point2d > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)new std::map< uint64_t,illumina::interop::model::metrics::event_metric >();
  *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned long,illumina::interop::model::metrics::event_metric > *arg1 = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned long,illumina::interop::model::metrics::event_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< unsigned long,illumina::interop::model::metrics::event_metric > const & reference is null");
    return 0;
  } 
  result = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *)new std::map< uint64_t,illumina::interop::model::metrics::event_metric >((std::map< unsigned long,illumina::interop::model::metrics::event_metric > const &)*arg1);
  *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (unsigned int)((std::map< uint64_t,illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (bool)((std::map< uint64_t,illumina::interop::model::metrics::event_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metrics::event_metric *) &std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__get(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  illumina::interop::model::metrics::event_metric *arg3 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metrics::event_metric **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::event_metric const & reference is null");
    return ;
  } 
  std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__set(arg1,(unsigned long const &)*arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__del(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)std_map_Sl_uint64_t_Sc_illumina_interop_model_metrics_event_metric_Sg__has_key(arg1,(unsigned long const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1event_1metric_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< uint64_t,illumina::interop::model::metrics::event_metric > *arg1 = (std::map< uint64_t,illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< uint64_t,illumina::interop::model::metrics::event_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::alignment_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::alignment_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1alignment_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::alignment_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::alignment_metric *)new illumina::interop::model::metrics::alignment_metric();
  *(illumina::interop::model::metrics::alignment_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1alignment_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::alignment_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::alignment_metric *)new illumina::interop::model::metrics::alignment_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::alignment_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1confusion_1matrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  illumina::interop::model::metrics::alignment_metric::confusion_matrix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::alignment_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::alignment_metric::confusion_matrix_t *) &((illumina::interop::model::metrics::alignment_metric const *)arg1)->confusion_matrix();
  *(illumina::interop::model::metrics::alignment_metric::confusion_matrix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::alignment_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::alignment_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1total_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::alignment_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::alignment_metric const *)arg1)->total_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::alignment_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1alignment_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::alignment_metric *arg1 = (illumina::interop::model::metrics::alignment_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::alignment_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1CENTROIDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header::info_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::basecalling_metric_header::info_type)illumina::interop::model::metrics::basecalling_metric_header::CENTROIDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1COVARIANCES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header::info_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::basecalling_metric_header::info_type)illumina::interop::model::metrics::basecalling_metric_header::COVARIANCES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1WEIGHTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header::info_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::basecalling_metric_header::info_type)illumina::interop::model::metrics::basecalling_metric_header::WEIGHTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1DETERMINANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header::info_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::basecalling_metric_header::info_type)illumina::interop::model::metrics::basecalling_metric_header::DETERMINANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1header(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  illumina::interop::model::metrics::basecalling_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric_header *)new illumina::interop::model::metrics::basecalling_metric_header(arg1);
  *(illumina::interop::model::metrics::basecalling_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1info_1level(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  result = (uint8_t)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->info_level();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1has_1covariances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_covariances();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1has_1weights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_weights();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1has_1determinant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::basecalling_metric_header const *)arg1)->has_determinant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::basecalling_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::basecalling_metric_header::default_header();
  *(illumina::interop::model::metrics::basecalling_metric_header **)&jresult = new illumina::interop::model::metrics::basecalling_metric_header((const illumina::interop::model::metrics::basecalling_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1basecalling_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::basecalling_metric_header *arg1 = (illumina::interop::model::metrics::basecalling_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::basecalling_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1DIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::basecalling_metric::DIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::basecalling_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric();
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric((illumina::interop::model::metrics::basecalling_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jfloat jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  float arg7 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg6 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,arg7);
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg6 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6);
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg5);
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1basecalling_1metric_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::basecalling_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::basecalling_metric *)new illumina::interop::model::metrics::basecalling_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg4);
  *(illumina::interop::model::metrics::basecalling_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jfloat jarg8) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg7 = 0 ;
  float arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::point2d_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & reference is null");
    return ;
  } 
  arg6 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return ;
  } 
  arg7 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return ;
  } 
  arg8 = (float)jarg8; 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::point2d_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & reference is null");
    return ;
  } 
  arg6 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return ;
  } 
  arg7 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg7);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::point2d_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & reference is null");
    return ;
  } 
  arg6 = *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::float_vector const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5,(illumina::interop::model::metrics::basecalling_metric::float_vector const &)*arg6);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg4 ;
  illumina::interop::model::metrics::basecalling_metric::point2d_vector *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg4; 
  arg5 = *(illumina::interop::model::metrics::basecalling_metric::point2d_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::basecalling_metric::point2d_vector const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::basecalling_metric::point2d_vector const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1centroids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->centroids();
  *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1covariances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->covariances();
  *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1weights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  illumina::interop::model::metrics::basecalling_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::basecalling_metric::float_vector *) &((illumina::interop::model::metrics::basecalling_metric const *)arg1)->weights();
  *(illumina::interop::model::metrics::basecalling_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1mean_1determinant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->mean_determinant();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1radius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->radius(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::basecalling_metric const *)arg1)->area();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::basecalling_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1basecalling_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::basecalling_metric *arg1 = (illumina::interop::model::metrics::basecalling_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1color_1matrix_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::color_matrix_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::color_matrix_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::color_matrix_metric_header::ushort_t)jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric_header *)new illumina::interop::model::metrics::color_matrix_metric_header(arg1);
  *(illumina::interop::model::metrics::color_matrix_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1header_1number_1of_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  illumina::interop::model::metrics::color_matrix_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric_header::ushort_t)((illumina::interop::model::metrics::color_matrix_metric_header const *)arg1)->number_of_entries();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::color_matrix_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::color_matrix_metric_header::default_header();
  *(illumina::interop::model::metrics::color_matrix_metric_header **)&jresult = new illumina::interop::model::metrics::color_matrix_metric_header((const illumina::interop::model::metrics::color_matrix_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1color_1matrix_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::color_matrix_metric_header *arg1 = (illumina::interop::model::metrics::color_matrix_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::color_matrix_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::color_matrix_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1color_1matrix_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::color_matrix_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::color_matrix_metric *)new illumina::interop::model::metrics::color_matrix_metric();
  *(illumina::interop::model::metrics::color_matrix_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1color_1matrix_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::color_matrix_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::color_matrix_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::color_matrix_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::color_matrix_metric *)new illumina::interop::model::metrics::color_matrix_metric((illumina::interop::model::metrics::color_matrix_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::color_matrix_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1color_1matrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::color_matrix_metric *arg1 = (illumina::interop::model::metrics::color_matrix_metric *) 0 ;
  illumina::interop::model::metrics::color_matrix_metric::color_matrix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::color_matrix_metric::color_matrix_t *) &((illumina::interop::model::metrics::color_matrix_metric const *)arg1)->color_matrix();
  *(illumina::interop::model::metrics::color_matrix_metric::color_matrix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::color_matrix_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1color_1matrix_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::color_matrix_metric *arg1 = (illumina::interop::model::metrics::color_matrix_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::color_matrix_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1distortion_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  illumina::interop::constants::distortion_curve_type arg5 ;
  illumina::interop::model::metrics::distortion_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::constants::distortion_curve_type)jarg5; 
  result = (illumina::interop::model::metrics::distortion_metric_header *)new illumina::interop::model::metrics::distortion_metric_header((std::vector< size_t > const &)*arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::metrics::distortion_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->channel_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1curve_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->curve_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1coefficient_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->coefficient_count(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  illumina::interop::constants::distortion_curve_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = (illumina::interop::constants::distortion_curve_type)((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1image_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->image_width();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1image_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->image_height();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1total_1number_1of_1coefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->total_number_of_coefficients();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = ((illumina::interop::model::metrics::distortion_metric_header const *)arg1)->index(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::distortion_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::distortion_metric_header::default_header();
  *(illumina::interop::model::metrics::distortion_metric_header **)&jresult = new illumina::interop::model::metrics::distortion_metric_header((const illumina::interop::model::metrics::distortion_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1distortion_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::distortion_metric_header *arg1 = (illumina::interop::model::metrics::distortion_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::distortion_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::distortion_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1distortion_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::distortion_metric *)new illumina::interop::model::metrics::distortion_metric();
  *(illumina::interop::model::metrics::distortion_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1distortion_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::distortion_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::distortion_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::distortion_metric *)new illumina::interop::model::metrics::distortion_metric((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::distortion_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1coefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::curve_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::distortion_metric::curve_vector_t *) &((illumina::interop::model::metrics::distortion_metric const *)arg1)->coefficients();
  *(illumina::interop::model::metrics::distortion_metric::curve_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1coefficient_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::distortion_metric const *)arg1)->coefficient_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1populate_1coefficients_1for_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  std::vector< float > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::distortion_metric::header_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::distortion_metric::header_type const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return ;
  } 
  ((illumina::interop::model::metrics::distortion_metric const *)arg1)->populate_coefficients_for((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1populate_1coefficients_1for_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloatArray jarg5, jlong jarg6) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::distortion_metric::header_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::distortion_metric::header_type const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  ((illumina::interop::model::metrics::distortion_metric const *)arg1)->populate_coefficients_for((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,arg5,arg6);
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1absolute_1distortion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  illumina::interop::model::metrics::distortion_metric::header_type *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metrics::distortion_metric::header_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::distortion_metric::header_type const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (float)((illumina::interop::model::metrics::distortion_metric const *)arg1)->absolute_distortion((illumina::interop::model::metrics::distortion_metric::header_type const &)*arg2,arg3,arg4,arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::distortion_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1distortion_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::distortion_metric *arg1 = (illumina::interop::model::metrics::distortion_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::distortion_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::dynamic_phasing_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::dynamic_phasing_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1dynamic_1phasing_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric();
  *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1dynamic_1phasing_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_read_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_read_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_read_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric((illumina::interop::model::metric_base::base_read_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1dynamic_1phasing_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::metrics::dynamic_phasing_metric *)new illumina::interop::model::metrics::dynamic_phasing_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1phasing_1slope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->phasing_slope();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1prephasing_1slope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->prephasing_slope();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1phasing_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->phasing_offset();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1prephasing_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::dynamic_phasing_metric const *)arg1)->prephasing_offset();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::dynamic_phasing_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1dynamic_1phasing_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::dynamic_phasing_metric *arg1 = (illumina::interop::model::metrics::dynamic_phasing_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::event_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::event_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric();
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_event_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_event_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_event_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric((illumina::interop::model::metric_base::base_event_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg8 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg9 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg8) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg8));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg8), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg8 = 0;
    if (sz > 0) {
      arg8 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg8 = (arg8 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg9) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg9));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg9), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg9 = 0;
    if (sz > 0) {
      arg9 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg9 = (arg9 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg8 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg8) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg8));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg8), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg8 = 0;
    if (sz > 0) {
      arg8 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg8 = (arg8 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1event_1metric_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg1 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg4 ;
  illumina::interop::constants::event_type arg5 ;
  double arg6 ;
  illumina::interop::model::metrics::event_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::event_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (illumina::interop::constants::event_type)jarg5; 
  arg6 = (double)jarg6; 
  result = (illumina::interop::model::metrics::event_metric *)new illumina::interop::model::metrics::event_metric(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::metrics::event_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  illumina::interop::model::metrics::event_metric::uint_t arg4 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg5 ;
  illumina::interop::constants::event_type arg6 ;
  illumina::interop::model::metrics::event_metric::uint_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metrics::event_metric::uint_t)jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg5));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg5), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = (illumina::interop::constants::event_type)jarg6; 
  arg7 = (illumina::interop::model::metrics::event_metric::uint_t)jarg7; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jlong jarg8, jdouble jarg9, jlong jarg10) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg2 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg3 ;
  illumina::interop::model::metrics::event_metric::uint_t arg4 ;
  illumina::interop::model::metrics::event_metric::uint_t arg5 ;
  illumina::interop::model::metrics::event_metric::uint_t arg6 ;
  illumina::interop::constants::event_type arg7 ;
  illumina::interop::model::metrics::event_metric::uint_t arg8 ;
  double arg9 ;
  illumina::interop::model::metrics::event_metric::ulong_t arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (illumina::interop::model::metrics::event_metric::uint_t)jarg4; 
  arg5 = (illumina::interop::model::metrics::event_metric::uint_t)jarg5; 
  arg6 = (illumina::interop::model::metrics::event_metric::uint_t)jarg6; 
  arg7 = (illumina::interop::constants::event_type)jarg7; 
  arg8 = (illumina::interop::model::metrics::event_metric::uint_t)jarg8; 
  arg9 = (double)jarg9; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg10) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg10));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg10), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg10 = 0;
    if (sz > 0) {
      arg10 = (illumina::interop::model::metrics::event_metric::ulong_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg10 = (arg10 << 8) | (illumina::interop::model::metrics::event_metric::ulong_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1set_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t arg2 ;
  illumina::interop::model::metrics::event_metric::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metrics::event_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::event_metric::uint_t)jarg3; 
  (arg1)->set_base(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1create_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t arg4 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::create_id(arg1,arg2,arg3,arg4);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1create_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t arg2 ;
  illumina::interop::model::metric_base::base_metric::id_t arg3 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::create_id(arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1event_1from_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::id_t arg1 ;
  illumina::interop::model::metric_base::base_metric::id_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::metric_base::base_metric::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::metric_base::base_metric::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::metric_base::base_metric::id_t)illumina::interop::model::metrics::event_metric::event_from_id(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1date_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->date_time();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1point_1ticks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->point_ticks();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1date_1time_1csharp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::util::csharp_date_time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (illumina::interop::util::csharp_date_time *) &((illumina::interop::model::metrics::event_metric const *)arg1)->date_time_csharp();
  *(illumina::interop::util::csharp_date_time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1event_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::event_metric::uint_t)((illumina::interop::model::metrics::event_metric const *)arg1)->event_value();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1elapsed_1ms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (double)((illumina::interop::model::metrics::event_metric const *)arg1)->elapsed_ms();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1elapsed_1ticks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  illumina::interop::model::metrics::event_metric::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::event_metric::ulong_t)((illumina::interop::model::metrics::event_metric const *)arg1)->elapsed_ticks();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::event_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1event_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::event_metric *arg1 = (illumina::interop::model::metrics::event_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::event_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extended_tile_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::extended_tile_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extended_1tile_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric();
  *(illumina::interop::model::metrics::extended_tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extended_1tile_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric((illumina::interop::model::metric_base::base_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::extended_tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extended_1tile_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::point2d *arg4 = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(illumina::interop::model::metrics::point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::point2d const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::point2d const &)*arg4);
  *(illumina::interop::model::metrics::extended_tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1extended_1tile_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::extended_tile_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::extended_tile_metric *)new illumina::interop::model::metrics::extended_tile_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::extended_tile_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  illumina::interop::model::metrics::point2d *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(illumina::interop::model::metrics::point2d **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::point2d const & reference is null");
    return ;
  } 
  (arg1)->set(arg2,arg3,arg4,(illumina::interop::model::metrics::point2d const &)*arg5);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1cluster_1count_1occupied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->cluster_count_occupied();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1cluster_1count_1occupied_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->cluster_count_occupied_k();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1percent_1occupied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->percent_occupied(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1percent_1occupied_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return 0;
  } 
  result = (float)((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->percent_occupied_lookup((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1upper_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  illumina::interop::model::metrics::point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::point2d *) &((illumina::interop::model::metrics::extended_tile_metric const *)arg1)->upper_left();
  *(illumina::interop::model::metrics::point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::extended_tile_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1extended_1tile_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::extended_tile_metric *arg1 = (illumina::interop::model::metrics::extended_tile_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1fwhm_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg2 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t arg3 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)jarg3; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header *)new illumina::interop::model::metrics::fwhm_grid_metric_header(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1num_1bins_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->num_bins_x();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1num_1bins_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->num_bins_y();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric_header::ushort_t)((illumina::interop::model::metrics::fwhm_grid_metric_header const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::fwhm_grid_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::fwhm_grid_metric_header::default_header();
  *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jresult = new illumina::interop::model::metrics::fwhm_grid_metric_header((const illumina::interop::model::metrics::fwhm_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1fwhm_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::fwhm_grid_metric_header *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::fwhm_grid_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::fwhm_grid_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1fwhm_1grid_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric();
  *(illumina::interop::model::metrics::fwhm_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1fwhm_1grid_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::fwhm_grid_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric((illumina::interop::model::metrics::fwhm_grid_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::fwhm_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1fwhm_1grid_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  illumina::interop::model::metrics::fwhm_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (illumina::interop::model::metrics::fwhm_grid_metric *)new illumina::interop::model::metrics::fwhm_grid_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::fwhm_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1focus_1score(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = (float)((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->focus_score(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->channel_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1num_1bins_1row(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->num_bins_row();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1num_1bins_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::fwhm_grid_metric const *)arg1)->num_bins_col();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::fwhm_grid_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1fwhm_1grid_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::fwhm_grid_metric *arg1 = (illumina::interop::model::metrics::fwhm_grid_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1pf_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t arg2 ;
  float arg3 ;
  illumina::interop::model::metrics::pf_grid_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header *)new illumina::interop::model::metrics::pf_grid_metric_header(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::pf_grid_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1num_1bins_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->num_bins_x();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1num_1bins_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::pf_grid_metric_header::ushort_t)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->num_bins_y();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1subtile_1area_1in_1mm2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric_header const *)arg1)->subtile_area_in_mm2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::pf_grid_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::pf_grid_metric_header::default_header();
  *(illumina::interop::model::metrics::pf_grid_metric_header **)&jresult = new illumina::interop::model::metrics::pf_grid_metric_header((const illumina::interop::model::metrics::pf_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1pf_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::pf_grid_metric_header *arg1 = (illumina::interop::model::metrics::pf_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::pf_grid_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::pf_grid_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1pf_1grid_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric();
  *(illumina::interop::model::metrics::pf_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1pf_1grid_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::pf_grid_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric((illumina::interop::model::metrics::pf_grid_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::pf_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1pf_1grid_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::pf_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::pf_grid_metric *)new illumina::interop::model::metrics::pf_grid_metric(arg1,arg2);
  *(illumina::interop::model::metrics::pf_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1raw_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->raw_cluster_count(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1pf_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->pf_cluster_count(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1raw_1cluster_1density_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->raw_cluster_density_k(arg2,arg3,arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1pf_1cluster_1density_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->pf_cluster_density_k(arg2,arg3,arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1percent_1pf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float)((illumina::interop::model::metrics::pf_grid_metric const *)arg1)->percent_pf(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::pf_grid_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1pf_1grid_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::pf_grid_metric *arg1 = (illumina::interop::model::metrics::pf_grid_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::phasing_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::phasing_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1phasing_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric();
  *(illumina::interop::model::metrics::phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1phasing_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1phasing_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::metrics::phasing_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::metrics::phasing_metric *)new illumina::interop::model::metrics::phasing_metric(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::metrics::phasing_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1phasing_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::phasing_metric const *)arg1)->phasing_weight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1prephasing_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::phasing_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::phasing_metric const *)arg1)->prephasing_weight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::phasing_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1phasing_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::phasing_metric *arg1 = (illumina::interop::model::metrics::phasing_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::phasing_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t arg2 ;
  illumina::interop::model::metrics::q_grid_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)jarg2; 
  result = (illumina::interop::model::metrics::q_grid_metric_header *)new illumina::interop::model::metrics::q_grid_metric_header(arg1,arg2);
  *(illumina::interop::model::metrics::q_grid_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1header_1num_1bins_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)((illumina::interop::model::metrics::q_grid_metric_header const *)arg1)->num_bins_x();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1header_1num_1bins_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  illumina::interop::model::metrics::q_grid_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::q_grid_metric_header::ushort_t)((illumina::interop::model::metrics::q_grid_metric_header const *)arg1)->num_bins_y();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::q_grid_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::q_grid_metric_header::default_header();
  *(illumina::interop::model::metrics::q_grid_metric_header **)&jresult = new illumina::interop::model::metrics::q_grid_metric_header((const illumina::interop::model::metrics::q_grid_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1grid_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_grid_metric_header *arg1 = (illumina::interop::model::metrics::q_grid_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_grid_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::q_grid_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1grid_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric();
  *(illumina::interop::model::metrics::q_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1grid_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::q_grid_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric((illumina::interop::model::metrics::q_grid_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::q_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1q_1grid_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::q_grid_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::q_grid_metric *)new illumina::interop::model::metrics::q_grid_metric(arg1,arg2);
  *(illumina::interop::model::metrics::q_grid_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1raw_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->raw_cluster_count(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1q30_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint32_t)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->q30_cluster_count(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1percent_1q30(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::metrics::q_grid_metric const *)arg1)->percent_q30(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::q_grid_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1q_1grid_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::q_grid_metric *arg1 = (illumina::interop::model::metrics::q_grid_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::q_grid_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *arg2 = 0 ;
  illumina::interop::constants::layout_type arg3 ;
  illumina::interop::model::metrics::registration_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg1; 
  arg2 = *(illumina::interop::model::metrics::registration_metric_header::point2d_vector_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::registration_metric_header::point2d_vector_t const & reference is null");
    return 0;
  } 
  arg3 = (illumina::interop::constants::layout_type)jarg3; 
  result = (illumina::interop::model::metrics::registration_metric_header *)new illumina::interop::model::metrics::registration_metric_header(arg1,(illumina::interop::model::metrics::registration_metric_header::point2d_vector_t const &)*arg2,arg3);
  *(illumina::interop::model::metrics::registration_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1header_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg1 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t arg2 ;
  illumina::interop::constants::layout_type arg3 ;
  illumina::interop::model::metrics::registration_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::registration_metric_header::ushort_t)jarg2; 
  arg3 = (illumina::interop::constants::layout_type)jarg3; 
  result = (illumina::interop::model::metrics::registration_metric_header *)new illumina::interop::model::metrics::registration_metric_header(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::registration_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::ushort_t)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1region_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::ushort_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::ushort_t)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->region_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1fiducial_1locations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric_header::point2d_vector_t *) &((illumina::interop::model::metrics::registration_metric_header const *)arg1)->fiducial_locations();
  *(illumina::interop::model::metrics::registration_metric_header::point2d_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1fiducial_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  illumina::interop::constants::layout_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  result = (illumina::interop::constants::layout_type)((illumina::interop::model::metrics::registration_metric_header const *)arg1)->fiducial_layout();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::registration_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::registration_metric_header::default_header();
  *(illumina::interop::model::metrics::registration_metric_header **)&jresult = new illumina::interop::model::metrics::registration_metric_header((const illumina::interop::model::metrics::registration_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1registration_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::registration_metric_header *arg1 = (illumina::interop::model::metrics::registration_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::registration_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::registration_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1AFFINE_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::registration_metric::AFFINE_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1SUBREGION_1PARAM_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::registration_metric::SUBREGION_PARAM_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric(arg1,arg2);
  *(illumina::interop::model::metrics::registration_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric(arg1);
  *(illumina::interop::model::metrics::registration_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric();
  *(illumina::interop::model::metrics::registration_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1registration_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::registration_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::registration_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::registration_metric *)new illumina::interop::model::metrics::registration_metric((illumina::interop::model::metrics::registration_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::registration_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1affine_1transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->affine_transform(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1affine_1transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->affine_transform();
  *(illumina::interop::model::metrics::registration_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1predicted_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->predicted_error();
  *(illumina::interop::model::metrics::registration_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1sub_1tile_1offsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_tile_offsets(arg2,arg3,arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1sub_1tile_1offsets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  illumina::interop::model::metrics::registration_metric::float_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::registration_metric::float_vector *) &((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_tile_offsets();
  *(illumina::interop::model::metrics::registration_metric::float_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->channel_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1sub_1region_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->sub_region_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1set_1predicted_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_predicted_error(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1max_1residual_1radial_1errors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  std::vector< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = ((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_errors();
  *(std::vector< float > **)&jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1max_1residual_1radial_1error_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_error();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1max_1residual_1radial_1error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_radial_error(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1max_1residual_1x_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_x_error(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1max_1residual_1y_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->max_residual_y_error(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1shear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->shear(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1theta_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->theta_z(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1theta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::metrics::registration_metric const *)arg1)->theta(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  try {
    (arg1)->set_rotation(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1is_1any_1channel_1registration_1failure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  result = (bool)((illumina::interop::model::metrics::registration_metric const *)arg1)->is_any_channel_registration_failure();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::registration_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1registration_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::registration_metric *arg1 = (illumina::interop::model::metrics::registration_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::registration_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::run_diagnostics_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::run_diagnostics_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1run_1diagnostics_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric();
  *(illumina::interop::model::metrics::run_diagnostics_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1run_1diagnostics_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg1 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t arg3 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::base_metric::uint_t)jarg3; 
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric(arg1,arg2,arg3);
  *(illumina::interop::model::metrics::run_diagnostics_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1run_1diagnostics_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::base_cycle_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::base_cycle_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_cycle_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::run_diagnostics_metric *)new illumina::interop::model::metrics::run_diagnostics_metric((illumina::interop::model::metric_base::base_cycle_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::run_diagnostics_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1blank_1image(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->blank_image(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1dead_1tile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->dead_tile(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1failed_1tile_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->failed_tile_cycle(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1q_1outlier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->q_outlier(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1get_1issues_1for_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric::uint_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  result = (illumina::interop::model::metrics::run_diagnostics_metric::uint_vector *) &((illumina::interop::model::metrics::run_diagnostics_metric const *)arg1)->get_issues_for_entry();
  *(illumina::interop::model::metrics::run_diagnostics_metric::uint_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1get_1issue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::base_metric::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metric_base::base_metric::uint_t)((illumina::interop::model::metrics::run_diagnostics_metric const *)arg1)->get_issue(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::run_diagnostics_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1run_1diagnostics_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::run_diagnostics_metric *arg1 = (illumina::interop::model::metrics::run_diagnostics_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1static_1run_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t arg1 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t arg2 ;
  illumina::interop::model::metrics::static_run_metric_header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::metrics::static_run_metric_header::uint_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::static_run_metric_header::uint_t)jarg2; 
  result = (illumina::interop::model::metrics::static_run_metric_header *)new illumina::interop::model::metrics::static_run_metric_header(arg1,arg2);
  *(illumina::interop::model::metrics::static_run_metric_header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1header_1curve_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::static_run_metric_header::uint_t)((illumina::interop::model::metrics::static_run_metric_header const *)arg1)->curve_length();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1header_1curve_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  illumina::interop::model::metrics::static_run_metric_header::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric_header **)&jarg1; 
  result = (illumina::interop::model::metrics::static_run_metric_header::uint_t)((illumina::interop::model::metrics::static_run_metric_header const *)arg1)->curve_check();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1header_1default_1header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< illumina::interop::model::metrics::static_run_metric_header > result;
  
  (void)jenv;
  (void)jcls;
  result = illumina::interop::model::metrics::static_run_metric_header::default_header();
  *(illumina::interop::model::metrics::static_run_metric_header **)&jresult = new illumina::interop::model::metrics::static_run_metric_header((const illumina::interop::model::metrics::static_run_metric_header &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1header_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric_header **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1static_1run_1metric_1header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::static_run_metric_header *arg1 = (illumina::interop::model::metrics::static_run_metric_header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::static_run_metric_header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::static_run_metric::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metrics::static_run_metric::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1static_1run_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric();
  *(illumina::interop::model::metrics::static_run_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1static_1run_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric::header_type *arg1 = 0 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::static_run_metric::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric((illumina::interop::model::metrics::static_run_metric::header_type const &)*arg1);
  *(illumina::interop::model::metrics::static_run_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1static_1run_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric::ubyte_t arg1 ;
  illumina::interop::model::metrics::static_run_metric::ubyte_t arg2 ;
  illumina::interop::model::metrics::static_run_metric::ushort_t arg3 ;
  illumina::interop::model::metrics::static_run_metric::float_vector *arg4 = 0 ;
  illumina::interop::model::metrics::static_run_metric::float_vector *arg5 = 0 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (illumina::interop::model::metrics::static_run_metric::ubyte_t)jarg1; 
  arg2 = (illumina::interop::model::metrics::static_run_metric::ubyte_t)jarg2; 
  arg3 = (illumina::interop::model::metrics::static_run_metric::ushort_t)jarg3; 
  arg4 = *(illumina::interop::model::metrics::static_run_metric::float_vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::static_run_metric::float_vector const & reference is null");
    return 0;
  } 
  arg5 = *(illumina::interop::model::metrics::static_run_metric::float_vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::static_run_metric::float_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric(arg1,arg2,arg3,(illumina::interop::model::metrics::static_run_metric::float_vector const &)*arg4,(illumina::interop::model::metrics::static_run_metric::float_vector const &)*arg5);
  *(illumina::interop::model::metrics::static_run_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1static_1run_1metric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::metrics::static_run_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::metrics::static_run_metric *)new illumina::interop::model::metrics::static_run_metric(arg1,arg2);
  *(illumina::interop::model::metrics::static_run_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1x_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::static_run_metric const *)arg1)->x_values(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1y_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::static_run_metric **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((illumina::interop::model::metrics::static_run_metric const *)arg1)->y_values(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metrics::static_run_metric::prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1static_1run_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metrics::static_run_metric *arg1 = (illumina::interop::model::metrics::static_run_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metrics::static_run_metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1alignment_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1alignment_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1alignment_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1alignment_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1alignment_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1alignment_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1alignment_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)new std::vector< illumina::interop::model::metrics::alignment_metric >();
  *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1alignment_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::alignment_metric > *)new std::vector< illumina::interop::model::metrics::alignment_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::alignment_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::alignment_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::alignment_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::alignment_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::alignment_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::alignment_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::alignment_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::alignment_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::alignment_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1alignment_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::alignment_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::alignment_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::alignment_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_alignment_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::alignment_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1alignment_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::alignment_metric > *arg1 = (std::vector< illumina::interop::model::metrics::alignment_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::alignment_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1basecalling_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1basecalling_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1basecalling_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1basecalling_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1basecalling_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1basecalling_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1basecalling_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)new std::vector< illumina::interop::model::metrics::basecalling_metric >();
  *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1basecalling_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::basecalling_metric > *)new std::vector< illumina::interop::model::metrics::basecalling_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::basecalling_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::basecalling_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1basecalling_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::basecalling_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_basecalling_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::basecalling_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1basecalling_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::basecalling_metric > *arg1 = (std::vector< illumina::interop::model::metrics::basecalling_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::basecalling_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1color_1matrix_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1color_1matrix_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1color_1matrix_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1color_1matrix_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1color_1matrix_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1color_1matrix_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1color_1matrix_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)new std::vector< illumina::interop::model::metrics::color_matrix_metric >();
  *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1color_1matrix_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *)new std::vector< illumina::interop::model::metrics::color_matrix_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::color_matrix_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::color_matrix_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1color_1matrix_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::color_matrix_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_color_matrix_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::color_matrix_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1color_1matrix_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::color_matrix_metric > *arg1 = (std::vector< illumina::interop::model::metrics::color_matrix_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1distortion_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1distortion_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1distortion_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1distortion_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1distortion_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1distortion_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1distortion_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)new std::vector< illumina::interop::model::metrics::distortion_metric >();
  *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1distortion_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::distortion_metric > *)new std::vector< illumina::interop::model::metrics::distortion_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::distortion_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::distortion_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::distortion_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::distortion_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::distortion_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::distortion_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::distortion_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::distortion_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::distortion_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1distortion_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::distortion_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::distortion_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::distortion_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_distortion_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::distortion_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1distortion_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::distortion_metric > *arg1 = (std::vector< illumina::interop::model::metrics::distortion_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::distortion_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1dynamic_1phasing_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1dynamic_1phasing_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1dynamic_1phasing_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1dynamic_1phasing_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1dynamic_1phasing_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1dynamic_1phasing_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1dynamic_1phasing_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >();
  *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1dynamic_1phasing_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *)new std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1dynamic_1phasing_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::dynamic_phasing_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_dynamic_phasing_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::dynamic_phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1dynamic_1phasing_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1event_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1event_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1event_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::event_metric > *)new std::vector< illumina::interop::model::metrics::event_metric >();
  *(std::vector< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1event_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::event_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::event_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::event_metric > *)new std::vector< illumina::interop::model::metrics::event_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::event_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::event_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::event_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::event_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::event_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::event_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::event_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::event_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::event_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::event_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::event_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::event_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1event_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::event_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::event_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::event_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_event_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::event_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1event_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::event_metric > *arg1 = (std::vector< illumina::interop::model::metrics::event_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::event_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extended_1tile_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extended_1tile_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extended_1tile_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extended_1tile_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1extended_1tile_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1extended_1tile_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1extended_1tile_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)new std::vector< illumina::interop::model::metrics::extended_tile_metric >();
  *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1extended_1tile_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *)new std::vector< illumina::interop::model::metrics::extended_tile_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::extended_tile_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::extended_tile_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1extended_1tile_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::extended_tile_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_extended_tile_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::extended_tile_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1extended_1tile_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::extended_tile_metric > *arg1 = (std::vector< illumina::interop::model::metrics::extended_tile_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1fwhm_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1fwhm_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1fwhm_1grid_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1fwhm_1grid_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1fwhm_1grid_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1fwhm_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1fwhm_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >();
  *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1fwhm_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *)new std::vector< illumina::interop::model::metrics::fwhm_grid_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::fwhm_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1fwhm_1grid_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::fwhm_grid_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_fwhm_grid_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::fwhm_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1fwhm_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::fwhm_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1pf_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1pf_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1pf_1grid_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1pf_1grid_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1pf_1grid_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1pf_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1pf_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)new std::vector< illumina::interop::model::metrics::pf_grid_metric >();
  *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1pf_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *)new std::vector< illumina::interop::model::metrics::pf_grid_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::pf_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::pf_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1pf_1grid_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::pf_grid_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_pf_grid_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::pf_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1pf_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::pf_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::pf_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1phasing_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1phasing_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1phasing_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1phasing_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1phasing_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1phasing_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1phasing_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)new std::vector< illumina::interop::model::metrics::phasing_metric >();
  *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1phasing_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::phasing_metric > *)new std::vector< illumina::interop::model::metrics::phasing_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::phasing_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::phasing_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::phasing_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::phasing_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::phasing_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::phasing_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::phasing_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::phasing_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::phasing_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1phasing_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::phasing_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::phasing_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::phasing_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_phasing_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::phasing_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1phasing_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::phasing_metric > *arg1 = (std::vector< illumina::interop::model::metrics::phasing_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::phasing_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1grid_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1grid_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1q_1grid_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1q_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1grid_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)new std::vector< illumina::interop::model::metrics::q_grid_metric >();
  *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1q_1grid_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::q_grid_metric > *)new std::vector< illumina::interop::model::metrics::q_grid_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::q_grid_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::q_grid_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1q_1grid_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::q_grid_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_q_grid_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::q_grid_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1q_1grid_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::q_grid_metric > *arg1 = (std::vector< illumina::interop::model::metrics::q_grid_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::q_grid_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1registration_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1registration_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1registration_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1registration_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1registration_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1registration_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1registration_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::registration_metric > *)new std::vector< illumina::interop::model::metrics::registration_metric >();
  *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1registration_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::registration_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::registration_metric > *)new std::vector< illumina::interop::model::metrics::registration_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::registration_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::registration_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::registration_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::registration_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::registration_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::registration_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::registration_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::registration_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::registration_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1registration_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::registration_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::registration_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::registration_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_registration_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::registration_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1registration_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::registration_metric > *arg1 = (std::vector< illumina::interop::model::metrics::registration_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::registration_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1run_1diagnostics_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1run_1diagnostics_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1run_1diagnostics_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1run_1diagnostics_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1run_1diagnostics_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1run_1diagnostics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1run_1diagnostics_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >();
  *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1run_1diagnostics_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *)new std::vector< illumina::interop::model::metrics::run_diagnostics_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::run_diagnostics_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1run_1diagnostics_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::run_diagnostics_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_run_diagnostics_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::run_diagnostics_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1run_1diagnostics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *arg1 = (std::vector< illumina::interop::model::metrics::run_diagnostics_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1LATEST_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::LATEST_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  ::int16_t arg1 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::int16_t)jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >(arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg1,arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg1);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metrics_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1base_1static_1run_1metrics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *arg1 = 0 ;
  ::int16_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type *arg3 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t const & reference is null");
    return 0;
  } 
  arg2 = (::int16_t)jarg2; 
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *)new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t const &)*arg1,arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::header_type const &)*arg3);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1data_1source_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->data_source_exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1data_1source_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->data_source_exists(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1rebuild_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->rebuild_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1rebuild_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  (arg1)->rebuild_index();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->trim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1has_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1has_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1has_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->has_metric(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->get_metric(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1set_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  ::int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (::int16_t)jarg2; 
  (arg1)->set_version(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->keys();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::key_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->lanes();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1max_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->max_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1tile_1numbers_1for_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->tile_numbers_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->tile_numbers();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1metrics_1for_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_lane(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1metrics_1for_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *arg2 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t & reference is null");
    return ;
  } 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_lane(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->cycles();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1metrics_1for_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics_for_cycle(arg2);
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t **)&jresult = new illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t((const illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = (bool)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  ::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = (::int16_t)((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t *) &((illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > const *)arg1)->metrics();
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1prefix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::SWIGTEMPLATEDISAMBIGUATOR prefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1suffix(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::SWIGTEMPLATEDISAMBIGUATOR suffix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1ref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg4 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  arg4 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg4; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1ref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t arg3 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg2; 
  arg3 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::uint_t)jarg3; 
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1get_1metric_1ref_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t arg2 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type *) &(arg1)->get_metric_ref(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric >::metric_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1base_1static_1run_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *arg1 = (illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1static_1run_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)new std::vector< illumina::interop::model::metrics::static_run_metric >();
  *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_new_1vector_1static_1run_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type arg1 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::metrics::static_run_metric > *)new std::vector< illumina::interop::model::metrics::static_run_metric >(arg1);
  *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::static_run_metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::metrics::static_run_metric > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::metrics::static_run_metric >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::metrics::static_run_metric > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::metrics::static_run_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::static_run_metric >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::metrics::static_run_metric >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::metrics::static_run_metric >::value_type *) &std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::metrics::static_run_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_vector_1static_1run_1metrics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::metrics::static_run_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::metrics::static_run_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::metrics::static_run_metric >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_metrics_static_run_metric_Sg__set(arg1,arg2,(illumina::interop::model::metrics::static_run_metric const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1metricsJNI_delete_1vector_1static_1run_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::metrics::static_run_metric > *arg1 = (std::vector< illumina::interop::model::metrics::static_run_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::metrics::static_run_metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1out_1of_1bounds_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::index_out_of_bounds_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_header **)&baseptr = *(illumina::interop::model::metric_base::base_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_metric **)&baseptr = *(illumina::interop::model::metric_base::base_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_header **)&baseptr = *(illumina::interop::model::metric_base::base_cycle_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1cycle_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metric_base::base_cycle_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_header **)&baseptr = *(illumina::interop::model::metric_base::base_read_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1read_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metric_base::base_read_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_header **)&baseptr = *(illumina::interop::model::metric_base::base_static_run_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_metric **)&baseptr = *(illumina::interop::model::metric_base::base_static_run_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::empty_header **)&baseptr = *(illumina::interop::model::metric_base::base_event_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metric_base::base_event_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_corrected_1intensity_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::corrected_intensity_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_error_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::error_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::extraction_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extraction_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::extraction_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::image_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_image_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::image_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1score_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::q_score_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::q_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric_header **)&baseptr = *(illumina::interop::model::metrics::tile_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_tile_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metrics::tile_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_read_metric_header **)&baseptr = *(illumina::interop::model::metrics::index_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_index_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_read_metric **)&baseptr = *(illumina::interop::model::metrics::index_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_score_header **)&baseptr = *(illumina::interop::model::metrics::q_collapsed_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1collapsed_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::q_collapsed_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1by_1lane_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_metric **)&baseptr = *(illumina::interop::model::metrics::q_by_lane_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1corrected_1intensity_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::corrected_intensity_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1error_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::error_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extraction_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::extraction_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extraction_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1image_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::image_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::image_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_score_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1tile_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::tile_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1index_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::index_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1collapsed_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_collapsed_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_collapsed_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1by_1lane_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_score_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_by_lane_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_alignment_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::alignment_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::basecalling_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_basecalling_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::basecalling_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::color_matrix_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_color_1matrix_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::color_matrix_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric_header **)&baseptr = *(illumina::interop::model::metrics::distortion_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_distortion_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metrics::distortion_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_dynamic_1phasing_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_read_metric **)&baseptr = *(illumina::interop::model::metrics::dynamic_phasing_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_event_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_event_metric **)&baseptr = *(illumina::interop::model::metrics::event_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_extended_1tile_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metrics::extended_tile_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_fwhm_1grid_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::fwhm_grid_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric_header **)&baseptr = *(illumina::interop::model::metrics::pf_grid_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_pf_1grid_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric **)&baseptr = *(illumina::interop::model::metrics::pf_grid_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_phasing_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::phasing_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric_header **)&baseptr = *(illumina::interop::model::metrics::q_grid_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_q_1grid_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_read_metric **)&baseptr = *(illumina::interop::model::metrics::q_grid_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metrics::registration_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_registration_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::registration_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_run_1diagnostics_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric **)&baseptr = *(illumina::interop::model::metrics::run_diagnostics_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1header_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_static_run_metric_header **)&baseptr = *(illumina::interop::model::metrics::static_run_metric_header **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_static_1run_1metric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_static_run_metric **)&baseptr = *(illumina::interop::model::metrics::static_run_metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1alignment_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::alignment_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1basecalling_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::basecalling_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::basecalling_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1color_1matrix_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::color_matrix_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::color_matrix_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1distortion_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::distortion_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::distortion_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1dynamic_1phasing_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_read_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::dynamic_phasing_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1event_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_event_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::event_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1extended_1tile_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::extended_tile_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1fwhm_1grid_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::fwhm_grid_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::fwhm_grid_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1pf_1grid_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::pf_grid_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::pf_grid_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1phasing_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::phasing_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1q_1grid_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::q_grid_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::q_grid_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1registration_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::registration_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::registration_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1run_1diagnostics_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metric_base::base_cycle_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::run_diagnostics_metric > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1metricsJNI_base_1static_1run_1metrics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::metrics::static_run_metric_header **)&baseptr = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::static_run_metric > **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

