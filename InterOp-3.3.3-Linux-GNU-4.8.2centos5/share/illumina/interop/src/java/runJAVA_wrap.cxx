/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include "interop/io/stream_exceptions.h"
#include "interop/model/model_exceptions.h"
#include "interop/util/xml_exceptions.h"


#include "interop/model/run/rfid_metadata.h"


#include "interop/interop.h"
#include "interop/model/run/cycle_range.h"
#include "interop/model/run/read_info.h"
#include "interop/model/run/flowcell_layout.h"
#include "interop/model/run/image_dimensions.h"
#include "interop/model/run/info.h"
#include "interop/model/run/run_exceptions.h"
#include "interop/model/run/parameters.h"
#include "interop/logic/metric/q_metric.h"
#include "interop/logic/utils/enums.h"
#include "interop/util/xml_exceptions.h"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned long >::const_reference std_vector_Sl_uint64_t_Sg__get(std::vector< uint64_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__set(std::vector< uint64_t > *self,int i,std::vector< unsigned long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned short >::const_reference std_vector_Sl_uint16_t_Sg__get(std::vector< uint16_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__set(std::vector< uint16_t > *self,int i,std::vector< unsigned short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_uint32_t_Sg__get(std::vector< uint32_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__set(std::vector< uint32_t > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_uint8_t_Sg__get(std::vector< uint8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__set(std::vector< uint8_t > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< size_t >::const_reference std_vector_Sl_size_t_Sg__get(std::vector< size_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_size_t_Sg__set(std::vector< size_t > *self,int i,std::vector< size_t >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::run::read_info >::const_reference std_vector_Sl_illumina_interop_model_run_read_info_Sg__get(std::vector< illumina::interop::model::run::read_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_run_read_info_Sg__set(std::vector< illumina::interop::model::run::read_info > *self,int i,std::vector< illumina::interop::model::run::read_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum illumina::interop::constants::event_type >::const_reference std_vector_Sl_illumina_interop_constants_event_type_Sg__get(std::vector< illumina::interop::constants::event_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_constants_event_type_Sg__set(std::vector< illumina::interop::constants::event_type > *self,int i,std::vector< enum illumina::interop::constants::event_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1runtime_1error(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::runtime_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (std::runtime_error *)new std::runtime_error((std::string const &)*arg1);
  *(std::runtime_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1runtime_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::runtime_error *arg1 = (std::runtime_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::runtime_error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_runtime_1error_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::runtime_error *arg1 = (std::runtime_error *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::runtime_error **)&jarg1; 
  result = (char *)((std::runtime_error const *)arg1)->what();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1rfid_1metadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::rfid_metadata *)new illumina::interop::model::run::rfid_metadata();
  *(illumina::interop::model::run::rfid_metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1rfid_1metadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::run::rfid_metadata::ulong_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::rfid_metadata::ulong_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (illumina::interop::model::run::rfid_metadata *)new illumina::interop::model::run::rfid_metadata(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(illumina::interop::model::run::rfid_metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_rfid_1metadata_1expiration_1date(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  illumina::interop::model::run::rfid_metadata::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::rfid_metadata **)&jarg1; 
  result = (illumina::interop::model::run::rfid_metadata::ulong_t)((illumina::interop::model::run::rfid_metadata const *)arg1)->expiration_date();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_rfid_1metadata_1part_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::rfid_metadata **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::rfid_metadata const *)arg1)->part_number();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_rfid_1metadata_1serial_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::rfid_metadata **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::rfid_metadata const *)arg1)->serial_number();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1rfid_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::rfid_metadata *arg1 = (illumina::interop::model::run::rfid_metadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::rfid_metadata **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1base_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::util::base_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::util::base_exception *)new illumina::interop::util::base_exception((std::string const &)*arg1);
  *(illumina::interop::util::base_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1base_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::util::base_exception *arg1 = (illumina::interop::util::base_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::util::base_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::xml_format_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::xml_format_exception *)new illumina::interop::xml::xml_format_exception((std::string const &)*arg1);
  *(illumina::interop::xml::xml_format_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::xml_format_exception *arg1 = (illumina::interop::xml::xml_format_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::xml_format_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1xml_1file_1not_1found_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::xml_file_not_found_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::xml_file_not_found_exception *)new illumina::interop::xml::xml_file_not_found_exception((std::string const &)*arg1);
  *(illumina::interop::xml::xml_file_not_found_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1xml_1file_1not_1found_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::xml_file_not_found_exception *arg1 = (illumina::interop::xml::xml_file_not_found_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::xml_file_not_found_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1xml_1parse_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::xml_parse_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::xml_parse_exception *)new illumina::interop::xml::xml_parse_exception((std::string const &)*arg1);
  *(illumina::interop::xml::xml_parse_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1xml_1parse_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::xml_parse_exception *arg1 = (illumina::interop::xml::xml_parse_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::xml_parse_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1bad_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::bad_xml_format_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::bad_xml_format_exception *)new illumina::interop::xml::bad_xml_format_exception((std::string const &)*arg1);
  *(illumina::interop::xml::bad_xml_format_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1bad_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::bad_xml_format_exception *arg1 = (illumina::interop::xml::bad_xml_format_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::bad_xml_format_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1empty_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::empty_xml_format_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::empty_xml_format_exception *)new illumina::interop::xml::empty_xml_format_exception((std::string const &)*arg1);
  *(illumina::interop::xml::empty_xml_format_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1empty_1xml_1format_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::empty_xml_format_exception *arg1 = (illumina::interop::xml::empty_xml_format_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::empty_xml_format_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1missing_1xml_1element_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::xml::missing_xml_element_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::xml::missing_xml_element_exception *)new illumina::interop::xml::missing_xml_element_exception((std::string const &)*arg1);
  *(illumina::interop::xml::missing_xml_element_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1missing_1xml_1element_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::xml::missing_xml_element_exception *arg1 = (illumina::interop::xml::missing_xml_element_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::xml::missing_xml_element_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1invalid_1read_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_read_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_read_exception *)new illumina::interop::model::invalid_read_exception((std::string const &)*arg1);
  *(illumina::interop::model::invalid_read_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1invalid_1read_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_read_exception *arg1 = (illumina::interop::model::invalid_read_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_read_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1invalid_1tile_1naming_1method(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_tile_naming_method *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_tile_naming_method *)new illumina::interop::model::invalid_tile_naming_method((std::string const &)*arg1);
  *(illumina::interop::model::invalid_tile_naming_method **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1invalid_1tile_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_tile_naming_method *arg1 = (illumina::interop::model::invalid_tile_naming_method *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_tile_naming_method **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1invalid_1run_1info_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_run_info_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_run_info_exception *)new illumina::interop::model::invalid_run_info_exception((std::string const &)*arg1);
  *(illumina::interop::model::invalid_run_info_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1invalid_1run_1info_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_run_info_exception *arg1 = (illumina::interop::model::invalid_run_info_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_run_info_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1invalid_1tile_1list_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_tile_list_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_tile_list_exception *)new illumina::interop::model::invalid_tile_list_exception((std::string const &)*arg1);
  *(illumina::interop::model::invalid_tile_list_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1invalid_1tile_1list_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_tile_list_exception *arg1 = (illumina::interop::model::invalid_tile_list_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_tile_list_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1invalid_1run_1info_1cycle_1exception(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_run_info_cycle_exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_run_info_cycle_exception *)new illumina::interop::model::invalid_run_info_cycle_exception((std::string const &)*arg1);
  *(illumina::interop::model::invalid_run_info_cycle_exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1invalid_1run_1info_1cycle_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_run_info_cycle_exception *arg1 = (illumina::interop::model::invalid_run_info_cycle_exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_run_info_cycle_exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1string_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1string_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1ulong_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >();
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1ulong_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned long >::size_type arg1 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned long >::size_type)jarg1; 
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >(arg1);
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = (std::vector< unsigned long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  result = (bool)((std::vector< uint64_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  temp2 = (std::vector< unsigned long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned long >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long >::value_type *) &std_vector_Sl_uint64_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ulong_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__set(arg1,arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1ulong_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1ushort_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >();
  *(std::vector< uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1ushort_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned short >::size_type arg1 ;
  std::vector< uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned short >::size_type)jarg1; 
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >(arg1);
  *(std::vector< uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = (bool)((std::vector< uint16_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  temp2 = (std::vector< unsigned short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_uint16_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_ushort_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__set(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1ushort_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1uint_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1uint_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1);
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1uint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1float_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1float_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_float_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1float_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1bool_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1bool_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_bool_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1bool_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1uchar_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1uchar_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned char >::size_type)jarg1; 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_uchar_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1uchar_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1size_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< size_t > *)new std::vector< size_t >();
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1size_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< size_t >::size_type)jarg1; 
  result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  result = ((std::vector< size_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  result = ((std::vector< size_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (std::vector< size_t >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  result = (bool)((std::vector< size_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  temp2 = (std::vector< size_t >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< size_t >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< size_t >::value_type *) &std_vector_Sl_size_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_size_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< size_t >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_size_t_Sg__set(arg1,arg2,(size_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1size_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_library_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)illumina::interop::library_version();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_INTEROP_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x200);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::common result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::common)illumina::interop::constants::Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownMetricType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_type)illumina::interop::constants::UnknownMetricType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownMetricGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_group result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_group)illumina::interop::constants::UnknownMetricGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownTileNamingMethod_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::tile_naming_method result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::tile_naming_method)illumina::interop::constants::UnknownTileNamingMethod;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_NC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::dna_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::dna_bases)illumina::interop::constants::NC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownBase_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::dna_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::dna_bases)illumina::interop::constants::UnknownBase;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownSurface_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::surface_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::surface_type)illumina::interop::constants::UnknownSurface;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownInstrument_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::instrument_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::instrument_type)illumina::interop::constants::UnknownInstrument;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownBaseType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_base_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_base_type)illumina::interop::constants::UnknownBaseType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownColor_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::plot_colors result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::plot_colors)illumina::interop::constants::UnknownColor;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownBarPlotOption_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::bar_plot_options result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::bar_plot_options)illumina::interop::constants::UnknownBarPlotOption;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownMetricData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_data result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_data)illumina::interop::constants::UnknownMetricData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_TileFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::TileFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_CycleFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::CycleFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_ReadFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::ReadFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_BaseFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::BaseFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_ChannelFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::ChannelFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_LaneFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::LaneFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_SubtileFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::SubtileFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_IUOFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::IUOFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_IntervalFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::IntervalFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownMetricFeature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::UnknownMetricFeature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownPlotType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::plot_types result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::plot_types)illumina::interop::constants::UnknownPlotType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownAffineTransformType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::affine_transform_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::affine_transform_type)illumina::interop::constants::UnknownAffineTransformType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownSubTileOffsetType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::sub_tile_offset_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::sub_tile_offset_type)illumina::interop::constants::UnknownSubTileOffsetType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownSubTileRegionName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::sub_tile_region_name result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::sub_tile_region_name)illumina::interop::constants::UnknownSubTileRegionName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_BasecallingAndQualityScoringDuration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::event_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::event_type)illumina::interop::constants::BasecallingAndQualityScoringDuration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_SequenceAlignmentDuration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::event_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::event_type)illumina::interop::constants::SequenceAlignmentDuration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownEvent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::event_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::event_type)illumina::interop::constants::UnknownEvent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownDistortion_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::distortion_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::distortion_type)illumina::interop::constants::UnknownDistortion;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownDistortionCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::distortion_curve_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::distortion_curve_type)illumina::interop::constants::UnknownDistortionCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_AllIssues_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::run_diagnostics_issue_type)illumina::interop::constants::AllIssues;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownRunDiagnosticsIssueType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::run_diagnostics_issue_type)illumina::interop::constants::UnknownRunDiagnosticsIssueType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_UnknownLayout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::constants::layout_type result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::constants::layout_type)illumina::interop::constants::UnknownLayout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1cycle_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::cycle_range::cycle_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range(arg1,arg2);
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1cycle_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg1 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::cycle_range::cycle_t)jarg1; 
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range(arg1);
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1cycle_1range_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::cycle_range *)new illumina::interop::model::run::cycle_range();
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1first_1cycle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  result = ((illumina::interop::model::run::cycle_range const *)arg1)->first_cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1last_1cycle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  result = ((illumina::interop::model::run::cycle_range const *)arg1)->last_cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1first_1cycle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->first_cycle(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1last_1cycle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->last_cycle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  result = (bool)((illumina::interop::model::run::cycle_range const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_cycle_1range_1update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  arg2 = *(illumina::interop::model::run::cycle_range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return ;
  } 
  (arg1)->update((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::cycle_range *arg1 = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t *arg2 = 0 ;
  illumina::interop::model::run::cycle_range::cycle_t temp2 ;
  illumina::interop::model::run::cycle_range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return 0;
  } 
  temp2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg2 = &temp2; 
  result = operator -((illumina::interop::model::run::cycle_range const &)*arg1,(size_t const &)*arg2);
  *(illumina::interop::model::run::cycle_range **)&jresult = new illumina::interop::model::run::cycle_range((const illumina::interop::model::run::cycle_range &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1cycle_1range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::cycle_range *arg1 = (illumina::interop::model::run::cycle_range *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::cycle_range **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range::cycle_t arg3 ;
  bool arg4 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg3 = (illumina::interop::model::run::cycle_range::cycle_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::cycle_range::cycle_t arg3 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  arg3 = (illumina::interop::model::run::cycle_range::cycle_t)jarg3; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2,arg3);
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::cycle_range::cycle_t arg2 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  arg2 = (illumina::interop::model::run::cycle_range::cycle_t)jarg2; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1,arg2);
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info::number_t arg1 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::read_info::number_t)jarg1; 
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info(arg1);
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::read_info *)new illumina::interop::model::run::read_info();
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::read_info::number_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->number();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1is_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1; 
  result = (bool)((illumina::interop::model::run::read_info const *)arg1)->is_index();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1total_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->total_cycles();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1useable_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  illumina::interop::model::run::cycle_range::cycle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1; 
  result = ((illumina::interop::model::run::read_info const *)arg1)->useable_cycles();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1read_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::read_info *arg1 = (illumina::interop::model::run::read_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jint jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t arg8 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::flowcell_layout::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & reference is null");
    return 0;
  } 
  arg8 = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7,arg8,(std::string const &)*arg9);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jint jarg8) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t arg8 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::flowcell_layout::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & reference is null");
    return 0;
  } 
  arg8 = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)jarg8; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7,arg8);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::flowcell_layout::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout::str_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6,(illumina::interop::model::run::flowcell_layout::str_vector_t const &)*arg7);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg6 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  arg6 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg6; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  arg5 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg5; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg4 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  arg4 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg4; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg3 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  arg3 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg3; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2,arg3);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1,arg2);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg1 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg1; 
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout(arg1);
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1flowcell_1layout_1_1SWIG_19(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::flowcell_layout *)new illumina::interop::model::run::flowcell_layout();
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1lane_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1surface_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->surface_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1swath_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->swath_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1tile_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->tile_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1sections_1per_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->sections_per_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1lanes_1per_1section_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->lanes_per_section();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1total_1number_1of_1sections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::uint_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->total_number_of_sections();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::tile_naming_method_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::tile_naming_method_t)((illumina::interop::model::run::flowcell_layout const *)arg1)->naming_method();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1tiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::str_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout::str_vector_t *) &((illumina::interop::model::run::flowcell_layout const *)arg1)->tiles();
  *(illumina::interop::model::run::flowcell_layout::str_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1barcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::flowcell_layout const *)arg1)->barcode();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1total_1swaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  bool arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((illumina::interop::model::run::flowcell_layout const *)arg1)->total_swaths(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1tiles_1per_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  result = ((illumina::interop::model::run::flowcell_layout const *)arg1)->tiles_per_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1set_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1lane_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->lane_count(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1surface_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->surface_count(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1swath_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->swath_count(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1tile_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1sections_1per_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->sections_per_lane(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_flowcell_1layout_1lanes_1per_1section_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  illumina::interop::model::run::flowcell_layout::uint_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  arg2 = (illumina::interop::model::run::flowcell_layout::uint_t)jarg2; 
  (arg1)->lanes_per_section(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1flowcell_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::flowcell_layout *arg1 = (illumina::interop::model::run::flowcell_layout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1image_1dimensions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions(arg1,arg2);
  *(illumina::interop::model::run::image_dimensions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1image_1dimensions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions(arg1);
  *(illumina::interop::model::run::image_dimensions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1image_1dimensions_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::image_dimensions *)new illumina::interop::model::run::image_dimensions();
  *(illumina::interop::model::run::image_dimensions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_image_1dimensions_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::image_dimensions **)&jarg1; 
  result = ((illumina::interop::model::run::image_dimensions const *)arg1)->width();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_image_1dimensions_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::image_dimensions **)&jarg1; 
  result = ((illumina::interop::model::run::image_dimensions const *)arg1)->height();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1image_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::image_dimensions *arg1 = (illumina::interop::model::run::image_dimensions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::image_dimensions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::image_dimensions *arg8 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg9 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = *(illumina::interop::model::run::flowcell_layout **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  arg7 = *(illumina::interop::model::run::info::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::str_vector_t const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::image_dimensions **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::image_dimensions const & reference is null");
    return 0;
  } 
  arg9 = *(illumina::interop::model::run::info::read_vector_t **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::read_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7,(illumina::interop::model::run::image_dimensions const &)*arg8,(illumina::interop::model::run::info::read_vector_t const &)*arg9);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::image_dimensions *arg8 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = *(illumina::interop::model::run::flowcell_layout **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  arg7 = *(illumina::interop::model::run::info::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::str_vector_t const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::image_dimensions **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::image_dimensions const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7,(illumina::interop::model::run::image_dimensions const &)*arg8);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg7 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = *(illumina::interop::model::run::flowcell_layout **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  arg7 = *(illumina::interop::model::run::info::str_vector_t **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::str_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6,(illumina::interop::model::run::info::str_vector_t const &)*arg7);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::flowcell_layout *arg6 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  arg6 = *(illumina::interop::model::run::flowcell_layout **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(illumina::interop::model::run::flowcell_layout const &)*arg6);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info::uint_t arg5 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::model::run::info::uint_t)jarg5; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1,(std::string const &)*arg2);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((std::string const &)*arg1);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_19(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info();
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  illumina::interop::model::run::info::str_vector_t *arg3 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::run::info::read_vector_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::read_vector_t const & reference is null");
    return 0;
  } 
  arg3 = *(illumina::interop::model::run::info::str_vector_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::str_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1,(illumina::interop::model::run::info::read_vector_t const &)*arg2,(illumina::interop::model::run::info::str_vector_t const &)*arg3);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::run::info::read_vector_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::read_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1,(illumina::interop::model::run::info::read_vector_t const &)*arg2);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1info_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::flowcell_layout *arg1 = 0 ;
  illumina::interop::model::run::info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::flowcell_layout **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::info *)new illumina::interop::model::run::info((illumina::interop::model::run::flowcell_layout const &)*arg1);
  *(illumina::interop::model::run::info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::util::base_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/base_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1validate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate();
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_tile_naming_method &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_naming_method");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1validate_1tiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_tiles();
  }
  catch(illumina::interop::model::invalid_tile_list_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_tile_list_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1validate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate(arg2,arg3);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1validate_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_cycle(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_cycle_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_cycle_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1validate_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  ::uint32_t arg2 ;
  ::uint32_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (::uint32_t)jarg2; 
  arg3 = (::uint32_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    ((illumina::interop::model::run::info const *)arg1)->validate_read(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_info_1instrument_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->instrument_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_info_1flowcell_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->flowcell_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1run_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->run_number();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_info_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_info_1date(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::info const *)arg1)->date();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (illumina::interop::model::run::info::uint_t)((illumina::interop::model::run::info const *)arg1)->version();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1flowcell_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::flowcell_layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (illumina::interop::model::run::flowcell_layout *) &((illumina::interop::model::run::info const *)arg1)->flowcell();
  *(illumina::interop::model::run::flowcell_layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1channels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::str_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (illumina::interop::model::run::info::str_vector_t *) &((illumina::interop::model::run::info const *)arg1)->channels();
  *(illumina::interop::model::run::info::str_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1dimensions_1of_1image(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::image_dimensions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (illumina::interop::model::run::image_dimensions *) &((illumina::interop::model::run::info const *)arg1)->dimensions_of_image();
  *(illumina::interop::model::run::image_dimensions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1reads_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::read_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (illumina::interop::model::run::info::read_vector_t *) &((illumina::interop::model::run::info const *)arg1)->reads();
  *(illumina::interop::model::run::info::read_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_info_1is_1indexed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_indexed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_info_1is_1paired_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_paired_end();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_info_1is_1last_1cycle_1of_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((illumina::interop::model::run::info const *)arg1)->is_last_cycle_of_read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1cycle_1within_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((illumina::interop::model::run::info const *)arg1)->cycle_within_read(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t arg2 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::run::read_info *) &((illumina::interop::model::run::info const *)arg1)->read(arg2);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1channels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::str_vector_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = *(illumina::interop::model::run::info::str_vector_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::str_vector_t const & reference is null");
    return ;
  } 
  (arg1)->channels((illumina::interop::model::run::info::str_vector_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1reads_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::info::read_vector_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = *(illumina::interop::model::run::info::read_vector_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info::read_vector_t const & reference is null");
    return ;
  } 
  (arg1)->reads((illumina::interop::model::run::info::read_vector_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1set_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->set_naming_method(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1flowcell_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  illumina::interop::model::run::flowcell_layout *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = *(illumina::interop::model::run::flowcell_layout **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::flowcell_layout const & reference is null");
    return ;
  } 
  (arg1)->flowcell((illumina::interop::model::run::flowcell_layout const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1total_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->total_cycles();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_info_1useable_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  result = ((illumina::interop::model::run::info const *)arg1)->useable_cycles();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1read_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read_file((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->parse(arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    ((illumina::interop::model::run::info const *)arg1)->write((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_info_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  try {
    ((illumina::interop::model::run::info const *)arg1)->write(*arg2);
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::info *arg1 = (illumina::interop::model::run::info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jobject jarg10_, jstring jarg11) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg10 = 0 ;
  std::string *arg11 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg10_;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::rfid_metadata **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::rfid_metadata **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  arg10 = *(illumina::interop::model::run::rfid_metadata **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg11_pstr = (const char *)jenv->GetStringUTFChars(jarg11, 0); 
  if (!arg11_pstr) return 0;
  std::string arg11_str(arg11_pstr);
  arg11 = &arg11_str;
  jenv->ReleaseStringUTFChars(jarg11, arg11_pstr); 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9,(illumina::interop::model::run::rfid_metadata const &)*arg10,(std::string const &)*arg11);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg10 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg10_;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::rfid_metadata **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::rfid_metadata **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  arg10 = *(illumina::interop::model::run::rfid_metadata **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9,(illumina::interop::model::run::rfid_metadata const &)*arg10);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jstring jarg9) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  std::string *arg9 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::rfid_metadata **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::rfid_metadata **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8,(std::string const &)*arg9);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::rfid_metadata *arg8 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::rfid_metadata **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  arg8 = *(illumina::interop::model::run::rfid_metadata **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7,(illumina::interop::model::run::rfid_metadata const &)*arg8);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::rfid_metadata *arg7 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  arg7 = *(illumina::interop::model::run::rfid_metadata **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::rfid_metadata const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(illumina::interop::model::run::rfid_metadata const &)*arg7);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters::uint_t arg6 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (illumina::interop::model::run::parameters::uint_t)jarg6; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  std::string *arg4 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters::instrument_type_t arg3 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::run::parameters::instrument_type_t)jarg3; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2,arg3);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1,(std::string const &)*arg2);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters::uint_t arg1 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::run::parameters::uint_t)jarg1; 
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters(arg1);
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1parameters_1_1SWIG_111(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::run::parameters *)new illumina::interop::model::run::parameters();
  *(illumina::interop::model::run::parameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1instrument_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->instrument_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1instrument_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::instrument_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::parameters::instrument_type_t)((illumina::interop::model::run::parameters const *)arg1)->instrument_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1experiment_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->experiment_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1chemistry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->chemistry();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1control_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::parameters::uint_t)((illumina::interop::model::run::parameters const *)arg1)->control_lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::parameters::uint_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::parameters::uint_t)((illumina::interop::model::run::parameters const *)arg1)->version();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1flowcell_1rfid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->flowcell_rfid();
  *(illumina::interop::model::run::rfid_metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1bottle_1rfid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->bottle_rfid();
  *(illumina::interop::model::run::rfid_metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1bottle_1barcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->bottle_barcode();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1reagent_1rfid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  illumina::interop::model::run::rfid_metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (illumina::interop::model::run::rfid_metadata *) &((illumina::interop::model::run::parameters const *)arg1)->reagent_rfid();
  *(illumina::interop::model::run::rfid_metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1reagent_1barcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::run::parameters const *)arg1)->reagent_barcode();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1read_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->read_file((std::string const &)*arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->parse(arg2);
  }
  catch(illumina::interop::xml::xml_file_not_found_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_file_not_found_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::bad_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/bad_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::empty_xml_format_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/empty_xml_format_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::missing_xml_element_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/missing_xml_element_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::xml::xml_parse_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/xml_parse_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_parameters_1parse_1time(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::run::rfid_metadata::ulong_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::run::rfid_metadata::ulong_t)illumina::interop::model::run::parameters::parse_time((std::string const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::run::parameters *arg1 = (illumina::interop::model::run::parameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::run::parameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::run::read_info > *)new std::vector< illumina::interop::model::run::read_info >();
  *(std::vector< illumina::interop::model::run::read_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1read_1info_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type arg1 ;
  std::vector< illumina::interop::model::run::read_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::run::read_info >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::run::read_info > *)new std::vector< illumina::interop::model::run::read_info >(arg1);
  *(std::vector< illumina::interop::model::run::read_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::run::read_info > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::run::read_info > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::run::read_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::run::read_info > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  std::vector< illumina::interop::model::run::read_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::run::read_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::run::read_info >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::run::read_info >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::run::read_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::run::read_info >::value_type *) &std_vector_Sl_illumina_interop_model_run_read_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::run::read_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::run::read_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::run::read_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::run::read_info >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_run_read_info_Sg__set(arg1,arg2,(illumina::interop::model::run::read_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1read_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::run::read_info > *arg1 = (std::vector< illumina::interop::model::run::read_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1event_1type_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::constants::event_type > *)new std::vector< illumina::interop::constants::event_type >();
  *(std::vector< illumina::interop::constants::event_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_new_1event_1type_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type arg1 ;
  std::vector< illumina::interop::constants::event_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum illumina::interop::constants::event_type >::size_type)jarg1; 
  result = (std::vector< illumina::interop::constants::event_type > *)new std::vector< illumina::interop::constants::event_type >(arg1);
  *(std::vector< illumina::interop::constants::event_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::event_type > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  result = ((std::vector< illumina::interop::constants::event_type > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  arg2 = (std::vector< enum illumina::interop::constants::event_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::constants::event_type > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  std::vector< enum illumina::interop::constants::event_type >::value_type *arg2 = 0 ;
  std::vector< enum illumina::interop::constants::event_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  temp2 = (std::vector< enum illumina::interop::constants::event_type >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum illumina::interop::constants::event_type >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::event_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum illumina::interop::constants::event_type >::value_type *) &std_vector_Sl_illumina_interop_constants_event_type_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_event_1type_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  int arg2 ;
  std::vector< enum illumina::interop::constants::event_type >::value_type *arg3 = 0 ;
  std::vector< enum illumina::interop::constants::event_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum illumina::interop::constants::event_type >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_illumina_interop_constants_event_type_Sg__set(arg1,arg2,(enum illumina::interop::constants::event_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_delete_1event_1type_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::constants::event_type > *arg1 = (std::vector< illumina::interop::constants::event_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1metric_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::metric_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1group_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_group >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1group_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_group >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1metric_1group(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_group result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::metric_group)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_group >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_group arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_group)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_group >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1tile_1naming_1method_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::tile_naming_method >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1tile_1naming_1method_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::tile_naming_method >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1tile_1naming_1method(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::tile_naming_method result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::tile_naming_method)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::tile_naming_method >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::tile_naming_method >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1dna_1bases_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::dna_bases >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1dna_1bases_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::dna_bases >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1dna_1bases(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::dna_bases result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::dna_bases)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::dna_bases >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::dna_bases arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::dna_bases)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::dna_bases >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1surface_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::surface_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1surface_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::surface_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1surface_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::surface_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::surface_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::surface_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::surface_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::surface_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::surface_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1instrument_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::instrument_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1instrument_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::instrument_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1instrument_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::instrument_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::instrument_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::instrument_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::instrument_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::instrument_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::instrument_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1base_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_base_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1base_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_base_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1metric_1base_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_base_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::metric_base_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_base_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_base_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_base_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_base_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1plot_1colors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::plot_colors >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1plot_1colors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::plot_colors >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1plot_1colors(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::plot_colors result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::plot_colors)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::plot_colors >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::plot_colors arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::plot_colors)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::plot_colors >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1bar_1plot_1options_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::bar_plot_options >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1bar_1plot_1options_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::bar_plot_options >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1bar_1plot_1options(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::bar_plot_options result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::bar_plot_options)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::bar_plot_options >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::bar_plot_options arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::bar_plot_options)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::bar_plot_options >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_data >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_data >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1metric_1data(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_data result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::metric_data)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_data >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_data arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_data)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_data >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1feature_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_feature_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1metric_1feature_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::metric_feature_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1metric_1feature_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::metric_feature_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::metric_feature_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::metric_feature_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::metric_feature_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::metric_feature_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::metric_feature_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1sub_1tile_1offset_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_offset_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1sub_1tile_1offset_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_offset_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1sub_1tile_1offset_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::sub_tile_offset_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::sub_tile_offset_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::sub_tile_offset_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::sub_tile_offset_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::sub_tile_offset_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::sub_tile_offset_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1sub_1tile_1region_1name_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_region_name >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1sub_1tile_1region_1name_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::sub_tile_region_name >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1sub_1tile_1region_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::sub_tile_region_name result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::sub_tile_region_name)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::sub_tile_region_name >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::sub_tile_region_name arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::sub_tile_region_name)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::sub_tile_region_name >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1affine_1transform_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::affine_transform_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1affine_1transform_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::affine_transform_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1affine_1transform_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::affine_transform_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::affine_transform_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::affine_transform_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::affine_transform_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::affine_transform_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::affine_transform_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1event_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::event_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1event_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::event_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1event_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::event_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::event_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::event_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::event_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::event_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::event_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1distortion_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1distortion_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1distortion_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::distortion_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::distortion_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::distortion_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::distortion_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::distortion_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::distortion_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1distortion_1curve_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_curve_type >(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1runJNI_list_1distortion_1curve_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR list_enum_names< illumina::interop::constants::distortion_curve_type >(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1runJNI_parse_1distortion_1curve_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::constants::distortion_curve_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::constants::distortion_curve_type)illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR parse< illumina::interop::constants::distortion_curve_type >((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1runJNI_to_1string_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::constants::distortion_curve_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::distortion_curve_type)jarg1; 
  result = illumina::interop::constants::SWIGTEMPLATEDISAMBIGUATOR to_string< illumina::interop::constants::distortion_curve_type >(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_base_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::runtime_error **)&baseptr = *(illumina::interop::util::base_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_xml_1format_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::xml::xml_format_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_xml_1file_1not_1found_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::xml::xml_file_not_found_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_xml_1parse_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::xml::xml_format_exception **)&baseptr = *(illumina::interop::xml::xml_parse_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_bad_1xml_1format_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::xml::xml_format_exception **)&baseptr = *(illumina::interop::xml::bad_xml_format_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_empty_1xml_1format_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::xml::xml_format_exception **)&baseptr = *(illumina::interop::xml::empty_xml_format_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_missing_1xml_1element_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::xml::xml_format_exception **)&baseptr = *(illumina::interop::xml::missing_xml_element_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_invalid_1read_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_read_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_invalid_1tile_1naming_1method_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_tile_naming_method **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_invalid_1run_1info_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_run_info_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_invalid_1tile_1list_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::invalid_run_info_exception **)&baseptr = *(illumina::interop::model::invalid_tile_list_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_invalid_1run_1info_1cycle_1exception_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_run_info_cycle_exception **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1runJNI_read_1info_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::run::cycle_range **)&baseptr = *(illumina::interop::model::run::read_info **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

