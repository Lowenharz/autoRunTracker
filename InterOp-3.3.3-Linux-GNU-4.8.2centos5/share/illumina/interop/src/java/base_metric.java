/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class base_metric extends empty_metric {
  private transient long swigCPtr;

  protected base_metric(long cPtr, boolean cMemoryOwn) {
    super(interop_metricsJNI.base_metric_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(base_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_metricsJNI.delete_base_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public base_metric(long lane, long tile) {
    this(interop_metricsJNI.new_base_metric__SWIG_0(lane, tile), true);
  }

  public base_metric(long lane) {
    this(interop_metricsJNI.new_base_metric__SWIG_1(lane), true);
  }

  public base_metric() {
    this(interop_metricsJNI.new_base_metric__SWIG_2(), true);
  }

  public void set_base(long lane, long tile) {
    interop_metricsJNI.base_metric_set_base(swigCPtr, this, lane, tile);
  }

  public java.math.BigInteger id() {
    return interop_metricsJNI.base_metric_id(swigCPtr, this);
  }

  public java.math.BigInteger tile_hash() {
    return interop_metricsJNI.base_metric_tile_hash(swigCPtr, this);
  }

  public static java.math.BigInteger create_id(java.math.BigInteger lane, java.math.BigInteger tile, java.math.BigInteger arg2) {
    return interop_metricsJNI.base_metric_create_id__SWIG_0(lane, tile, arg2);
  }

  public static java.math.BigInteger create_id(java.math.BigInteger lane, java.math.BigInteger tile) {
    return interop_metricsJNI.base_metric_create_id__SWIG_1(lane, tile);
  }

  public static java.math.BigInteger lane_from_id(java.math.BigInteger id) {
    return interop_metricsJNI.base_metric_lane_from_id(id);
  }

  public static java.math.BigInteger tile_hash_from_id(java.math.BigInteger id) {
    return interop_metricsJNI.base_metric_tile_hash_from_id(id);
  }

  public static java.math.BigInteger tile_from_id(java.math.BigInteger id) {
    return interop_metricsJNI.base_metric_tile_from_id(id);
  }

  public long lane() {
    return interop_metricsJNI.base_metric_lane(swigCPtr, this);
  }

  public long tile() {
    return interop_metricsJNI.base_metric_tile(swigCPtr, this);
  }

  public long number(tile_naming_method arg0) {
    return interop_metricsJNI.base_metric_number(swigCPtr, this, arg0.swigValue());
  }

  public long section(tile_naming_method method) {
    return interop_metricsJNI.base_metric_section(swigCPtr, this, method.swigValue());
  }

  public long surface(tile_naming_method method) {
    return interop_metricsJNI.base_metric_surface(swigCPtr, this, method.swigValue());
  }

  public long swath(tile_naming_method method) {
    return interop_metricsJNI.base_metric_swath(swigCPtr, this, method.swigValue());
  }

  public long phyiscalLocationIndex(tile_naming_method method, long section_per_lane, long tile_count, long swath_count, boolean all_surfaces) {
    return interop_metricsJNI.base_metric_phyiscalLocationIndex(swigCPtr, this, method.swigValue(), section_per_lane, tile_count, swath_count, all_surfaces);
  }

  public long phyiscalLocationColumn(tile_naming_method method, long swath_count, boolean all_surfaces) {
    return interop_metricsJNI.base_metric_phyiscalLocationColumn(swigCPtr, this, method.swigValue(), swath_count, all_surfaces);
  }

  public long phyiscalLocationRow(tile_naming_method method, long section_per_lane, long tile_count) {
    return interop_metricsJNI.base_metric_phyiscalLocationRow(swigCPtr, this, method.swigValue(), section_per_lane, tile_count);
  }

  public long physical_location_index(tile_naming_method method, long section_per_lane, long tile_count, long swath_count, boolean all_surfaces) {
    return interop_metricsJNI.base_metric_physical_location_index(swigCPtr, this, method.swigValue(), section_per_lane, tile_count, swath_count, all_surfaces);
  }

  public long physical_location_column(tile_naming_method method, long swath_count, boolean all_surfaces) {
    return interop_metricsJNI.base_metric_physical_location_column(swigCPtr, this, method.swigValue(), swath_count, all_surfaces);
  }

  public long physical_location_row(tile_naming_method method, long section_per_lane, long tile_count) {
    return interop_metricsJNI.base_metric_physical_location_row(swigCPtr, this, method.swigValue(), section_per_lane, tile_count);
  }

  public static String suffix() {
    return interop_metricsJNI.base_metric_suffix();
  }

  public final static int LANE_BIT_COUNT = interop_metricsJNI.base_metric_LANE_BIT_COUNT_get();
  public final static int TILE_BIT_COUNT = interop_metricsJNI.base_metric_TILE_BIT_COUNT_get();
  public final static int CYCLE_BIT_COUNT = interop_metricsJNI.base_metric_CYCLE_BIT_COUNT_get();
  public final static int READ_BIT_COUNT = interop_metricsJNI.base_metric_READ_BIT_COUNT_get();
  public final static int RESERVED_BIT_COUNT = interop_metricsJNI.base_metric_RESERVED_BIT_COUNT_get();
  public final static int READ_BIT_SHIFT = interop_metricsJNI.base_metric_READ_BIT_SHIFT_get();
  public final static int CYCLE_BIT_SHIFT = interop_metricsJNI.base_metric_CYCLE_BIT_SHIFT_get();
  public final static int EVENT_BIT_SHIFT = interop_metricsJNI.base_metric_EVENT_BIT_SHIFT_get();
  public final static int TILE_BIT_SHIFT = interop_metricsJNI.base_metric_TILE_BIT_SHIFT_get();
  public final static int LANE_BIT_SHIFT = interop_metricsJNI.base_metric_LANE_BIT_SHIFT_get();

}
