/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class interop_table {
  public static void populate_imaging_table_data(run_metrics metrics, imaging_column_vector columns, map_id_offset row_offset, float[] data_beg, long n) throws index_out_of_bounds_exception {
    interop_tableJNI.populate_imaging_table_data(run_metrics.getCPtr(metrics), metrics, imaging_column_vector.getCPtr(columns), columns, map_id_offset.getCPtr(row_offset), row_offset, data_beg, n);
  }

  public static void count_table_rows(run_metrics metrics, map_id_offset row_offset) {
    interop_tableJNI.count_table_rows(run_metrics.getCPtr(metrics), metrics, map_id_offset.getCPtr(row_offset), row_offset);
  }

  public static long count_table_columns(imaging_column_vector columns) {
    return interop_tableJNI.count_table_columns__SWIG_0(imaging_column_vector.getCPtr(columns), columns);
  }

  public static void create_imaging_table(run_metrics metrics, imaging_table table) throws invalid_column_type, index_out_of_bounds_exception {
    interop_tableJNI.create_imaging_table(run_metrics.getCPtr(metrics), metrics, imaging_table.getCPtr(table), table);
  }

  public static void list_imaging_table_metrics_to_load(uchar_vector valid_to_load, boolean show_iuo) {
    interop_tableJNI.list_imaging_table_metrics_to_load(uchar_vector.getCPtr(valid_to_load), valid_to_load, show_iuo);
  }

  public static long max_digits() {
    return interop_tableJNI.max_digits();
  }

  public static long get_column_rounding(column_id index) {
    return interop_tableJNI.get_column_rounding(index.swigValue());
  }

  public static void create_imaging_table_columns(string_vector channels, bool_vector filled, imaging_column_vector columns, long registration_sub_region_count, layout_type fiducial_layout) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_imaging_table_columns__SWIG_0(string_vector.getCPtr(channels), channels, bool_vector.getCPtr(filled), filled, imaging_column_vector.getCPtr(columns), columns, registration_sub_region_count, fiducial_layout.swigValue());
  }

  public static void populate_column_offsets(imaging_column_vector columns) throws invalid_column_type {
    interop_tableJNI.populate_column_offsets__SWIG_0(imaging_column_vector.getCPtr(columns), columns);
  }

  public static void create_imaging_table_columns(run_metrics metrics, imaging_column_vector columns) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_imaging_table_columns__SWIG_1(run_metrics.getCPtr(metrics), metrics, imaging_column_vector.getCPtr(columns), columns);
  }

  public static void populate_event_table_data(run_metrics metrics, event_column_vector columns, map_id_offset row_offset, long[] data_beg, long n) {
    interop_tableJNI.populate_event_table_data(run_metrics.getCPtr(metrics), metrics, event_column_vector.getCPtr(columns), columns, map_id_offset.getCPtr(row_offset), row_offset, data_beg, n);
  }

  public static void count_event_table_rows(run_metrics metrics, map_id_offset row_offset) {
    interop_tableJNI.count_event_table_rows(run_metrics.getCPtr(metrics), metrics, map_id_offset.getCPtr(row_offset), row_offset);
  }

  public static long count_table_columns(event_column_vector columns) {
    return interop_tableJNI.count_table_columns__SWIG_1(event_column_vector.getCPtr(columns), columns);
  }

  public static void create_event_table(run_metrics metrics, event_table table) throws invalid_column_type, index_out_of_bounds_exception {
    interop_tableJNI.create_event_table(run_metrics.getCPtr(metrics), metrics, event_table.getCPtr(table), table);
  }

  public static void list_event_metrics(string_vector types) {
    interop_tableJNI.list_event_metrics(string_vector.getCPtr(types), types);
  }

  public static void create_event_table_columns(event_column_vector columns) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_event_table_columns__SWIG_0(event_column_vector.getCPtr(columns), columns);
  }

  public static void populate_column_offsets(event_column_vector columns) throws invalid_column_type {
    interop_tableJNI.populate_column_offsets__SWIG_1(event_column_vector.getCPtr(columns), columns);
  }

  public static void create_event_table_columns(run_metrics metrics, event_column_vector columns) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_event_table_columns__SWIG_1(run_metrics.getCPtr(metrics), metrics, event_column_vector.getCPtr(columns), columns);
  }

  public static void populate_run_diagnostics_table_data(run_metrics metrics, run_diagnostics_column_vector columns, map_id_offset row_offset, long[] data_beg, long n) {
    interop_tableJNI.populate_run_diagnostics_table_data(run_metrics.getCPtr(metrics), metrics, run_diagnostics_column_vector.getCPtr(columns), columns, map_id_offset.getCPtr(row_offset), row_offset, data_beg, n);
  }

  public static void count_run_diagnostics_table_rows(run_metrics metrics, map_id_offset row_offset) {
    interop_tableJNI.count_run_diagnostics_table_rows(run_metrics.getCPtr(metrics), metrics, map_id_offset.getCPtr(row_offset), row_offset);
  }

  public static long count_table_columns(run_diagnostics_column_vector columns) {
    return interop_tableJNI.count_table_columns__SWIG_2(run_diagnostics_column_vector.getCPtr(columns), columns);
  }

  public static void create_run_diagnostics_table(run_metrics metrics, run_diagnostics_table table) throws invalid_column_type, index_out_of_bounds_exception {
    interop_tableJNI.create_run_diagnostics_table(run_metrics.getCPtr(metrics), metrics, run_diagnostics_table.getCPtr(table), table);
  }

  public static void list_run_diagnostics_metrics(string_vector types) {
    interop_tableJNI.list_run_diagnostics_metrics(string_vector.getCPtr(types), types);
  }

  public static void create_run_diagnostics_table_columns(run_diagnostics_column_vector columns, bool_vector filled) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_run_diagnostics_table_columns__SWIG_0(run_diagnostics_column_vector.getCPtr(columns), columns, bool_vector.getCPtr(filled), filled);
  }

  public static void populate_column_offsets(run_diagnostics_column_vector columns) throws invalid_column_type {
    interop_tableJNI.populate_column_offsets__SWIG_2(run_diagnostics_column_vector.getCPtr(columns), columns);
  }

  public static void create_run_diagnostics_table_columns(run_metrics metrics, run_diagnostics_column_vector columns) throws invalid_column_type, index_out_of_bounds_exception, invalid_channel_exception {
    interop_tableJNI.create_run_diagnostics_table_columns__SWIG_1(run_metrics.getCPtr(metrics), metrics, run_diagnostics_column_vector.getCPtr(columns), columns);
  }

}
