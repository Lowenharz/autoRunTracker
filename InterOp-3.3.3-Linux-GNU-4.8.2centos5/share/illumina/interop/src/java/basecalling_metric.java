/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class basecalling_metric extends base_cycle_metric {
  private transient long swigCPtr;

  protected basecalling_metric(long cPtr, boolean cMemoryOwn) {
    super(interop_metricsJNI.basecalling_metric_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(basecalling_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_metricsJNI.delete_basecalling_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public basecalling_metric() {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_0(), true);
  }

  public basecalling_metric(basecalling_metric_header header) {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_1(basecalling_metric_header.getCPtr(header), header), true);
  }

  public basecalling_metric(long lane, long tile, long cycle, float_vector centroids, float_vector covariances, float_vector weights, float mean_determinant) {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_2(lane, tile, cycle, float_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances, float_vector.getCPtr(weights), weights, mean_determinant), true);
  }

  public basecalling_metric(long lane, long tile, long cycle, float_vector centroids, float_vector covariances, float_vector weights) {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_3(lane, tile, cycle, float_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances, float_vector.getCPtr(weights), weights), true);
  }

  public basecalling_metric(long lane, long tile, long cycle, float_vector centroids, float_vector covariances) {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_4(lane, tile, cycle, float_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances), true);
  }

  public basecalling_metric(long lane, long tile, long cycle, float_vector centroids) {
    this(interop_metricsJNI.new_basecalling_metric__SWIG_5(lane, tile, cycle, float_vector.getCPtr(centroids), centroids), true);
  }

  public void set(long lane, long tile, long cycle, point2d_vector centroids, float_vector covariances, float_vector weights, float mean_determinant) {
    interop_metricsJNI.basecalling_metric_set__SWIG_0(swigCPtr, this, lane, tile, cycle, point2d_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances, float_vector.getCPtr(weights), weights, mean_determinant);
  }

  public void set(long lane, long tile, long cycle, point2d_vector centroids, float_vector covariances, float_vector weights) {
    interop_metricsJNI.basecalling_metric_set__SWIG_1(swigCPtr, this, lane, tile, cycle, point2d_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances, float_vector.getCPtr(weights), weights);
  }

  public void set(long lane, long tile, long cycle, point2d_vector centroids, float_vector covariances) {
    interop_metricsJNI.basecalling_metric_set__SWIG_2(swigCPtr, this, lane, tile, cycle, point2d_vector.getCPtr(centroids), centroids, float_vector.getCPtr(covariances), covariances);
  }

  public void set(long lane, long tile, long cycle, point2d_vector centroids) {
    interop_metricsJNI.basecalling_metric_set__SWIG_3(swigCPtr, this, lane, tile, cycle, point2d_vector.getCPtr(centroids), centroids);
  }

  public float_vector centroids() {
    return new float_vector(interop_metricsJNI.basecalling_metric_centroids(swigCPtr, this), false);
  }

  public float_vector covariances() {
    return new float_vector(interop_metricsJNI.basecalling_metric_covariances(swigCPtr, this), false);
  }

  public float_vector weights() {
    return new float_vector(interop_metricsJNI.basecalling_metric_weights(swigCPtr, this), false);
  }

  public float mean_determinant() {
    return interop_metricsJNI.basecalling_metric_mean_determinant(swigCPtr, this);
  }

  public float radius(long base_index) {
    return interop_metricsJNI.basecalling_metric_radius(swigCPtr, this, base_index);
  }

  public float area() {
    return interop_metricsJNI.basecalling_metric_area(swigCPtr, this);
  }

  public static String prefix() {
    return interop_metricsJNI.basecalling_metric_prefix();
  }

  public final static int TYPE = interop_metricsJNI.basecalling_metric_TYPE_get();
  public final static int DIM = interop_metricsJNI.basecalling_metric_DIM_get();
  public final static int LATEST_VERSION = interop_metricsJNI.basecalling_metric_LATEST_VERSION_get();

}
