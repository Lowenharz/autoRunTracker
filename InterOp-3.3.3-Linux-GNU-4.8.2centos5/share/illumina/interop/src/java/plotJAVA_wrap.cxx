/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/model/plot/axes.h"
#include "interop/model/plot/candle_stick_point.h"
#include "interop/model/plot/bar_point.h"
#include "interop/model/plot/data_point.h"
#include "interop/model/plot/data_point_collection.h"
#include "interop/model/plot/filter_options.h"
#include "interop/model/plot/plot_data.h"
#include "interop/model/plot/series.h"
#include "interop/model/plot/chart_data.h"
#include "interop/model/plot/heatmap_data.h"
#include "interop/model/plot/flowcell_data.h"


#include "interop/model/plot/subtile_data.h"

SWIGINTERN std::vector< illumina::interop::model::plot::bar_point >::const_reference std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__get(std::vector< illumina::interop::model::plot::bar_point > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__set(std::vector< illumina::interop::model::plot::bar_point > *self,int i,std::vector< illumina::interop::model::plot::bar_point >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::plot::candle_stick_point >::const_reference std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__get(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__set(std::vector< illumina::interop::model::plot::candle_stick_point > *self,int i,std::vector< illumina::interop::model::plot::candle_stick_point >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "interop/logic/plot/plot_by_cycle.h"
#include "interop/logic/plot/plot_by_lane.h"
#include "interop/logic/plot/plot_qscore_histogram.h"
#include "interop/logic/plot/plot_qscore_heatmap.h"
#include "interop/logic/plot/plot_flowcell_map.h"
#include "interop/logic/plot/plot_sample_qc.h"
#include "interop/logic/plot/plot_metric_list.h"


#include "interop/logic/plot/plot_subtile_map.h"
#include "interop/logic/plot/plot_subtile_aggregate.h"
#include "interop/logic/plot/plot_distortion.h"
#include "interop/logic/plot/plot_event_by_cycle.h"
#include "interop/logic/plot/plot_event_by_event_type.h"
#include "interop/logic/plot/plot_run_diagnostics_by_cycle.h"
#include "interop/logic/plot/plot_run_diagnostics_flowcell_map.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1invalid_1filter_1option(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_filter_option *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_filter_option *)new illumina::interop::model::invalid_filter_option((std::string const &)*arg1);
  *(illumina::interop::model::invalid_filter_option **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1invalid_1filter_1option(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_filter_option *arg1 = (illumina::interop::model::invalid_filter_option *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_filter_option **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1axis(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::axis *)new illumina::interop::model::plot::axis();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1set_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_range(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1set_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_label((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axis const *)arg1)->label();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  result = (float)((illumina::interop::model::plot::axis const *)arg1)->min();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  result = (float)((illumina::interop::model::plot::axis const *)arg1)->max();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axis_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::axis *arg1 = (illumina::interop::model::plot::axis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::axis **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1xrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_xrange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1yrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_yrange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1xlabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_xlabel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1ylabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_ylabel((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1xlabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axes const *)arg1)->xlabel();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1ylabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::axes const *)arg1)->ylabel();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1xaxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axis const & reference is null");
    return ;
  } 
  (arg1)->set_xaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1set_1yaxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axis const & reference is null");
    return ;
  } 
  (arg1)->set_yaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::axes const *)arg1)->x();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::axes const *)arg1)->y();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_axes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1axes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::axes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::axes *)new illumina::interop::model::plot::axes();
  *(illumina::interop::model::plot::axes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1axes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::axes *arg1 = (illumina::interop::model::plot::axes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::axes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1ALL_1IDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::plot::filter_options::UseAll result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::filter_options::UseAll)illumina::interop::model::plot::filter_options::ALL_IDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1ALL_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::plot::filter_options::UseAll result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::filter_options::UseAll)illumina::interop::model::plot::filter_options::ALL_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1ALL_1BASES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::plot::filter_options::UseAll result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::filter_options::UseAll)illumina::interop::model::plot::filter_options::ALL_BASES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options::id_t arg9 ;
  illumina::interop::model::plot::filter_options::id_t arg10 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  arg9 = (illumina::interop::model::plot::filter_options::id_t)jarg9; 
  arg10 = (illumina::interop::model::plot::filter_options::id_t)jarg10; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options::id_t arg9 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  arg9 = (illumina::interop::model::plot::filter_options::id_t)jarg9; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options::id_t arg8 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  arg8 = (illumina::interop::model::plot::filter_options::id_t)jarg8; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options::id_t arg7 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  arg7 = (illumina::interop::model::plot::filter_options::id_t)jarg7; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options::id_t arg6 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  arg6 = (illumina::interop::model::plot::filter_options::id_t)jarg6; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options::id_t arg5 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  arg5 = (illumina::interop::model::plot::filter_options::id_t)jarg5; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3, jint jarg4) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg4 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  arg4 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg4; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options::channel_t arg3 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  arg3 = (illumina::interop::model::plot::filter_options::channel_t)jarg3; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2,arg3);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1,arg2);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1filter_1options_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::constants::tile_naming_method arg1 ;
  illumina::interop::model::plot::filter_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::constants::tile_naming_method)jarg1; 
  result = (illumina::interop::model::plot::filter_options *)new illumina::interop::model::plot::filter_options(arg1);
  *(illumina::interop::model::plot::filter_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1validate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::run::info **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    ((illumina::interop::model::plot::filter_options const *)arg1)->validate(arg2,(illumina::interop::model::run::info const &)*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1validate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::run::info **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return ;
  } 
  try {
    ((illumina::interop::model::plot::filter_options const *)arg1)->validate(arg2,(illumina::interop::model::run::info const &)*arg3);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1channels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_channels(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1channels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_channels();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1bases_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_bases(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1bases_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_bases();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_reads();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_cycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_lanes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1tile_1numbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_tile_numbers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1swaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_swaths();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1all_1sections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->all_sections();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1is_1specific_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1is_1specific_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_read();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1is_1specific_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->is_specific_surface();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_lane(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_surface(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_cycle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1tile_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_tile_number(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1swath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_swath(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_section(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::channel_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_channel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1valid_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->valid_base(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1tile_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::tile_naming_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::tile_naming_method)jarg2; 
  (arg1)->tile_naming_method(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1channel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::channel_t)jarg2; 
  (arg1)->channel(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1dna_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::dna_base_t)jarg2; 
  (arg1)->dna_base(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->read(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1cycle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->cycle(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1surface_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->surface(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1swath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->swath(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->section(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1tile_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->tile_number(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::model::plot::filter_options::id_t)jarg2; 
  (arg1)->lane(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1channel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::channel_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::channel_t)((illumina::interop::model::plot::filter_options const *)arg1)->channel();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1dna_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::dna_base_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::dna_base_t)((illumina::interop::model::plot::filter_options const *)arg1)->dna_base();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->read();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1cycle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->cycle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1surface_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::model::plot::filter_options::id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::model::plot::filter_options::id_t)((illumina::interop::model::plot::filter_options const *)arg1)->surface();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1cycle_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->cycle_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1lane_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->lane_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1channel_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->channel_description((std::vector< std::string > const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1base_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->base_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1surface_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->surface_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1read_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = ((illumina::interop::model::plot::filter_options const *)arg1)->read_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1naming_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::tile_naming_method result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  result = (illumina::interop::constants::tile_naming_method)((illumina::interop::model::plot::filter_options const *)arg1)->naming_method();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  arg3 = *(illumina::interop::model::run::info **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return 0;
  } 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_section(arg2,(illumina::interop::model::run::info const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1swath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_swath(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1tile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_tile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1all_1lanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_lanes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1lane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_lane(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1all_1bases(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_bases(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_base(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1all_1channels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_channels(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_channel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1all_1cycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_cycles(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::constants::plot_types arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::constants::plot_types)jarg3; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_cycle(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1all_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::plot_types arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::plot_types)jarg2; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_all_reads(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::constants::plot_types arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = (illumina::interop::constants::plot_types)jarg3; 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_read(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1options_1supports_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::run::info *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::run::info **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return 0;
  } 
  result = (bool)((illumina::interop::model::plot::filter_options const *)arg1)->supports_surface(arg2,(illumina::interop::model::run::info const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1filter_1options(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::filter_options *arg1 = (illumina::interop::model::plot::filter_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::filter_options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1axes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axes const & reference is null");
    return ;
  } 
  (arg1)->set_axes((illumina::interop::model::plot::axes const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1xaxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axis const & reference is null");
    return ;
  } 
  (arg1)->set_xaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1yaxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axis const & reference is null");
    return ;
  } 
  (arg1)->set_yaxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1xlabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_xlabel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1ylabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_ylabel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1xrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_xrange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1yrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_yrange(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1x_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::chart_data const *)arg1)->x_axis();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1y_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::chart_data const *)arg1)->y_axis();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1set_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_title((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::chart_data const *)arg1)->title();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1xyaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  illumina::interop::model::plot::axes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  result = (illumina::interop::model::plot::axes *) &((illumina::interop::model::plot::chart_data const *)arg1)->xyaxes();
  *(illumina::interop::model::plot::axes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_chart_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1chart_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::chart_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::chart_data *)new illumina::interop::model::plot::chart_data();
  *(illumina::interop::model::plot::chart_data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1chart_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::chart_data *arg1 = (illumina::interop::model::plot::chart_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::chart_data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1heatmap_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::heatmap_data *)new illumina::interop::model::plot::heatmap_data();
  *(illumina::interop::model::plot::heatmap_data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1heatmap_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1set_1buffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  try {
    (arg1)->set_buffer(arg2);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1set_1buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jfloat jarg5) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_buffer(arg2,arg3,arg4,arg5);
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1set_1buffer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  (arg1)->set_buffer(arg2,arg3,arg4);
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->resize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (float)((illumina::interop::model::plot::heatmap_data const *)arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::plot::heatmap_data const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->length();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::heatmap_data const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1index_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::heatmap_data *arg1 = (illumina::interop::model::plot::heatmap_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::heatmap_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((illumina::interop::model::plot::heatmap_data const *)arg1)->index_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1flowcell_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::flowcell_data *)new illumina::interop::model::plot::flowcell_data();
  *(illumina::interop::model::plot::flowcell_data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1flowcell_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  
  arg3 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg3), 0));
  
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  try {
    (arg1)->set_buffer(arg2,arg3,arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), 0);
  arg3 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
  
  if (arg3)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  (arg1)->resize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1tile_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  ::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::uint32_t)((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_at(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jfloat jarg5) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  ::uint32_t arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (::uint32_t)jarg4; 
  arg5 = (float)jarg5; 
  try {
    (arg1)->set_data(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1tile_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  ::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (::uint32_t)((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_id(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1saxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  illumina::interop::model::plot::axis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::axis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::axis const & reference is null");
    return ;
  } 
  (arg1)->set_saxis((illumina::interop::model::plot::axis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_label((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1saxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  illumina::interop::model::plot::axis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = (illumina::interop::model::plot::axis *) &((illumina::interop::model::plot::flowcell_data const *)arg1)->saxis();
  *(illumina::interop::model::plot::axis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1subtitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_subtitle((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1set_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_range(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1subtitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::flowcell_data const *)arg1)->subtitle();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1swath_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->swath_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1tile_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->tile_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1total_1tile_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::flowcell_data *arg1 = (illumina::interop::model::plot::flowcell_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::flowcell_data **)&jarg1; 
  result = ((illumina::interop::model::plot::flowcell_data const *)arg1)->total_tile_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1subtile_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::subtile_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::subtile_data *)new illumina::interop::model::plot::subtile_data();
  *(illumina::interop::model::plot::subtile_data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1subtile_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1set_1buffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  
  arg3 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg3), 0));
  
  try {
    (arg1)->set_buffer(arg2,arg3);
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), 0);
  arg3 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
  
  if (arg3)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1set_1buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  
  arg3 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg3), 0));
  
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (size_t)jarg8; 
  (arg1)->set_buffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), 0);
  arg3 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
  
  if (arg3)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->resize(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jfloat jarg7) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  ::uint32_t arg6 ;
  float arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (::uint32_t)jarg6; 
  arg7 = (float)jarg7; 
  try {
    (arg1)->set_data(arg2,arg3,arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1populate_1tile_1data_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->populate_tile_data_at(arg2,arg3,arg4,arg5);
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = (float)((illumina::interop::model::plot::subtile_data const *)arg1)->operator ()(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1tile_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  ::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = (::uint32_t)((illumina::interop::model::plot::subtile_data const *)arg1)->tile_id(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1subtile_1count_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  result = ((illumina::interop::model::plot::subtile_data const *)arg1)->subtile_count_x();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1subtile_1count_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  result = ((illumina::interop::model::plot::subtile_data const *)arg1)->subtile_count_y();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1index_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::subtile_data *arg1 = (illumina::interop::model::plot::subtile_data *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    result = ((illumina::interop::model::plot::subtile_data const *)arg1)->index_of(arg2,arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1float_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg1 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg2 ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg2; 
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >(arg1,arg2);
  *(illumina::interop::model::plot::data_point< float,float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1float_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg1 ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg1; 
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >(arg1);
  *(illumina::interop::model::plot::data_point< float,float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1float_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::data_point< float,float > *)new illumina::interop::model::plot::data_point< float,float >();
  *(illumina::interop::model::plot::data_point< float,float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->x();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->y();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1max_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->max_value();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1min_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  result = (float)((illumina::interop::model::plot::data_point< float,float > const *)arg1)->min_value();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_float_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1float_1point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::data_point< float,float > *arg1 = (illumina::interop::model::plot::data_point< float,float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::data_point< float,float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  size_t arg7 ;
  illumina::interop::model::plot::candle_stick_point::float_vector_t *arg8 = 0 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(illumina::interop::model::plot::candle_stick_point::float_vector_t **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::candle_stick_point::float_vector_t const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(illumina::interop::model::plot::candle_stick_point::float_vector_t const &)*arg8);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  size_t arg7 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2,arg3);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1,arg2);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point(arg1);
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1point_1_1SWIG_18(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::candle_stick_point *)new illumina::interop::model::plot::candle_stick_point();
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1max_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->max_value();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1min_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->min_value();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1p25(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p25();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1p50(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p50();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1p75(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->p75();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->lower();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1upper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::candle_stick_point const *)arg1)->upper();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1outliers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  illumina::interop::model::plot::candle_stick_point::float_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = (illumina::interop::model::plot::candle_stick_point::float_vector_t *) &((illumina::interop::model::plot::candle_stick_point const *)arg1)->outliers();
  *(illumina::interop::model::plot::candle_stick_point::float_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1data_1point_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  result = ((illumina::interop::model::plot::candle_stick_point const *)arg1)->data_point_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1candle_1stick_1point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::candle_stick_point *arg1 = (illumina::interop::model::plot::candle_stick_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::candle_stick_point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1point_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1,arg2,arg3);
  *(illumina::interop::model::plot::bar_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1point_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1,arg2);
  *(illumina::interop::model::plot::bar_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1point_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point(arg1);
  *(illumina::interop::model::plot::bar_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1point_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::bar_point *)new illumina::interop::model::plot::bar_point();
  *(illumina::interop::model::plot::bar_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1point_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::bar_point **)&jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1point_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  illumina::interop::model::plot::data_point< float,float >::x_type arg2 ;
  illumina::interop::model::plot::data_point< float,float >::y_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::bar_point **)&jarg1; 
  arg2 = (illumina::interop::model::plot::data_point< float,float >::x_type)jarg2; 
  arg3 = (illumina::interop::model::plot::data_point< float,float >::y_type)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1point_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::bar_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::bar_point const *)arg1)->width();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1point_1min_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::bar_point **)&jarg1; 
  result = (float)((illumina::interop::model::plot::bar_point const *)arg1)->min_value();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1bar_1point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::bar_point *arg1 = (illumina::interop::model::plot::bar_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::bar_point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::plot::bar_point > *)new std::vector< illumina::interop::model::plot::bar_point >();
  *(std::vector< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type arg1 ;
  std::vector< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::plot::bar_point >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::plot::bar_point > *)new std::vector< illumina::interop::model::plot::bar_point >(arg1);
  *(std::vector< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::plot::bar_point > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::bar_point >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::plot::bar_point > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  std::vector< illumina::interop::model::plot::bar_point >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::plot::bar_point >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::plot::bar_point >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::plot::bar_point >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::bar_point >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::plot::bar_point >::value_type *) &std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::plot::bar_point >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::bar_point >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::plot::bar_point >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::plot::bar_point >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_bar_point_Sg__set(arg1,arg2,(illumina::interop::model::plot::bar_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1bar_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::plot::bar_point > *arg1 = (std::vector< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::plot::bar_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)new std::vector< illumina::interop::model::plot::candle_stick_point >();
  *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type arg1 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::plot::candle_stick_point > *)new std::vector< illumina::interop::model::plot::candle_stick_point >(arg1);
  *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::plot::candle_stick_point > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::plot::candle_stick_point >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::plot::candle_stick_point > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::plot::candle_stick_point >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::plot::candle_stick_point >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::plot::candle_stick_point >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::plot::candle_stick_point >::value_type *) &std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::plot::candle_stick_point >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::plot::candle_stick_point >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::plot::candle_stick_point >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::plot::candle_stick_point >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_plot_candle_stick_point_Sg__set(arg1,arg2,(illumina::interop::model::plot::candle_stick_point const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1candle_1stick_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::plot::candle_stick_point > *arg1 = (std::vector< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1collection_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::candle_stick_point *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::candle_stick_point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::candle_stick_point const & reference is null");
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::candle_stick_point const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1collection_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::candle_stick_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::candle_stick_point *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::plot::candle_stick_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1collection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = ((illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1collection_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::candle_stick_point *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::plot::candle_stick_point **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::candle_stick_point const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::candle_stick_point const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1collection_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1collection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point >();
  *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1candle_1stick_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1collection_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::bar_point *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::bar_point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::bar_point const & reference is null");
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::bar_point const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1collection_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::bar_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::bar_point *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::plot::bar_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1collection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = ((illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1collection_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::bar_point *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::plot::bar_point **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::bar_point const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::bar_point const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1collection_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1collection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point >();
  *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1bar_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1series_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types > arg3 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types)jarg3; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1,arg2,arg3);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1series_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1,arg2);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1series_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >((std::string const &)*arg1);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1series_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >();
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->title();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1color_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->color();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1series_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::series_types)((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->series_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1options(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::options_t *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const *)arg1)->options();
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point >::options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1add_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->add_option((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->color((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1candle_1stick_1series(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1series_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types > arg3 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types)jarg3; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1,arg2,arg3);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1series_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1,arg2);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1series_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >((std::string const &)*arg1);
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1series_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >();
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->title();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1color_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->color();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1series_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  SwigValueWrapper< enum illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::series_types)((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->series_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1options(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::options_t *) &((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const *)arg1)->options();
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point >::options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1add_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->add_option((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->color((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1bar_1series(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const & reference is null");
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = ((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1candle_1stick_1plot_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *)new illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point >();
  *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1candle_1stick_1plot_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const & reference is null");
    return ;
  } 
  (arg1)->assign(arg2,(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const & reference is null");
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = ((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  result = (bool)((illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_new_1bar_1plot_1data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *)new illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point >();
  *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_delete_1bar_1plot_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg1 = (illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1cycle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1cycle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1cycle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1cycle_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_cycle(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1by_1cycle_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_by_cycle_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1by_1cycle_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_by_cycle_metrics(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1by_1cycle_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_by_cycle_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1by_1cycle_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_by_cycle_metrics(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1lane_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1by_1lane_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_by_lane((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1by_1lane_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_by_lane_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1by_1lane_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_by_lane_metrics(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1by_1lane_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_by_lane_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1by_1lane_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_by_lane_metrics(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1qscore_1histogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  try {
    illumina::interop::logic::plot::plot_qscore_histogram(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1qscore_1histogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_qscore_histogram(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1qscore_1heatmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloatArray jarg4, jlong jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::heatmap_data **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::heatmap_data & reference is null");
    return ;
  } 
  arg4 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), 0)); 
  arg5 = (size_t)jarg5; 
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1qscore_1heatmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloatArray jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::heatmap_data **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::heatmap_data & reference is null");
    return ;
  } 
  arg4 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), 0)); 
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1qscore_1heatmap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::heatmap_data *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::heatmap_data **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::heatmap_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_qscore_heatmap(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_count_1rows_1for_1heatmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::plot::count_rows_for_heatmap((illumina::interop::model::metrics::run_metrics const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_count_1columns_1for_1heatmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::plot::count_columns_for_heatmap((illumina::interop::model::metrics::run_metrics const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6, jboolean jarg7) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  arg7 = jarg7 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8, jboolean jarg9) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  arg9 = jarg9 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8,arg9);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6, jboolean jarg7) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  arg7 = jarg7 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8, jboolean jarg9) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  arg9 = jarg9 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8,arg9);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1flowcell_1map2_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1flowcell_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::list_flowcell_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1flowcell_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::list_flowcell_metrics(*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1flowcell_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  illumina::interop::logic::plot::filter_flowcell_metrics(*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_filter_1flowcell_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::plot::filter_flowcell_metrics(*arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_calculate_1flowcell_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::plot::calculate_flowcell_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,(illumina::interop::model::plot::filter_options const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1sample_1qc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_sample_qc(*arg1,arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1plot_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  illumina::interop::logic::plot::list_plot_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1available_1plot_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  illumina::interop::logic::plot::list_available_plot_metrics((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_find_1first_1valid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  illumina::interop::model::metric_base::base_metric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::metric_base::base_metric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_metric & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::find_first_valid(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_find_1first_1valid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  ::uint32_t *arg3 = (::uint32_t *) 0 ;
  illumina::interop::model::metric_base::base_metric *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg2 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), 0)); 
  
  arg3 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg3), 0));
  
  arg4 = *(illumina::interop::model::metric_base::base_metric **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::base_metric & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::find_first_valid(*arg1,arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), 0);
  arg2 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), 0);
  arg3 = NULL;
  
  
  if (arg2)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg2), reinterpret_cast<jfloat*>(arg2), JNI_ABORT);
  }
  
  
  if (arg3)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg3), reinterpret_cast<jint*>(arg3), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_select_1tile_1values_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloatArray jarg4) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), 0)); 
  try {
    illumina::interop::logic::plot::select_tile_values(*arg1,arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_select_1tile_1values_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloatArray jarg4, jintArray jarg5, jfloatArray jarg6) {
  illumina::interop::model::plot::subtile_data *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  ::uint32_t *arg5 = (::uint32_t *) 0 ;
  float *arg6 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::plot::subtile_data **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), 0)); 
  
  arg5 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg5), 0));
  
  arg6 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), 0)); 
  try {
    illumina::interop::logic::plot::select_tile_values(*arg1,arg2,arg3,arg4,arg5,arg6);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_parameter &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_parameter");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), 0);
  arg4 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg5), reinterpret_cast<jint*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), JNI_ABORT);
  }
  
  
  if (arg5)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg5), reinterpret_cast<jint*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg6), reinterpret_cast<jfloat*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1map_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::subtile_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::subtile_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::subtile_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1subtile_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  illumina::interop::logic::plot::list_subtile_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1subtile_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::logic::utils::metric_type_description_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::logic::utils::metric_type_description_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::logic::utils::metric_type_description_t > & reference is null");
    return ;
  } 
  illumina::interop::logic::plot::list_subtile_metrics((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_calculate_1subtile_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return 0;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return 0;
  } 
  try {
    result = illumina::interop::logic::plot::calculate_subtile_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3);
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1aggregate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::metric_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::metric_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_aggregate(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,*arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1subtile_1aggregate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg5 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_subtile_aggregate(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,*arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1distortion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t arg3 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_distortion(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1event_1by_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_event_by_cycle(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_list_1interval_1events(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::constants::event_type > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::constants::event_type > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::constants::event_type > & reference is null");
    return ;
  } 
  illumina::interop::logic::plot::list_interval_events(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1event_1by_1event_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::plot::plot_event_by_event_type(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1event_1by_1event_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_event_by_event_type(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1by_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_by_cycle(*arg1,(illumina::interop::model::plot::filter_options const &)*arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::constants::run_diagnostics_issue_type arg2 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (illumina::interop::constants::run_diagnostics_issue_type)jarg2; 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map2(*arg1,arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jintArray jarg6) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  ::uint32_t *arg6 = (::uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  
  arg6 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg6), 0));
  
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), 0);
  arg6 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg6)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg6), reinterpret_cast<jint*>(arg6), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1plotJNI_plot_1run_1diagnostics_1flowcell_1map2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloatArray jarg5, jlong jarg6, jintArray jarg7, jlong jarg8) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::plot::filter_options *arg3 = 0 ;
  illumina::interop::model::plot::flowcell_data *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  ::uint32_t *arg7 = (::uint32_t *) 0 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(illumina::interop::model::plot::filter_options **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::plot::flowcell_data **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::flowcell_data & reference is null");
    return ;
  } 
  arg5 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), 0)); 
  arg6 = (size_t)jarg6; 
  
  arg7 = reinterpret_cast<unsigned int*>(jenv->GetIntArrayElements(reinterpret_cast<jintArray>(jarg7), 0));
  
  arg8 = (size_t)jarg8; 
  try {
    illumina::interop::logic::plot::plot_run_diagnostics_flowcell_map2(*arg1,(std::string const &)*arg2,(illumina::interop::model::plot::filter_options const &)*arg3,*arg4,arg5,arg6,arg7,arg8);
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_filter_option");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), 0);
  arg5 = NULL;
  
  
  jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), 0);
  arg7 = NULL;
  
  
  if (arg5)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg5), reinterpret_cast<jfloat*>(arg5), JNI_ABORT);
  }
  
  
  if (arg7)
  {
    jenv->ReleaseIntArrayElements(reinterpret_cast<jintArray>(jarg7), reinterpret_cast<jint*>(arg7), JNI_ABORT);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_calculate_1run_1diagnostics_1flowcell_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::plot::filter_options *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return 0;
  } 
  arg2 = *(illumina::interop::model::plot::filter_options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::plot::filter_options const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::plot::calculate_run_diagnostics_flowcell_buffer_size((illumina::interop::model::metrics::run_metrics const &)*arg1,(illumina::interop::model::plot::filter_options const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_invalid_1filter_1option_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_filter_option **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_heatmap_1data_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::chart_data **)&baseptr = *(illumina::interop::model::plot::heatmap_data **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_flowcell_1data_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::heatmap_data **)&baseptr = *(illumina::interop::model::plot::flowcell_data **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_subtile_1data_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::flowcell_data **)&baseptr = *(illumina::interop::model::plot::subtile_data **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1point_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::data_point< float,float > **)&baseptr = *(illumina::interop::model::plot::candle_stick_point **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1point_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::data_point< float,float > **)&baseptr = *(illumina::interop::model::plot::bar_point **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1series_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::candle_stick_point > **)&baseptr = *(illumina::interop::model::plot::series< illumina::interop::model::plot::candle_stick_point > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1series_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::data_point_collection< illumina::interop::model::plot::bar_point > **)&baseptr = *(illumina::interop::model::plot::series< illumina::interop::model::plot::bar_point > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_candle_1stick_1plot_1data_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::chart_data **)&baseptr = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::candle_stick_point > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1plotJNI_bar_1plot_1data_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::plot::chart_data **)&baseptr = *(illumina::interop::model::plot::plot_data< illumina::interop::model::plot::bar_point > **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

