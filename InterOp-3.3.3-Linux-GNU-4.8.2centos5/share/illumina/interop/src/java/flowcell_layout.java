/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class flowcell_layout {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected flowcell_layout(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(flowcell_layout obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_runJNI.delete_flowcell_layout(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count, long sections_per_lane, long lanes_per_section, string_vector tiles, tile_naming_method naming_method, String barcode) {
    this(interop_runJNI.new_flowcell_layout__SWIG_0(lane_count, surface_count, swath_count, tile_count, sections_per_lane, lanes_per_section, string_vector.getCPtr(tiles), tiles, naming_method.swigValue(), barcode), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count, long sections_per_lane, long lanes_per_section, string_vector tiles, tile_naming_method naming_method) {
    this(interop_runJNI.new_flowcell_layout__SWIG_1(lane_count, surface_count, swath_count, tile_count, sections_per_lane, lanes_per_section, string_vector.getCPtr(tiles), tiles, naming_method.swigValue()), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count, long sections_per_lane, long lanes_per_section, string_vector tiles) {
    this(interop_runJNI.new_flowcell_layout__SWIG_2(lane_count, surface_count, swath_count, tile_count, sections_per_lane, lanes_per_section, string_vector.getCPtr(tiles), tiles), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count, long sections_per_lane, long lanes_per_section) {
    this(interop_runJNI.new_flowcell_layout__SWIG_3(lane_count, surface_count, swath_count, tile_count, sections_per_lane, lanes_per_section), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count, long sections_per_lane) {
    this(interop_runJNI.new_flowcell_layout__SWIG_4(lane_count, surface_count, swath_count, tile_count, sections_per_lane), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count, long tile_count) {
    this(interop_runJNI.new_flowcell_layout__SWIG_5(lane_count, surface_count, swath_count, tile_count), true);
  }

  public flowcell_layout(long lane_count, long surface_count, long swath_count) {
    this(interop_runJNI.new_flowcell_layout__SWIG_6(lane_count, surface_count, swath_count), true);
  }

  public flowcell_layout(long lane_count, long surface_count) {
    this(interop_runJNI.new_flowcell_layout__SWIG_7(lane_count, surface_count), true);
  }

  public flowcell_layout(long lane_count) {
    this(interop_runJNI.new_flowcell_layout__SWIG_8(lane_count), true);
  }

  public flowcell_layout() {
    this(interop_runJNI.new_flowcell_layout__SWIG_9(), true);
  }

  public long lane_count() {
    return interop_runJNI.flowcell_layout_lane_count__SWIG_0(swigCPtr, this);
  }

  public long surface_count() {
    return interop_runJNI.flowcell_layout_surface_count__SWIG_0(swigCPtr, this);
  }

  public long swath_count() {
    return interop_runJNI.flowcell_layout_swath_count__SWIG_0(swigCPtr, this);
  }

  public long tile_count() {
    return interop_runJNI.flowcell_layout_tile_count__SWIG_0(swigCPtr, this);
  }

  public long sections_per_lane() {
    return interop_runJNI.flowcell_layout_sections_per_lane__SWIG_0(swigCPtr, this);
  }

  public long lanes_per_section() {
    return interop_runJNI.flowcell_layout_lanes_per_section__SWIG_0(swigCPtr, this);
  }

  public long total_number_of_sections() {
    return interop_runJNI.flowcell_layout_total_number_of_sections(swigCPtr, this);
  }

  public tile_naming_method naming_method() {
    return tile_naming_method.swigToEnum(interop_runJNI.flowcell_layout_naming_method(swigCPtr, this));
  }

  public string_vector tiles() {
    return new string_vector(interop_runJNI.flowcell_layout_tiles(swigCPtr, this), false);
  }

  public String barcode() {
    return interop_runJNI.flowcell_layout_barcode(swigCPtr, this);
  }

  public long total_swaths(boolean all_surfaces) {
    return interop_runJNI.flowcell_layout_total_swaths(swigCPtr, this, all_surfaces);
  }

  public long tiles_per_lane() {
    return interop_runJNI.flowcell_layout_tiles_per_lane(swigCPtr, this);
  }

  public void set_naming_method(tile_naming_method naming_method) {
    interop_runJNI.flowcell_layout_set_naming_method(swigCPtr, this, naming_method.swigValue());
  }

  public void lane_count(long lane_count) {
    interop_runJNI.flowcell_layout_lane_count__SWIG_1(swigCPtr, this, lane_count);
  }

  public void surface_count(long surface_count) {
    interop_runJNI.flowcell_layout_surface_count__SWIG_1(swigCPtr, this, surface_count);
  }

  public void swath_count(long swath_count) {
    interop_runJNI.flowcell_layout_swath_count__SWIG_1(swigCPtr, this, swath_count);
  }

  public void tile_count(long tile_count) {
    interop_runJNI.flowcell_layout_tile_count__SWIG_1(swigCPtr, this, tile_count);
  }

  public void sections_per_lane(long count) {
    interop_runJNI.flowcell_layout_sections_per_lane__SWIG_1(swigCPtr, this, count);
  }

  public void lanes_per_section(long count) {
    interop_runJNI.flowcell_layout_lanes_per_section__SWIG_1(swigCPtr, this, count);
  }

}
