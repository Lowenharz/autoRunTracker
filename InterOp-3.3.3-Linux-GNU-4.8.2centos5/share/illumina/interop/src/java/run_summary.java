/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class run_summary {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected run_summary(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(run_summary obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_summaryJNI.delete_run_summary(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public run_summary() {
    this(interop_summaryJNI.new_run_summary__SWIG_0(), true);
  }

  public run_summary(read_info_vector reads, long lane_count, long surface_count, long channel_count) {
    this(interop_summaryJNI.new_run_summary__SWIG_2(read_info_vector.getCPtr(reads), reads, lane_count, surface_count, channel_count), true);
  }

  public void initialize(info run_info) {
    interop_summaryJNI.run_summary_initialize__SWIG_0(swigCPtr, this, info.getCPtr(run_info), run_info);
  }

  public void initialize(read_info_vector reads, long lane_count, long surface_count, long channel_count) {
    interop_summaryJNI.run_summary_initialize__SWIG_1(swigCPtr, this, read_info_vector.getCPtr(reads), reads, lane_count, surface_count, channel_count);
  }

  public void copy_reads(read_info_vector dst) {
    interop_summaryJNI.run_summary_copy_reads(swigCPtr, this, read_info_vector.getCPtr(dst), dst);
  }

  public read_summary at(long n) throws index_out_of_bounds_exception {
    return new read_summary(interop_summaryJNI.run_summary_at(swigCPtr, this, n), false);
  }

  public long size() {
    return interop_summaryJNI.run_summary_size(swigCPtr, this);
  }

  public long lane_count() {
    return interop_summaryJNI.run_summary_lane_count__SWIG_0(swigCPtr, this);
  }

  public void lane_count(long lane_count) {
    interop_summaryJNI.run_summary_lane_count__SWIG_1(swigCPtr, this, lane_count);
  }

  public long surface_count() {
    return interop_summaryJNI.run_summary_surface_count__SWIG_0(swigCPtr, this);
  }

  public long channel_count() {
    return interop_summaryJNI.run_summary_channel_count(swigCPtr, this);
  }

  public void surface_count(long surface_count) {
    interop_summaryJNI.run_summary_surface_count__SWIG_1(swigCPtr, this, surface_count);
  }

  public metric_summary total_summary() {
    return new metric_summary(interop_summaryJNI.run_summary_total_summary__SWIG_0(swigCPtr, this), false);
  }

  public void total_summary(metric_summary summary) {
    interop_summaryJNI.run_summary_total_summary__SWIG_1(swigCPtr, this, metric_summary.getCPtr(summary), summary);
  }

  public metric_summary nonindex_summary() {
    return new metric_summary(interop_summaryJNI.run_summary_nonindex_summary__SWIG_0(swigCPtr, this), false);
  }

  public void nonindex_summary(metric_summary summary) {
    interop_summaryJNI.run_summary_nonindex_summary__SWIG_1(swigCPtr, this, metric_summary.getCPtr(summary), summary);
  }

  public cycle_state_summary cycle_state() {
    return new cycle_state_summary(interop_summaryJNI.run_summary_cycle_state(swigCPtr, this), false);
  }

  public void clear() {
    interop_summaryJNI.run_summary_clear(swigCPtr, this);
  }

}
