/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class info {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected info(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(info obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_runJNI.delete_info(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public info(String name, String date, String instrument_name, long run_number, long version, flowcell_layout flowcell, string_vector channels, image_dimensions image_dim, read_info_vector reads) {
    this(interop_runJNI.new_info__SWIG_0(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), flowcell, string_vector.getCPtr(channels), channels, image_dimensions.getCPtr(image_dim), image_dim, read_info_vector.getCPtr(reads), reads), true);
  }

  public info(String name, String date, String instrument_name, long run_number, long version, flowcell_layout flowcell, string_vector channels, image_dimensions image_dim) {
    this(interop_runJNI.new_info__SWIG_1(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), flowcell, string_vector.getCPtr(channels), channels, image_dimensions.getCPtr(image_dim), image_dim), true);
  }

  public info(String name, String date, String instrument_name, long run_number, long version, flowcell_layout flowcell, string_vector channels) {
    this(interop_runJNI.new_info__SWIG_2(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), flowcell, string_vector.getCPtr(channels), channels), true);
  }

  public info(String name, String date, String instrument_name, long run_number, long version, flowcell_layout flowcell) {
    this(interop_runJNI.new_info__SWIG_3(name, date, instrument_name, run_number, version, flowcell_layout.getCPtr(flowcell), flowcell), true);
  }

  public info(String name, String date, String instrument_name, long run_number, long version) {
    this(interop_runJNI.new_info__SWIG_4(name, date, instrument_name, run_number, version), true);
  }

  public info(String name, String date, String instrument_name, long run_number) {
    this(interop_runJNI.new_info__SWIG_5(name, date, instrument_name, run_number), true);
  }

  public info(String name, String date, String instrument_name) {
    this(interop_runJNI.new_info__SWIG_6(name, date, instrument_name), true);
  }

  public info(String name, String date) {
    this(interop_runJNI.new_info__SWIG_7(name, date), true);
  }

  public info(String name) {
    this(interop_runJNI.new_info__SWIG_8(name), true);
  }

  public info() {
    this(interop_runJNI.new_info__SWIG_9(), true);
  }

  public info(flowcell_layout flowcell, read_info_vector reads, string_vector channels) {
    this(interop_runJNI.new_info__SWIG_10(flowcell_layout.getCPtr(flowcell), flowcell, read_info_vector.getCPtr(reads), reads, string_vector.getCPtr(channels), channels), true);
  }

  public info(flowcell_layout flowcell, read_info_vector reads) {
    this(interop_runJNI.new_info__SWIG_11(flowcell_layout.getCPtr(flowcell), flowcell, read_info_vector.getCPtr(reads), reads), true);
  }

  public info(flowcell_layout flowcell) {
    this(interop_runJNI.new_info__SWIG_12(flowcell_layout.getCPtr(flowcell), flowcell), true);
  }

  public void read(String run_folder) throws xml_file_not_found_exception, bad_xml_format_exception, empty_xml_format_exception, missing_xml_element_exception, xml_parse_exception, xml_format_exception, base_exception {
    interop_runJNI.info_read__SWIG_0(swigCPtr, this, run_folder);
  }

  public void validate() throws invalid_run_info_exception, invalid_tile_naming_method {
    interop_runJNI.info_validate__SWIG_0(swigCPtr, this);
  }

  public void validate_tiles() throws invalid_tile_list_exception {
    interop_runJNI.info_validate_tiles(swigCPtr, this);
  }

  public void validate(long lane, long tile) throws invalid_run_info_exception {
    interop_runJNI.info_validate__SWIG_1(swigCPtr, this, lane, tile);
  }

  public void validate_cycle(long lane, long tile, long cycle) throws invalid_run_info_exception, invalid_run_info_cycle_exception {
    interop_runJNI.info_validate_cycle(swigCPtr, this, lane, tile, cycle);
  }

  public void validate_read(long lane, long tile, long read) throws invalid_run_info_exception {
    interop_runJNI.info_validate_read(swigCPtr, this, lane, tile, read);
  }

  public String instrument_name() {
    return interop_runJNI.info_instrument_name(swigCPtr, this);
  }

  public String flowcell_id() {
    return interop_runJNI.info_flowcell_id(swigCPtr, this);
  }

  public long run_number() {
    return interop_runJNI.info_run_number(swigCPtr, this);
  }

  public String name() {
    return interop_runJNI.info_name(swigCPtr, this);
  }

  public String date() {
    return interop_runJNI.info_date(swigCPtr, this);
  }

  public long version() {
    return interop_runJNI.info_version(swigCPtr, this);
  }

  public flowcell_layout flowcell() {
    return new flowcell_layout(interop_runJNI.info_flowcell__SWIG_0(swigCPtr, this), false);
  }

  public string_vector channels() {
    return new string_vector(interop_runJNI.info_channels__SWIG_0(swigCPtr, this), false);
  }

  public image_dimensions dimensions_of_image() {
    return new image_dimensions(interop_runJNI.info_dimensions_of_image(swigCPtr, this), false);
  }

  public read_info_vector reads() {
    return new read_info_vector(interop_runJNI.info_reads__SWIG_0(swigCPtr, this), false);
  }

  public boolean is_indexed() {
    return interop_runJNI.info_is_indexed(swigCPtr, this);
  }

  public boolean is_paired_end() {
    return interop_runJNI.info_is_paired_end(swigCPtr, this);
  }

  public boolean is_last_cycle_of_read(long cycle) {
    return interop_runJNI.info_is_last_cycle_of_read(swigCPtr, this, cycle);
  }

  public long cycle_within_read(long cycle) {
    return interop_runJNI.info_cycle_within_read(swigCPtr, this, cycle);
  }

  public read_info read(long read_number) throws invalid_read_exception {
    return new read_info(interop_runJNI.info_read__SWIG_1(swigCPtr, this, read_number), false);
  }

  public void channels(string_vector channels) {
    interop_runJNI.info_channels__SWIG_1(swigCPtr, this, string_vector.getCPtr(channels), channels);
  }

  public void reads(read_info_vector read_vec) {
    interop_runJNI.info_reads__SWIG_1(swigCPtr, this, read_info_vector.getCPtr(read_vec), read_vec);
  }

  public void set_naming_method(tile_naming_method naming_method) {
    interop_runJNI.info_set_naming_method(swigCPtr, this, naming_method.swigValue());
  }

  public void flowcell(flowcell_layout flowcell) {
    interop_runJNI.info_flowcell__SWIG_1(swigCPtr, this, flowcell_layout.getCPtr(flowcell), flowcell);
  }

  public long total_cycles() {
    return interop_runJNI.info_total_cycles(swigCPtr, this);
  }

  public long useable_cycles() {
    return interop_runJNI.info_useable_cycles(swigCPtr, this);
  }

  public void read_file(String filename) throws xml_file_not_found_exception, bad_xml_format_exception, empty_xml_format_exception, missing_xml_element_exception, xml_parse_exception {
    interop_runJNI.info_read_file(swigCPtr, this, filename);
  }

  public void parse(String data) throws xml_file_not_found_exception, bad_xml_format_exception, empty_xml_format_exception, missing_xml_element_exception, xml_parse_exception {
    interop_runJNI.info_parse(swigCPtr, this, data);
  }

  public void write(String filename) throws xml_file_not_found_exception, bad_xml_format_exception {
    interop_runJNI.info_write__SWIG_0(swigCPtr, this, filename);
  }

  public void write(SWIGTYPE_p_std__ostream out) throws bad_xml_format_exception {
    interop_runJNI.info_write__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

}
