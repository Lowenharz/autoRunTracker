/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class interop_run_metrics {
  public static void copy_focus(base_extraction_metrics metrics, float[] focus_scores, long channel, long n) throws invalid_parameter, index_out_of_bounds_exception {
    interop_run_metricsJNI.copy_focus(base_extraction_metrics.getCPtr(metrics), metrics, focus_scores, channel, n);
  }

  public static long count_q_metric_bins(base_q_metrics metric_set) {
    return interop_run_metricsJNI.count_q_metric_bins__SWIG_1(base_q_metrics.getCPtr(metric_set), metric_set);
  }

  public static long count_q_metric_bins(base_q_by_lane_metrics metric_set) {
    return interop_run_metricsJNI.count_q_metric_bins__SWIG_2(base_q_by_lane_metrics.getCPtr(metric_set), metric_set);
  }

  public static long count_q_metric_bins(base_q_collapsed_metrics arg0) {
    return interop_run_metricsJNI.count_q_metric_bins__SWIG_3(base_q_collapsed_metrics.getCPtr(arg0), arg0);
  }

  public static void populate_cumulative_distribution(base_q_by_lane_metrics q_metric_set) throws index_out_of_bounds_exception {
    interop_run_metricsJNI.populate_cumulative_distribution__SWIG_0(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static void populate_cumulative_distribution(base_q_metrics q_metric_set) throws index_out_of_bounds_exception {
    interop_run_metricsJNI.populate_cumulative_distribution__SWIG_1(base_q_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static void populate_cumulative_distribution(base_q_collapsed_metrics q_metric_set) throws index_out_of_bounds_exception {
    interop_run_metricsJNI.populate_cumulative_distribution__SWIG_2(base_q_collapsed_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static boolean requires_legacy_bins(long count) {
    return interop_run_metricsJNI.requires_legacy_bins(count);
  }

  public static void populate_legacy_q_score_bins(q_score_bin_vector q_score_bins, instrument_type instrument, long count) {
    interop_run_metricsJNI.populate_legacy_q_score_bins__SWIG_0(q_score_bin_vector.getCPtr(q_score_bins), q_score_bins, instrument.swigValue(), count);
  }

  public static void compress_q_metrics(base_q_metrics q_metric_set) {
    interop_run_metricsJNI.compress_q_metrics__SWIG_0(base_q_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static void compress_q_metrics(base_q_by_lane_metrics q_metric_set) {
    interop_run_metricsJNI.compress_q_metrics__SWIG_1(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static void populate_legacy_q_score_bins(base_q_metrics q_metric_set, q_score_bin_vector q_score_bins, instrument_type instrument) {
    interop_run_metricsJNI.populate_legacy_q_score_bins__SWIG_1(base_q_metrics.getCPtr(q_metric_set), q_metric_set, q_score_bin_vector.getCPtr(q_score_bins), q_score_bins, instrument.swigValue());
  }

  public static void populate_legacy_q_score_bins(base_q_by_lane_metrics q_metric_set, q_score_bin_vector q_score_bins, instrument_type instrument) {
    interop_run_metricsJNI.populate_legacy_q_score_bins__SWIG_2(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set, q_score_bin_vector.getCPtr(q_score_bins), q_score_bins, instrument.swigValue());
  }

  public static long count_qvals(base_q_metrics q_metric_set) {
    return interop_run_metricsJNI.count_qvals__SWIG_0(base_q_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long count_qvals(base_q_by_lane_metrics q_metric_set) {
    return interop_run_metricsJNI.count_qvals__SWIG_1(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long count_qvals(base_q_collapsed_metrics arg0) {
    return interop_run_metricsJNI.count_qvals__SWIG_2(base_q_collapsed_metrics.getCPtr(arg0), arg0);
  }

  public static boolean is_compressed(base_q_metrics q_metric_set) {
    return interop_run_metricsJNI.is_compressed__SWIG_0(base_q_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static boolean is_compressed(base_q_collapsed_metrics q_metric_set) {
    return interop_run_metricsJNI.is_compressed__SWIG_1(base_q_collapsed_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static boolean is_compressed(base_q_by_lane_metrics q_metric_set) {
    return interop_run_metricsJNI.is_compressed__SWIG_2(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long max_qval(base_q_metrics q_metric_set) {
    return interop_run_metricsJNI.max_qval__SWIG_0(base_q_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long max_qval(base_q_by_lane_metrics q_metric_set) {
    return interop_run_metricsJNI.max_qval__SWIG_1(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long max_qval(base_q_collapsed_metrics q_metric_set) {
    return interop_run_metricsJNI.max_qval__SWIG_2(base_q_collapsed_metrics.getCPtr(q_metric_set), q_metric_set);
  }

  public static long index_for_q_value(base_q_metrics q_metric_set, long qval) {
    return interop_run_metricsJNI.index_for_q_value__SWIG_0(base_q_metrics.getCPtr(q_metric_set), q_metric_set, qval);
  }

  public static long index_for_q_value(base_q_by_lane_metrics q_metric_set, long qval) {
    return interop_run_metricsJNI.index_for_q_value__SWIG_1(base_q_by_lane_metrics.getCPtr(q_metric_set), q_metric_set, qval);
  }

  public static void create_collapse_q_metrics(base_q_metrics metric_set, base_q_collapsed_metrics collapsed) {
    interop_run_metricsJNI.create_collapse_q_metrics(base_q_metrics.getCPtr(metric_set), metric_set, base_q_collapsed_metrics.getCPtr(collapsed), collapsed);
  }

  public static void create_q_metrics_by_lane(base_q_metrics metric_set, base_q_by_lane_metrics bylane, instrument_type instrument) throws index_out_of_bounds_exception {
    interop_run_metricsJNI.create_q_metrics_by_lane(base_q_metrics.getCPtr(metric_set), metric_set, base_q_by_lane_metrics.getCPtr(bylane), bylane, instrument.swigValue());
  }

  public static metric_group to_group(metric_type type) {
    return metric_group.swigToEnum(interop_run_metricsJNI.to_group(type.swigValue()));
  }

  public static String to_description(metric_type type) {
    return interop_run_metricsJNI.to_description(type.swigValue());
  }

  public static void list_descriptions(metric_type_description_vector types) {
    interop_run_metricsJNI.list_descriptions(metric_type_description_vector.getCPtr(types), types);
  }

  public static metric_feature_type to_feature(metric_type type) {
    return metric_feature_type.swigToEnum(interop_run_metricsJNI.to_feature__SWIG_0(type.swigValue()));
  }

  public static metric_feature_type to_feature(metric_group type) {
    return metric_feature_type.swigToEnum(interop_run_metricsJNI.to_feature__SWIG_1(type.swigValue()));
  }

  public static boolean is_base_metric(metric_type type) {
    return interop_run_metricsJNI.is_base_metric(type.swigValue());
  }

  public static boolean is_channel_metric(metric_type type) {
    return interop_run_metricsJNI.is_channel_metric(type.swigValue());
  }

  public static boolean is_read_metric(metric_type type) {
    return interop_run_metricsJNI.is_read_metric(type.swigValue());
  }

  public static boolean is_cycle_metric(metric_type type) {
    return interop_run_metricsJNI.is_cycle_metric(type.swigValue());
  }

  public static boolean is_tile_metric(metric_type type) {
    return interop_run_metricsJNI.is_tile_metric(type.swigValue());
  }

  public static metric_feature_type to_feature(event_type type) {
    return metric_feature_type.swigToEnum(interop_run_metricsJNI.to_feature__SWIG_2(type.swigValue()));
  }

  public static boolean is_subtile_metric(metric_type type) {
    return interop_run_metricsJNI.is_subtile_metric(type.swigValue());
  }

  public static boolean is_interval_event(event_type type) {
    return interop_run_metricsJNI.is_interval_event(type.swigValue());
  }

  public static boolean is_iuo_metric(metric_type type) {
    return interop_run_metricsJNI.is_iuo_metric(type.swigValue());
  }

  public static boolean is_iuo(metric_group type) {
    return interop_run_metricsJNI.is_iuo(type.swigValue());
  }

  public static void list_metrics_to_load(metric_group group, uchar_vector valid_to_load, instrument_type instrument, boolean is_iuo) {
    interop_run_metricsJNI.list_metrics_to_load__SWIG_0(group.swigValue(), uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), is_iuo);
  }

  public static void list_metrics_to_load(metric_type type, uchar_vector valid_to_load, instrument_type instrument, boolean is_iuo) {
    interop_run_metricsJNI.list_metrics_to_load__SWIG_1(type.swigValue(), uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), is_iuo);
  }

  public static void list_metrics_to_load(metric_group_vector groups, uchar_vector valid_to_load, instrument_type instrument, boolean is_iuo) {
    interop_run_metricsJNI.list_metrics_to_load__SWIG_2(metric_group_vector.getCPtr(groups), groups, uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), is_iuo);
  }

  public static void list_metrics_to_load(metric_type_vector types, uchar_vector valid_to_load, instrument_type instrument, boolean is_iuo) {
    interop_run_metricsJNI.list_metrics_to_load__SWIG_3(metric_type_vector.getCPtr(types), types, uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), is_iuo);
  }

  public static void list_metrics_to_load(String metric_name, uchar_vector valid_to_load, instrument_type instrument, boolean is_iuo) throws invalid_metric_type {
    interop_run_metricsJNI.list_metrics_to_load__SWIG_4(metric_name, uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), is_iuo);
  }

  public static void list_summary_metric_groups(metric_group_vector groups, instrument_type instrument, boolean show_iuo) {
    interop_run_metricsJNI.list_summary_metric_groups__SWIG_0(metric_group_vector.getCPtr(groups), groups, instrument.swigValue(), show_iuo);
  }

  public static void list_summary_metric_groups(metric_group_vector groups, instrument_type instrument) {
    interop_run_metricsJNI.list_summary_metric_groups__SWIG_1(metric_group_vector.getCPtr(groups), groups, instrument.swigValue());
  }

  public static void list_index_summary_metric_groups(metric_group_vector groups) {
    interop_run_metricsJNI.list_index_summary_metric_groups(metric_group_vector.getCPtr(groups), groups);
  }

  public static void list_summary_metrics_to_load(uchar_vector valid_to_load, instrument_type instrument, boolean show_iuo) {
    interop_run_metricsJNI.list_summary_metrics_to_load__SWIG_0(uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue(), show_iuo);
  }

  public static void list_summary_metrics_to_load(uchar_vector valid_to_load, instrument_type instrument) {
    interop_run_metricsJNI.list_summary_metrics_to_load__SWIG_1(uchar_vector.getCPtr(valid_to_load), valid_to_load, instrument.swigValue());
  }

  public static void list_summary_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_summary_metrics_to_load__SWIG_2(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_index_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_index_metrics_to_load(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_analysis_metrics_to_load(uchar_vector valid_to_load, boolean show_iuo) {
    interop_run_metricsJNI.list_analysis_metrics_to_load__SWIG_0(uchar_vector.getCPtr(valid_to_load), valid_to_load, show_iuo);
  }

  public static void list_analysis_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_analysis_metrics_to_load__SWIG_1(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_event_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_event_metrics_to_load(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_subtile_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_subtile_metrics_to_load(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_run_diagnostics_metrics_to_load(uchar_vector valid_to_load) {
    interop_run_metricsJNI.list_run_diagnostics_metrics_to_load(uchar_vector.getCPtr(valid_to_load), valid_to_load);
  }

  public static void list_run_diagnostics_metric_groups(metric_group_vector groups) {
    interop_run_metricsJNI.list_run_diagnostics_metric_groups(metric_group_vector.getCPtr(groups), groups);
  }

}
