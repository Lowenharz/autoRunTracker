/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class extraction_metric extends base_cycle_metric {
  private transient long swigCPtr;

  protected extraction_metric(long cPtr, boolean cMemoryOwn) {
    super(interop_metricsJNI.extraction_metric_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(extraction_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_metricsJNI.delete_extraction_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public extraction_metric() {
    this(interop_metricsJNI.new_extraction_metric__SWIG_0(), true);
  }

  public extraction_metric(extraction_metric_header header) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_1(extraction_metric_header.getCPtr(header), header), true);
  }

  public extraction_metric(long lane, long tile, long cycle, java.math.BigInteger date_time, ushort_vector intensities_p90, float_vector focus_scores) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_2(lane, tile, cycle, date_time, ushort_vector.getCPtr(intensities_p90), intensities_p90, float_vector.getCPtr(focus_scores), focus_scores), true);
  }

  public extraction_metric(long lane, long tile, long cycle, java.math.BigInteger date_time, short[] intensities_p90, float[] focus_scores, long channel_count) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_3(lane, tile, cycle, date_time, intensities_p90, focus_scores, channel_count), true);
  }

  public extraction_metric(long lane, long tile, long cycle, java.math.BigInteger date_time, short[] intensities_p90, float[] focus_scores) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_4(lane, tile, cycle, date_time, intensities_p90, focus_scores), true);
  }

  public extraction_metric(long lane, long tile, long cycle, csharp_date_time date_time, ushort_vector intensities_p90, float_vector focus_scores) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_5(lane, tile, cycle, csharp_date_time.getCPtr(date_time), date_time, ushort_vector.getCPtr(intensities_p90), intensities_p90, float_vector.getCPtr(focus_scores), focus_scores), true);
  }

  public extraction_metric(long lane, long tile, long cycle, csharp_date_time date_time, short[] intensities_p90, float[] focus_scores, long channel_count) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_6(lane, tile, cycle, csharp_date_time.getCPtr(date_time), date_time, intensities_p90, focus_scores, channel_count), true);
  }

  public extraction_metric(long lane, long tile, long cycle, csharp_date_time date_time, short[] intensities_p90, float[] focus_scores) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_7(lane, tile, cycle, csharp_date_time.getCPtr(date_time), date_time, intensities_p90, focus_scores), true);
  }

  public extraction_metric(long lane, long tile, long cycle, ushort_vector max_intensity_values, float_vector focus_scores) {
    this(interop_metricsJNI.new_extraction_metric__SWIG_8(lane, tile, cycle, ushort_vector.getCPtr(max_intensity_values), max_intensity_values, float_vector.getCPtr(focus_scores), focus_scores), true);
  }

  public void set(long lane, long tile, long cycle, java.math.BigInteger date_time, ushort_vector max_intensity_values, float_vector focus_scores) {
    interop_metricsJNI.extraction_metric_set__SWIG_0(swigCPtr, this, lane, tile, cycle, date_time, ushort_vector.getCPtr(max_intensity_values), max_intensity_values, float_vector.getCPtr(focus_scores), focus_scores);
  }

  public void set(long lane, long tile, long cycle, ushort_vector max_intensity_values, float_vector focus_scores) {
    interop_metricsJNI.extraction_metric_set__SWIG_1(swigCPtr, this, lane, tile, cycle, ushort_vector.getCPtr(max_intensity_values), max_intensity_values, float_vector.getCPtr(focus_scores), focus_scores);
  }

  public java.math.BigInteger date_time() {
    return interop_metricsJNI.extraction_metric_date_time__SWIG_0(swigCPtr, this);
  }

  public csharp_date_time date_time_csharp() {
    return new csharp_date_time(interop_metricsJNI.extraction_metric_date_time_csharp(swigCPtr, this), false);
  }

  public java.math.BigInteger date_time_csharp_raw() {
    return interop_metricsJNI.extraction_metric_date_time_csharp_raw(swigCPtr, this);
  }

  public int max_intensity(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.extraction_metric_max_intensity(swigCPtr, this, channel);
  }

  public float focus_score(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.extraction_metric_focus_score(swigCPtr, this, channel);
  }

  public ushort_vector max_intensity_values() {
    return new ushort_vector(interop_metricsJNI.extraction_metric_max_intensity_values(swigCPtr, this), false);
  }

  public float_vector focus_scores() {
    return new float_vector(interop_metricsJNI.extraction_metric_focus_scores(swigCPtr, this), false);
  }

  public long channel_count() {
    return interop_metricsJNI.extraction_metric_channel_count(swigCPtr, this);
  }

  public void trim(long channel_count) {
    interop_metricsJNI.extraction_metric_trim(swigCPtr, this, channel_count);
  }

  public float focusScore(long channel) {
    return interop_metricsJNI.extraction_metric_focusScore(swigCPtr, this, channel);
  }

  public java.math.BigInteger dateTime() {
    return interop_metricsJNI.extraction_metric_dateTime(swigCPtr, this);
  }

  public float_vector focusScores() {
    return new float_vector(interop_metricsJNI.extraction_metric_focusScores(swigCPtr, this), false);
  }

  public void date_time(java.math.BigInteger time) {
    interop_metricsJNI.extraction_metric_date_time__SWIG_1(swigCPtr, this, time);
  }

  public boolean is_any_p90_zero() {
    return interop_metricsJNI.extraction_metric_is_any_p90_zero(swigCPtr, this);
  }

  public static String prefix() {
    return interop_metricsJNI.extraction_metric_prefix();
  }

  public final static int MAX_CHANNELS = interop_metricsJNI.extraction_metric_MAX_CHANNELS_get();
  public final static int TYPE = interop_metricsJNI.extraction_metric_TYPE_get();
  public final static int LATEST_VERSION = interop_metricsJNI.extraction_metric_LATEST_VERSION_get();

}
