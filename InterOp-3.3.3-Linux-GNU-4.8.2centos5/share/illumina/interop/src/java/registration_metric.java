/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class registration_metric extends base_cycle_metric {
  private transient long swigCPtr;

  protected registration_metric(long cPtr, boolean cMemoryOwn) {
    super(interop_metricsJNI.registration_metric_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(registration_metric obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        interop_metricsJNI.delete_registration_metric(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public registration_metric(long channel_count, long subregion_count) {
    this(interop_metricsJNI.new_registration_metric__SWIG_0(channel_count, subregion_count), true);
  }

  public registration_metric(long channel_count) {
    this(interop_metricsJNI.new_registration_metric__SWIG_1(channel_count), true);
  }

  public registration_metric() {
    this(interop_metricsJNI.new_registration_metric__SWIG_2(), true);
  }

  public registration_metric(registration_metric_header header) {
    this(interop_metricsJNI.new_registration_metric__SWIG_3(registration_metric_header.getCPtr(header), header), true);
  }

  public float affine_transform(long channel, long n) {
    return interop_metricsJNI.registration_metric_affine_transform__SWIG_0(swigCPtr, this, channel, n);
  }

  public float_vector affine_transform() {
    return new float_vector(interop_metricsJNI.registration_metric_affine_transform__SWIG_1(swigCPtr, this), false);
  }

  public float_vector predicted_error() {
    return new float_vector(interop_metricsJNI.registration_metric_predicted_error(swigCPtr, this), false);
  }

  public float sub_tile_offsets(long channel, long region, long n) {
    return interop_metricsJNI.registration_metric_sub_tile_offsets__SWIG_0(swigCPtr, this, channel, region, n);
  }

  public float_vector sub_tile_offsets() {
    return new float_vector(interop_metricsJNI.registration_metric_sub_tile_offsets__SWIG_1(swigCPtr, this), false);
  }

  public long channel_count() {
    return interop_metricsJNI.registration_metric_channel_count(swigCPtr, this);
  }

  public long sub_region_count() {
    return interop_metricsJNI.registration_metric_sub_region_count(swigCPtr, this);
  }

  public void set_predicted_error(long index, float err) {
    interop_metricsJNI.registration_metric_set_predicted_error(swigCPtr, this, index, err);
  }

  public float_vector max_residual_radial_errors() {
    return new float_vector(interop_metricsJNI.registration_metric_max_residual_radial_errors(swigCPtr, this), true);
  }

  public float max_residual_radial_error() {
    return interop_metricsJNI.registration_metric_max_residual_radial_error__SWIG_0(swigCPtr, this);
  }

  public float max_residual_radial_error(long channel) {
    return interop_metricsJNI.registration_metric_max_residual_radial_error__SWIG_1(swigCPtr, this, channel);
  }

  public float max_residual_x_error(long channel) {
    return interop_metricsJNI.registration_metric_max_residual_x_error(swigCPtr, this, channel);
  }

  public float max_residual_y_error(long channel) {
    return interop_metricsJNI.registration_metric_max_residual_y_error(swigCPtr, this, channel);
  }

  public float shear(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.registration_metric_shear(swigCPtr, this, channel);
  }

  public float theta_z(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.registration_metric_theta_z(swigCPtr, this, channel);
  }

  public float theta(long channel) throws index_out_of_bounds_exception {
    return interop_metricsJNI.registration_metric_theta(swigCPtr, this, channel);
  }

  public void set_rotation(long channel, float theta, float shear, float theta_z) throws index_out_of_bounds_exception {
    interop_metricsJNI.registration_metric_set_rotation(swigCPtr, this, channel, theta, shear, theta_z);
  }

  public boolean is_any_channel_registration_failure() {
    return interop_metricsJNI.registration_metric_is_any_channel_registration_failure(swigCPtr, this);
  }

  public static String prefix() {
    return interop_metricsJNI.registration_metric_prefix();
  }

  public final static int TYPE = interop_metricsJNI.registration_metric_TYPE_get();
  public final static int LATEST_VERSION = interop_metricsJNI.registration_metric_LATEST_VERSION_get();
  public final static int AFFINE_LENGTH = interop_metricsJNI.registration_metric_AFFINE_LENGTH_get();
  public final static int SUBREGION_PARAM_LENGTH = interop_metricsJNI.registration_metric_SUBREGION_PARAM_LENGTH_get();

}
