/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/model/summary/cycle_state_summary.h"
#include "interop/model/summary/stat_summary.h"
#include "interop/model/summary/surface_summary.h"
#include "interop/model/summary/metric_summary.h"
#include "interop/model/summary/lane_summary.h"
#include "interop/model/summary/metric_stat.h"
#include "interop/model/summary/read_summary.h"
#include "interop/model/summary/run_summary.h"
#include "interop/logic/metric/q_metric.h"

SWIGINTERN std::vector< illumina::interop::model::summary::surface_summary >::const_reference std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__get(std::vector< illumina::interop::model::summary::surface_summary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__set(std::vector< illumina::interop::model::summary::surface_summary > *self,int i,std::vector< illumina::interop::model::summary::surface_summary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::summary::lane_summary >::const_reference std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__get(std::vector< illumina::interop::model::summary::lane_summary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__set(std::vector< illumina::interop::model::summary::lane_summary > *self,int i,std::vector< illumina::interop::model::summary::lane_summary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::summary::read_summary >::const_reference std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__get(std::vector< illumina::interop::model::summary::read_summary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__set(std::vector< illumina::interop::model::summary::read_summary > *self,int i,std::vector< illumina::interop::model::summary::read_summary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "interop/logic/summary/run_summary.h"


#include "interop/model/summary/index_count_summary.h"
#include "interop/model/summary/index_lane_summary.h"
#include "interop/model/summary/index_flowcell_summary.h"

SWIGINTERN std::vector< illumina::interop::model::summary::index_count_summary >::const_reference std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__get(std::vector< illumina::interop::model::summary::index_count_summary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__set(std::vector< illumina::interop::model::summary::index_count_summary > *self,int i,std::vector< illumina::interop::model::summary::index_count_summary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< illumina::interop::model::summary::index_lane_summary >::const_reference std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__get(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__set(std::vector< illumina::interop::model::summary::index_lane_summary > *self,int i,std::vector< illumina::interop::model::summary::index_lane_summary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "interop/logic/summary/index_summary.h"


#include "interop/model/table/compass_cycle_table.h"
#include "interop/logic/summary/compass_summary.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1cycle_1state_1summary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::cycle_state_summary *)new illumina::interop::model::summary::cycle_state_summary();
  *(illumina::interop::model::summary::cycle_state_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1extracted_1cycle_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->extracted_cycle_range();
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1called_1cycle_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->called_cycle_range();
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1qscored_1cycle_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->qscored_cycle_range();
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1error_1cycle_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  result = (illumina::interop::model::run::cycle_range *) &((illumina::interop::model::summary::cycle_state_summary const *)arg1)->error_cycle_range();
  *(illumina::interop::model::run::cycle_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  result = (bool)((illumina::interop::model::summary::cycle_state_summary const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1extracted_1cycle_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::run::cycle_range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return ;
  } 
  (arg1)->extracted_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1called_1cycle_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::run::cycle_range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return ;
  } 
  (arg1)->called_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1qscored_1cycle_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::run::cycle_range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return ;
  } 
  (arg1)->qscored_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_cycle_1state_1summary_1error_1cycle_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  illumina::interop::model::run::cycle_range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::run::cycle_range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::cycle_range const & reference is null");
    return ;
  } 
  (arg1)->error_cycle_range((illumina::interop::model::run::cycle_range const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1cycle_1state_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::cycle_state_summary *arg1 = (illumina::interop::model::summary::cycle_state_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::cycle_state_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1stat_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::stat_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::stat_summary *)new illumina::interop::model::summary::stat_summary(arg1);
  *(illumina::interop::model::summary::stat_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1gt_1q30_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_gt_q30();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1yield_1g_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->yield_g();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1projected_1yield_1g_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->projected_yield_g();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1reads_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->reads();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1reads_1pf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->reads_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1density_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->density();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1density_1pf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->density_pf();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1cluster_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->cluster_count();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1cluster_1count_1pf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->cluster_count_pf();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1pf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_pf();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1aligned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_aligned();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_135_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_35();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_150_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_50();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_175_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_75();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_1100_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->error_rate_100();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1first_1cycle_1intensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->first_cycle_intensity();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1slope_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing_slope();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->phasing_offset();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1slope_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing_slope();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->prephasing_offset();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1gt_1q30_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1yield_1g_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->yield_g(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1projected_1yield_1g_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->projected_yield_g(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1reads_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->reads(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1reads_1pf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->reads_pf(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1density_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->density((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1density_1pf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->density_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1cluster_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->cluster_count((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1cluster_1count_1pf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->cluster_count_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1pf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->percent_pf((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->phasing((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->prephasing((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1aligned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->percent_aligned((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->error_rate((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_135_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->error_rate_35((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_150_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->error_rate_50((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_175_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->error_rate_75((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1error_1rate_1100_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->error_rate_100((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1first_1cycle_1intensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->first_cycle_intensity((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1gt_1q30_1last_110_1cycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_gt_q30_last_10_cycles();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1occupied_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::stat_summary const *)arg1)->percent_occupied();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1theta_1z_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->theta_z();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1theta_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (illumina::interop::model::summary::stat_summary::metric_stat_t *) &((illumina::interop::model::summary::stat_summary const *)arg1)->theta();
  *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1slope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->phasing_slope((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1phasing_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->phasing_offset((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1slope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->prephasing_slope((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1prephasing_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->prephasing_offset((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1fwhm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (std::vector< float > *) &((illumina::interop::model::summary::stat_summary const *)arg1)->fwhm();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  result = (std::vector< float > *) &((illumina::interop::model::summary::stat_summary const *)arg1)->percent_base();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1gt_1q30_1last_110_1cycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30_last_10_cycles(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1fwhm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->fwhm(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->percent_base(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1percent_1occupied_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_occupied(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1theta_1z_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->theta_z((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1theta_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  illumina::interop::model::summary::stat_summary::metric_stat_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::stat_summary::metric_stat_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::stat_summary::metric_stat_t const & reference is null");
    return ;
  } 
  (arg1)->theta((illumina::interop::model::summary::stat_summary::metric_stat_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_stat_1summary_1resize_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize_stat(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1stat_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::stat_summary *arg1 = (illumina::interop::model::summary::stat_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::stat_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1surface_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary(arg1,arg2);
  *(illumina::interop::model::summary::surface_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1surface_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary(arg1);
  *(illumina::interop::model::summary::surface_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1surface_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::surface_summary *)new illumina::interop::model::summary::surface_summary();
  *(illumina::interop::model::summary::surface_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1surface_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::surface_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::surface_summary const *)arg1)->surface();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1tile_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::surface_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::surface_summary const *)arg1)->tile_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1surface_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::surface_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->surface(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1tile_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::surface_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1surface_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::surface_summary *arg1 = (illumina::interop::model::summary::surface_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::surface_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1metric_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::metric_summary *)new illumina::interop::model::summary::metric_summary(arg1);
  *(illumina::interop::model::summary::metric_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1error_1rate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->error_rate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1aligned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_aligned();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1first_1cycle_1intensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->first_cycle_intensity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1gt_1q30_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_gt_q30();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1yield_1g_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->yield_g();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1projected_1yield_1g_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->projected_yield_g();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1gt_1q30_1last_110_1cycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_gt_q30_last_10_cycles();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1occupied_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_occupied();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1theta_1z_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->theta_z();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1theta_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->theta();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1first_1cycle_1intensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->first_cycle_intensity(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1error_1rate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->error_rate(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1aligned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_aligned(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1gt_1q30_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1yield_1g_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->yield_g(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1projected_1yield_1g_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->projected_yield_g(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1gt_1q30_1last_110_1cycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_gt_q30_last_10_cycles(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1occupied_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_occupied(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1theta_1z_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->theta_z(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1theta_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->theta(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1pf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1cluster_1density_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->cluster_density();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1cluster_1density_1pf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->cluster_density_pf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1base_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->percent_base();
  *(illumina::interop::model::summary::metric_summary::float_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1phasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->phasing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1prephasing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->prephasing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1no_1call_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_summary const *)arg1)->percent_no_call();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1fwhm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->fwhm();
  *(illumina::interop::model::summary::metric_summary::float_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1resynthesis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  illumina::interop::model::summary::metric_summary::float_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary::float_vector_t *) &((illumina::interop::model::summary::metric_summary const *)arg1)->resynthesis();
  *(illumina::interop::model::summary::metric_summary::float_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1fwhm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->fwhm(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1resynthesis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->resynthesis(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->percent_base(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1phasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->phasing(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1prephasing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->prephasing(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1percent_1no_1call_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->percent_no_call(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1cluster_1density_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->cluster_density(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1cluster_1density_1pf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->cluster_density_pf(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1summary_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1metric_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::metric_summary *arg1 = (illumina::interop::model::summary::metric_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::metric_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1lane_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary(arg1,arg2);
  *(illumina::interop::model::summary::lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1lane_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary(arg1);
  *(illumina::interop::model::summary::lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1lane_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::lane_summary *)new illumina::interop::model::summary::lane_summary();
  *(illumina::interop::model::summary::lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::surface_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::surface_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::summary::surface_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  illumina::interop::model::summary::lane_summary::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::lane_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1lane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->lane(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1tile_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->tile_count(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1cycle_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  result = (illumina::interop::model::summary::cycle_state_summary *) &(arg1)->cycle_state();
  *(illumina::interop::model::summary::cycle_state_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1lane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->lane();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1tile_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->tile_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::lane_summary const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1lane_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::lane_summary *arg1 = (illumina::interop::model::summary::lane_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::lane_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1metric_1stat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1,arg2,arg3);
  *(illumina::interop::model::summary::metric_stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1metric_1stat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1,arg2);
  *(illumina::interop::model::summary::metric_stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1metric_1stat_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat(arg1);
  *(illumina::interop::model::summary::metric_stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1metric_1stat_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::metric_stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::metric_stat *)new illumina::interop::model::summary::metric_stat();
  *(illumina::interop::model::summary::metric_stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1mean_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->mean(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1stddev_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->stddev(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1median_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->median(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1mean_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->mean();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1stddev_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->stddev();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_metric_1stat_1median_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  result = (float)((illumina::interop::model::summary::metric_stat const *)arg1)->median();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1metric_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::metric_stat *arg1 = (illumina::interop::model::summary::metric_stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::metric_stat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1read_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::read_info const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary((illumina::interop::model::run::read_info const &)*arg1,arg2);
  *(illumina::interop::model::summary::read_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1read_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::run::read_info *arg1 = 0 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::run::read_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::read_info const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary((illumina::interop::model::run::read_info const &)*arg1);
  *(illumina::interop::model::summary::read_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1read_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::read_summary *)new illumina::interop::model::summary::read_summary();
  *(illumina::interop::model::summary::read_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::read_summary::size_type arg2 ;
  illumina::interop::model::summary::lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::read_summary::size_type)jarg2; 
  try {
    result = (illumina::interop::model::summary::lane_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::summary::lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::read_summary::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::read_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::run::read_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  result = (illumina::interop::model::run::read_info *) &(arg1)->read();
  *(illumina::interop::model::run::read_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->summary();
  *(illumina::interop::model::summary::metric_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::metric_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::metric_summary const & reference is null");
    return ;
  } 
  (arg1)->summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::read_summary const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1lane_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::read_summary const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1read_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::read_summary *arg1 = (illumina::interop::model::summary::read_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::read_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1run_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::run_summary *)new illumina::interop::model::summary::run_summary();
  *(illumina::interop::model::summary::run_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1run_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  illumina::interop::model::summary::run_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::run::read_info > const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (illumina::interop::model::summary::run_summary *)new illumina::interop::model::summary::run_summary((std::vector< illumina::interop::model::run::read_info > const &)*arg1,arg2,arg3,arg4);
  *(illumina::interop::model::summary::run_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::run::info *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::run::info **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::run::info const & reference is null");
    return ;
  } 
  (arg1)->initialize((illumina::interop::model::run::info const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::run::read_info > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->initialize((std::vector< illumina::interop::model::run::read_info > const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1copy_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  std::vector< illumina::interop::model::run::read_info > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::run::read_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::run::read_info > & reference is null");
    return ;
  } 
  (arg1)->copy_reads(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::read_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::read_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::summary::read_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1lane_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->lane_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1lane_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->lane_count(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1surface_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->surface_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::run_summary const *)arg1)->channel_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1surface_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->surface_count(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1total_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->total_summary();
  *(illumina::interop::model::summary::metric_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1total_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::metric_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::metric_summary const & reference is null");
    return ;
  } 
  (arg1)->total_summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1nonindex_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = (illumina::interop::model::summary::metric_summary *) &(arg1)->nonindex_summary();
  *(illumina::interop::model::summary::metric_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1nonindex_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::metric_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::metric_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::metric_summary const & reference is null");
    return ;
  } 
  (arg1)->nonindex_summary((illumina::interop::model::summary::metric_summary const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1cycle_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  illumina::interop::model::summary::cycle_state_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  result = (illumina::interop::model::summary::cycle_state_summary *) &(arg1)->cycle_state();
  *(illumina::interop::model::summary::cycle_state_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_run_1summary_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1run_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::run_summary *arg1 = (illumina::interop::model::summary::run_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::run_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1surface_1summary_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::summary::surface_summary > *)new std::vector< illumina::interop::model::summary::surface_summary >();
  *(std::vector< illumina::interop::model::summary::surface_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1surface_1summary_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type arg1 ;
  std::vector< illumina::interop::model::summary::surface_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::summary::surface_summary >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::summary::surface_summary > *)new std::vector< illumina::interop::model::summary::surface_summary >(arg1);
  *(std::vector< illumina::interop::model::summary::surface_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::surface_summary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::surface_summary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::surface_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::summary::surface_summary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::surface_summary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::summary::surface_summary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::surface_summary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::summary::surface_summary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::surface_summary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::surface_summary >::value_type *) &std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::summary::surface_summary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::surface_summary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::summary::surface_summary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::surface_summary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_surface_summary_Sg__set(arg1,arg2,(illumina::interop::model::summary::surface_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1surface_1summary_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::summary::surface_summary > *arg1 = (std::vector< illumina::interop::model::summary::surface_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::summary::surface_summary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1lane_1summary_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::summary::lane_summary > *)new std::vector< illumina::interop::model::summary::lane_summary >();
  *(std::vector< illumina::interop::model::summary::lane_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1lane_1summary_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type arg1 ;
  std::vector< illumina::interop::model::summary::lane_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::summary::lane_summary >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::summary::lane_summary > *)new std::vector< illumina::interop::model::summary::lane_summary >(arg1);
  *(std::vector< illumina::interop::model::summary::lane_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::lane_summary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::lane_summary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::lane_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::summary::lane_summary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::lane_summary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::summary::lane_summary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::lane_summary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::summary::lane_summary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::lane_summary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::lane_summary >::value_type *) &std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::summary::lane_summary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::lane_summary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::summary::lane_summary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::lane_summary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_lane_summary_Sg__set(arg1,arg2,(illumina::interop::model::summary::lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1lane_1summary_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::summary::lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::lane_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::summary::lane_summary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1read_1summary_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::summary::read_summary > *)new std::vector< illumina::interop::model::summary::read_summary >();
  *(std::vector< illumina::interop::model::summary::read_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1read_1summary_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type arg1 ;
  std::vector< illumina::interop::model::summary::read_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::summary::read_summary >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::summary::read_summary > *)new std::vector< illumina::interop::model::summary::read_summary >(arg1);
  *(std::vector< illumina::interop::model::summary::read_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::read_summary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::read_summary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::read_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::summary::read_summary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::read_summary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::summary::read_summary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::read_summary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::summary::read_summary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::read_summary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::read_summary >::value_type *) &std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::summary::read_summary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_read_1summary_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::read_summary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::summary::read_summary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::read_summary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_read_summary_Sg__set(arg1,arg2,(illumina::interop::model::summary::read_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1read_1summary_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::summary::read_summary > *arg1 = (std::vector< illumina::interop::model::summary::read_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::summary::read_summary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1run_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1run_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1run_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_run_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_run_info_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_run_info_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ::uint64_t arg6 ;
  float arg7 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg6));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg6), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    if (sz > 0) {
      arg6 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg6 = (arg6 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg7 = (float)jarg7; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ::uint64_t arg6 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg6));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg6), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    if (sz > 0) {
      arg6 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg6 = (arg6 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1,(std::string const &)*arg2);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary(arg1);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::index_count_summary *)new illumina::interop::model::summary::index_count_summary();
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::index_count_summary const *)arg1)->id();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1index1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->index1();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1index2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->index2();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1fraction_1mapped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::index_count_summary const *)arg1)->fraction_mapped();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1cluster_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (::uint64_t)((illumina::interop::model::summary::index_count_summary const *)arg1)->cluster_count();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1sample_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->sample_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1project_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::summary::index_count_summary const *)arg1)->project_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  ::uint64_t arg2 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::summary::index_count_summary *) &(arg1)->operator +=(arg2);
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1update_1fraction_1mapped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update_fraction_mapped(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1is_1less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  illumina::interop::model::summary::index_count_summary *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::index_count_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::index_count_summary const & reference is null");
    return 0;
  } 
  result = (bool)((illumina::interop::model::summary::index_count_summary const *)arg1)->operator <((illumina::interop::model::summary::index_count_summary const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1index_1count_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::index_count_summary *arg1 = (illumina::interop::model::summary::index_count_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::index_count_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4,arg5,arg6);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4,arg5);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  float arg4 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3,arg4);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  float arg3 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2,arg3);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1,arg2);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg1 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg1));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg1), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary(arg1);
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::index_lane_summary *)new illumina::interop::model::summary::index_lane_summary();
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_count_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  arg2 = *(illumina::interop::model::summary::index_count_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::index_count_summary const & reference is null");
    return ;
  } 
  (arg1)->push_back((illumina::interop::model::summary::index_count_summary const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type arg2 ;
  illumina::interop::model::summary::index_count_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::index_lane_summary::size_type)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_count_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::summary::index_count_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::index_lane_summary const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1total_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (illumina::interop::model::summary::index_lane_summary::read_count_t)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_reads();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1total_1pf_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (illumina::interop::model::summary::index_lane_summary::read_count_t)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_pf_reads();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1total_1fraction_1mapped_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->total_fraction_mapped_reads();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1mapped_1reads_1cv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->mapped_reads_cv();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1min_1mapped_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->min_mapped_reads();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1max_1mapped_1reads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  result = (float)((illumina::interop::model::summary::index_lane_summary const *)arg1)->max_mapped_reads();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  ::uint64_t arg2 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg3 ;
  illumina::interop::model::summary::index_lane_summary::read_count_t arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (::uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (::uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg4));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg4), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (illumina::interop::model::summary::index_lane_summary::read_count_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (illumina::interop::model::summary::index_lane_summary::read_count_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1index_1lane_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::index_lane_summary *arg1 = (illumina::interop::model::summary::index_lane_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::index_lane_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1flowcell_1summary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::summary::index_flowcell_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::summary::index_flowcell_summary *)new illumina::interop::model::summary::index_flowcell_summary(arg1);
  *(illumina::interop::model::summary::index_flowcell_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1flowcell_1summary_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_flowcell_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::summary::index_flowcell_summary *)new illumina::interop::model::summary::index_flowcell_summary();
  *(illumina::interop::model::summary::index_flowcell_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1flowcell_1summary_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  illumina::interop::model::summary::index_flowcell_summary::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  arg2 = (illumina::interop::model::summary::index_flowcell_summary::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1flowcell_1summary_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::summary::index_lane_summary *) &(arg1)->operator [](arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::summary::index_lane_summary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1flowcell_1summary_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  result = ((illumina::interop::model::summary::index_flowcell_summary const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1flowcell_1summary_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1flowcell_1summary_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1index_1flowcell_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::summary::index_flowcell_summary *arg1 = (illumina::interop::model::summary::index_flowcell_summary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::summary::index_count_summary > *)new std::vector< illumina::interop::model::summary::index_count_summary >();
  *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1count_1summary_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type arg1 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::summary::index_count_summary >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::summary::index_count_summary > *)new std::vector< illumina::interop::model::summary::index_count_summary >(arg1);
  *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_count_summary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_count_summary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_count_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::summary::index_count_summary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::summary::index_count_summary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::index_count_summary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::summary::index_count_summary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_count_summary >::value_type *) &std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::summary::index_count_summary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1count_1summary_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_count_summary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::summary::index_count_summary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::index_count_summary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_count_summary_Sg__set(arg1,arg2,(illumina::interop::model::summary::index_count_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1index_1count_1summary_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::summary::index_count_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_count_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::summary::index_count_summary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)new std::vector< illumina::interop::model::summary::index_lane_summary >();
  *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1index_1lane_1summary_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type arg1 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::summary::index_lane_summary > *)new std::vector< illumina::interop::model::summary::index_lane_summary >(arg1);
  *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_lane_summary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::summary::index_lane_summary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::summary::index_lane_summary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::summary::index_lane_summary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::summary::index_lane_summary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::index_lane_summary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::summary::index_lane_summary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::summary::index_lane_summary >::value_type *) &std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::summary::index_lane_summary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_index_1lane_1summary_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::summary::index_lane_summary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::summary::index_lane_summary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::summary::index_lane_summary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_summary_index_lane_summary_Sg__set(arg1,arg2,(illumina::interop::model::summary::index_lane_summary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1index_1lane_1summary_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::summary::index_lane_summary > *arg1 = (std::vector< illumina::interop::model::summary::index_lane_summary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::summary::index_lane_summary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1index_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  size_t arg2 ;
  illumina::interop::model::summary::index_lane_summary *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::summary::index_lane_summary **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::index_lane_summary & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,arg2,*arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1index_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > *arg1 = 0 ;
  illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > *arg2 = 0 ;
  size_t arg3 ;
  illumina::interop::model::summary::index_flowcell_summary *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::index_metric > & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::index_flowcell_summary & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,(illumina::interop::model::metric_base::metric_set< illumina::interop::model::metrics::tile_metric > const &)*arg2,arg3,*arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1index_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::index_flowcell_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::index_flowcell_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::index_flowcell_summary & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_index_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_new_1compass_1cycle_1table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::compass_cycle_table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::compass_cycle_table *)new illumina::interop::model::table::compass_cycle_table();
  *(illumina::interop::model::table::compass_cycle_table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_compass_1cycle_1table_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1summaryJNI_compass_1cycle_1table_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  try {
    result = (float)((illumina::interop::model::table::compass_cycle_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1summaryJNI_compass_1cycle_1table_1column_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (std::string *) &((illumina::interop::model::table::compass_cycle_table const *)arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_compass_1cycle_1table_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  result = ((illumina::interop::model::table::compass_cycle_table const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_compass_1cycle_1table_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  result = ((illumina::interop::model::table::compass_cycle_table const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_delete_1compass_1cycle_1table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::compass_cycle_table *arg1 = (illumina::interop::model::table::compass_cycle_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::compass_cycle_table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1compass_1run_1metrics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1compass_1run_1metrics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1compass_1run_1metrics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::summary::run_summary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::summary::run_summary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::summary::run_summary & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_compass_run_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1summaryJNI_summarize_1compass_1cycle_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::compass_cycle_table *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::table::compass_cycle_table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::compass_cycle_table & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::summary::summarize_compass_cycle_metrics(*arg1,*arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_metric_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_metric_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_filter_option &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ illumina::interop::model::invalid_filter_option exception thrown");
    return ; 
  }
  catch(illumina::interop::model::invalid_read_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_read_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_surface_1summary_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::summary::stat_summary **)&baseptr = *(illumina::interop::model::summary::surface_summary **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1summaryJNI_lane_1summary_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::model::summary::stat_summary **)&baseptr = *(illumina::interop::model::summary::lane_summary **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

