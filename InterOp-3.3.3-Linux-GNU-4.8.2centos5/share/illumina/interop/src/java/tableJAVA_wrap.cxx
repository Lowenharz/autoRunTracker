/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


    // using wrapper
#include "interop/model/metrics/corrected_intensity_metric.h"
    

    // using wrapper
#include "interop/model/metrics/error_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extraction_metric.h"
    

    // using wrapper
#include "interop/model/metrics/image_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_metric.h"
    

    // using wrapper
#include "interop/model/metrics/tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/index_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_collapsed_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_by_lane_metric.h"
    
SWIGINTERN unsigned long const &std_map_Sl_uint64_t_Sc_uint64_t_Sg__get(std::map< uint64_t,uint64_t > *self,unsigned long const &key){
                std::map<unsigned long,unsigned long >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_uint64_t_Sg__set(std::map< uint64_t,uint64_t > *self,unsigned long const &key,unsigned long const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_uint64_t_Sc_uint64_t_Sg__del(std::map< uint64_t,uint64_t > *self,unsigned long const &key){
                std::map<unsigned long,unsigned long >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_uint64_t_Sc_uint64_t_Sg__has_key(std::map< uint64_t,uint64_t > *self,unsigned long const &key){
                std::map<unsigned long,unsigned long >::iterator i = self->find(key);
                return i != self->end();
            }

    // using wrapper
#include "interop/model/metrics/alignment_metric.h"
    

    // using wrapper
#include "interop/model/metrics/basecalling_metric.h"
    

    // using wrapper
#include "interop/model/metrics/color_matrix_metric.h"
    

    // using wrapper
#include "interop/model/metrics/distortion_metric.h"
    

    // using wrapper
#include "interop/model/metrics/dynamic_phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/event_metric.h"
    

    // using wrapper
#include "interop/model/metrics/extended_tile_metric.h"
    

    // using wrapper
#include "interop/model/metrics/fwhm_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/pf_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/phasing_metric.h"
    

    // using wrapper
#include "interop/model/metrics/q_grid_metric.h"
    

    // using wrapper
#include "interop/model/metrics/registration_metric.h"
    

    // using wrapper
#include "interop/model/metrics/run_diagnostics_metric.h"
    

    // using wrapper
#include "interop/model/metrics/static_run_metric.h"
    

#include "interop/logic/table/create_imaging_table_columns.h"
#include "interop/logic/table/create_imaging_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::imaging_column >::const_reference std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__get(std::vector< illumina::interop::model::table::imaging_column > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__set(std::vector< illumina::interop::model::table::imaging_column > *self,int i,std::vector< illumina::interop::model::table::imaging_column >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "interop/logic/table/create_event_table_columns.h"
#include "interop/logic/table/create_event_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::event_column >::const_reference std_vector_Sl_illumina_interop_model_table_event_column_Sg__get(std::vector< illumina::interop::model::table::event_column > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_event_column_Sg__set(std::vector< illumina::interop::model::table::event_column > *self,int i,std::vector< illumina::interop::model::table::event_column >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "interop/logic/table/create_run_diagnostics_table_columns.h"
#include "interop/logic/table/create_run_diagnostics_table.h"

SWIGINTERN std::vector< illumina::interop::model::table::run_diagnostics_column >::const_reference std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__get(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__set(std::vector< illumina::interop::model::table::run_diagnostics_column > *self,int i,std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1map_1id_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< uint64_t,uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< uint64_t,uint64_t > *)new std::map< uint64_t,uint64_t >();
  *(std::map< uint64_t,uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1map_1id_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned long,unsigned long > *arg1 = 0 ;
  std::map< uint64_t,uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned long,unsigned long > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< unsigned long,unsigned long > const & reference is null");
    return 0;
  } 
  result = (std::map< uint64_t,uint64_t > *)new std::map< uint64_t,uint64_t >((std::map< unsigned long,unsigned long > const &)*arg1);
  *(std::map< uint64_t,uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  result = (unsigned int)((std::map< uint64_t,uint64_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  result = (bool)((std::map< uint64_t,uint64_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    result = (unsigned long *) &std_map_Sl_uint64_t_Sc_uint64_t_Sg__get(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp2 ;
  unsigned long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg3));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg3), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = &temp3;
    temp3 = 0;
    if (sz > 0) {
      temp3 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp3 = (temp3 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  std_map_Sl_uint64_t_Sc_uint64_t_Sg__set(arg1,(unsigned long const &)*arg2,(unsigned long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    std_map_Sl_uint64_t_Sc_uint64_t_Sg__del(arg1,(unsigned long const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_map_1id_1offset_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(reinterpret_cast<jobject>(jarg2));
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(reinterpret_cast<jobject>(jarg2), mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (unsigned long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (unsigned long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)std_map_Sl_uint64_t_Sc_uint64_t_Sg__has_key(arg1,(unsigned long const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1map_1id_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< uint64_t,uint64_t > *arg1 = (std::map< uint64_t,uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< uint64_t,uint64_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_UnknownColumnId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::table::column_id result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::column_id)illumina::interop::model::table::UnknownColumnId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1column_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column();
  *(illumina::interop::model::table::imaging_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1column_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column(arg1,arg2);
  *(illumina::interop::model::table::imaging_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1column_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column::string_vector *arg3 = 0 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::table::imaging_column::string_vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_column::string_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::table::imaging_column *)new illumina::interop::model::table::imaging_column(arg1,arg2,(illumina::interop::model::table::imaging_column::string_vector const &)*arg3);
  *(illumina::interop::model::table::imaging_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::column_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = (illumina::interop::model::table::column_id)((illumina::interop::model::table::imaging_column const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::table::imaging_column const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1has_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = (bool)((illumina::interop::model::table::imaging_column const *)arg1)->has_children();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1subcolumns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::imaging_column::string_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = (illumina::interop::model::table::imaging_column::string_vector *) &((illumina::interop::model::table::imaging_column const *)arg1)->subcolumns();
  *(illumina::interop::model::table::imaging_column::string_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1full_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::table::imaging_column const *)arg1)->full_name(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  illumina::interop::model::table::column_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  arg2 = (illumina::interop::model::table::column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1parse_1header_1for_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_column const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1to_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::model::table::column_id arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::column_id)jarg1; 
  result = illumina::interop::model::table::imaging_column::to_header(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1to_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::imaging_column::to_header((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1to_1name_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::imaging_column::to_name((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1to_1name_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::imaging_column *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_column const & reference is null");
    return 0;
  } 
  result = illumina::interop::model::table::imaging_column::to_name((illumina::interop::model::table::imaging_column const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1imaging_1column(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::imaging_column *arg1 = (illumina::interop::model::table::imaging_column *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::imaging_column **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::imaging_table *)new illumina::interop::model::table::imaging_table();
  *(illumina::interop::model::table::imaging_table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::imaging_table::data_vector_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::table::imaging_table::column_vector_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_table::column_vector_t & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::table::imaging_table::data_vector_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_table::data_vector_t & reference is null");
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jfloat jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::column_id arg3 ;
  size_t arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::column_id)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = (float)((illumina::interop::model::table::imaging_table const *)arg1)->operator ()(arg2,arg3,arg4);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::column_id arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::column_id)jarg3; 
  try {
    result = (float)((illumina::interop::model::table::imaging_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  illumina::interop::model::table::imaging_table::column_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  result = (illumina::interop::model::table::imaging_table::column_vector_t *) &((illumina::interop::model::table::imaging_table const *)arg1)->columns();
  *(illumina::interop::model::table::imaging_table::column_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  result = (bool)((illumina::interop::model::table::imaging_table const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1column_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::imaging_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::imaging_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::table::imaging_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1total_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->total_column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1table_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  result = ((illumina::interop::model::table::imaging_table const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1imaging_1table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::imaging_table *arg1 = (illumina::interop::model::table::imaging_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1table_1id_1less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::imaging_table *arg1 = 0 ;
  illumina::interop::model::table::imaging_table_id_less *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::imaging_table **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_table const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::table::imaging_table_id_less *)new illumina::interop::model::table::imaging_table_id_less((illumina::interop::model::table::imaging_table const &)*arg1);
  *(illumina::interop::model::table::imaging_table_id_less **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1imaging_1table_1id_1less(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::imaging_table_id_less *arg1 = (illumina::interop::model::table::imaging_table_id_less *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::imaging_table_id_less **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1invalid_1column_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  illumina::interop::model::invalid_column_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (illumina::interop::model::invalid_column_type *)new illumina::interop::model::invalid_column_type((std::string const &)*arg1);
  *(illumina::interop::model::invalid_column_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1invalid_1column_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::invalid_column_type *arg1 = (illumina::interop::model::invalid_column_type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::invalid_column_type **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1column_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::table::imaging_column > *)new std::vector< illumina::interop::model::table::imaging_column >();
  *(std::vector< illumina::interop::model::table::imaging_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1imaging_1column_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type arg1 ;
  std::vector< illumina::interop::model::table::imaging_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::table::imaging_column >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::table::imaging_column > *)new std::vector< illumina::interop::model::table::imaging_column >(arg1);
  *(std::vector< illumina::interop::model::table::imaging_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::imaging_column > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::imaging_column > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::imaging_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::table::imaging_column > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  std::vector< illumina::interop::model::table::imaging_column >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::table::imaging_column >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::table::imaging_column >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::imaging_column >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::imaging_column >::value_type *) &std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::table::imaging_column >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_imaging_1column_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::imaging_column >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::table::imaging_column >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_imaging_column_Sg__set(arg1,arg2,(illumina::interop::model::table::imaging_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1imaging_1column_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = (std::vector< illumina::interop::model::table::imaging_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1imaging_1table_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloatArray jarg4, jlong jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column > const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t const & reference is null");
    return ;
  } 
  arg4 = reinterpret_cast<float*>(jenv->GetFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), 0)); 
  arg5 = (size_t)jarg5; 
  try {
    illumina::interop::logic::table::populate_imaging_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::imaging_column > const &)*arg2,(std::map< unsigned long,unsigned long > const &)*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
  
  jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseFloatArrayElements(reinterpret_cast<jfloatArray>(jarg4), reinterpret_cast<jfloat*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1table_1rows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t & reference is null");
    return ;
  } 
  illumina::interop::logic::table::count_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1table_1columns_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::imaging_column > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1imaging_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::imaging_table *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::table::imaging_table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::imaging_table & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_imaging_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_list_1imaging_1table_1metrics_1to_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< unsigned char > *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  illumina::interop::logic::table::list_imaging_table_metrics_to_load(*arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_max_1digits(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (::uint32_t)illumina::interop::logic::table::max_digits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_get_1column_1rounding(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::table::column_id arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::column_id)jarg1; 
  result = illumina::interop::logic::table::get_column_rounding(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1imaging_1table_1columns_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jint jarg5) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< bool > *arg2 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg3 = 0 ;
  size_t arg4 ;
  illumina::interop::constants::layout_type arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bool > const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column > & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (illumina::interop::constants::layout_type)jarg5; 
  try {
    illumina::interop::logic::table::create_imaging_table_columns((std::vector< std::string > const &)*arg1,(std::vector< bool > const &)*arg2,*arg3,arg4,arg5);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1column_1offsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::imaging_column > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1imaging_1table_1columns_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::imaging_column > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::imaging_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::imaging_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_imaging_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_UnknownEventColumnId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::table::event_column_id result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::event_column_id)illumina::interop::model::table::UnknownEventColumnId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1column_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column();
  *(illumina::interop::model::table::event_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1column_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_column_id arg1 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::event_column_id)jarg1; 
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column(arg1);
  *(illumina::interop::model::table::event_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1column_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (illumina::interop::model::table::event_column *)new illumina::interop::model::table::event_column(arg1);
  *(illumina::interop::model::table::event_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  illumina::interop::model::table::event_column_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  result = (illumina::interop::model::table::event_column_id)((illumina::interop::model::table::event_column const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::table::event_column const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  illumina::interop::model::table::event_column_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  arg2 = (illumina::interop::model::table::event_column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1parse_1header_1for_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  result = ((illumina::interop::model::table::event_column const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1to_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::model::table::event_column_id arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::event_column_id)jarg1; 
  result = illumina::interop::model::table::event_column::to_header(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1to_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::event_column::to_header((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1to_1name_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::event_column::to_name((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1to_1name_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::event_column *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::event_column const & reference is null");
    return 0;
  } 
  result = illumina::interop::model::table::event_column::to_name((illumina::interop::model::table::event_column const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1event_1column(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::event_column *arg1 = (illumina::interop::model::table::event_column *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::event_column **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::event_table *)new illumina::interop::model::table::event_table();
  *(illumina::interop::model::table::event_table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::event_table::data_vector_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::table::event_table::column_vector_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::event_table::column_vector_t & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::table::event_table::data_vector_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::event_table::data_vector_t & reference is null");
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_column_id arg3 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::event_column_id)jarg3; 
  try {
    result = (::uint64_t)((illumina::interop::model::table::event_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  illumina::interop::model::table::event_table::column_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  result = (illumina::interop::model::table::event_table::column_vector_t *) &((illumina::interop::model::table::event_table const *)arg1)->columns();
  *(illumina::interop::model::table::event_table::column_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  result = (bool)((illumina::interop::model::table::event_table const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1column_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::event_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::event_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::table::event_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1total_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->total_column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1table_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  result = ((illumina::interop::model::table::event_table const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1event_1table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::event_table *arg1 = (illumina::interop::model::table::event_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1table_1id_1less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::event_table *arg1 = 0 ;
  illumina::interop::model::table::event_table_id_less *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::event_table **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::event_table const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::table::event_table_id_less *)new illumina::interop::model::table::event_table_id_less((illumina::interop::model::table::event_table const &)*arg1);
  *(illumina::interop::model::table::event_table_id_less **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1event_1table_1id_1less(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::event_table_id_less *arg1 = (illumina::interop::model::table::event_table_id_less *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::event_table_id_less **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1column_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::table::event_column > *)new std::vector< illumina::interop::model::table::event_column >();
  *(std::vector< illumina::interop::model::table::event_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1event_1column_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type arg1 ;
  std::vector< illumina::interop::model::table::event_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::table::event_column >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::table::event_column > *)new std::vector< illumina::interop::model::table::event_column >(arg1);
  *(std::vector< illumina::interop::model::table::event_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::event_column > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::event_column > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::event_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::table::event_column > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  std::vector< illumina::interop::model::table::event_column >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::table::event_column >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::table::event_column >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::event_column >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::event_column >::value_type *) &std_vector_Sl_illumina_interop_model_table_event_column_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::table::event_column >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_event_1column_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::event_column >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::table::event_column >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_event_column_Sg__set(arg1,arg2,(illumina::interop::model::table::event_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1event_1column_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = (std::vector< illumina::interop::model::table::event_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1event_1table_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlongArray jarg4, jlong jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  ::uint64_t *arg4 = (::uint64_t *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column > const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t const & reference is null");
    return ;
  } 
  
  arg4 = reinterpret_cast<unsigned long*>(jenv->GetLongArrayElements(reinterpret_cast<jlongArray>(jarg4), 0));
  
  arg5 = (size_t)jarg5; 
  illumina::interop::logic::table::populate_event_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::event_column > const &)*arg2,(std::map< unsigned long,unsigned long > const &)*arg3,arg4,arg5);
  
  jenv->ReleaseLongArrayElements(reinterpret_cast<jlongArray>(jarg4), reinterpret_cast<jlong*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseLongArrayElements(reinterpret_cast<jlongArray>(jarg4), reinterpret_cast<jlong*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1event_1table_1rows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t & reference is null");
    return ;
  } 
  illumina::interop::logic::table::count_event_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1table_1columns_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::event_column > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1event_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::event_table *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::table::event_table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::event_table & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_list_1event_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::logic::table::event_description_vector_t *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::logic::table::event_description_vector_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::event_description_vector_t & reference is null");
    return ;
  } 
  illumina::interop::logic::table::list_event_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1event_1table_1columns_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table_columns(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1column_1offsets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::event_column > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1event_1table_1columns_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::event_column > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::event_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::event_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_event_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_UnknownRunDiagnosticsColumnId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column_id result;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::run_diagnostics_column_id)illumina::interop::model::table::UnknownRunDiagnosticsColumnId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column();
  *(illumina::interop::model::table::run_diagnostics_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column_id arg1 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::run_diagnostics_column_id)jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1);
  *(illumina::interop::model::table::run_diagnostics_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1,arg2);
  *(illumina::interop::model::table::run_diagnostics_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column::string_vector *arg3 = 0 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::table::run_diagnostics_column::string_vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::run_diagnostics_column::string_vector const & reference is null");
    return 0;
  } 
  result = (illumina::interop::model::table::run_diagnostics_column *)new illumina::interop::model::table::run_diagnostics_column(arg1,arg2,(illumina::interop::model::table::run_diagnostics_column::string_vector const &)*arg3);
  *(illumina::interop::model::table::run_diagnostics_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column_id)((illumina::interop::model::table::run_diagnostics_column const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = (std::string *) &((illumina::interop::model::table::run_diagnostics_column const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1has_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = (bool)((illumina::interop::model::table::run_diagnostics_column const *)arg1)->has_children();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->offset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1subcolumns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column::string_vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_column::string_vector *) &((illumina::interop::model::table::run_diagnostics_column const *)arg1)->subcolumns();
  *(illumina::interop::model::table::run_diagnostics_column::string_vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1full_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->full_name(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  illumina::interop::model::table::run_diagnostics_column_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  arg2 = (illumina::interop::model::table::run_diagnostics_column_id)jarg2; 
  (arg1)->id(arg2);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1parse_1header_1for_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->parse_header_for_id((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_column const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1to_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column_id arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (illumina::interop::model::table::run_diagnostics_column_id)jarg1; 
  result = illumina::interop::model::table::run_diagnostics_column::to_header(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1to_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::run_diagnostics_column::to_header((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1to_1name_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = illumina::interop::model::table::run_diagnostics_column::to_name((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1to_1name_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_column *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::run_diagnostics_column const & reference is null");
    return 0;
  } 
  result = illumina::interop::model::table::run_diagnostics_column::to_name((illumina::interop::model::table::run_diagnostics_column const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1run_1diagnostics_1column(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::run_diagnostics_column *arg1 = (illumina::interop::model::table::run_diagnostics_column *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::run_diagnostics_column **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (illumina::interop::model::table::run_diagnostics_table *)new illumina::interop::model::table::run_diagnostics_table();
  *(illumina::interop::model::table::run_diagnostics_table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_table::column_vector_t *arg3 = 0 ;
  illumina::interop::model::table::run_diagnostics_table::data_vector_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(illumina::interop::model::table::run_diagnostics_table::column_vector_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::run_diagnostics_table::column_vector_t & reference is null");
    return ;
  } 
  arg4 = *(illumina::interop::model::table::run_diagnostics_table::data_vector_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::run_diagnostics_table::data_vector_t & reference is null");
    return ;
  } 
  (arg1)->set_data(arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column_id arg3 ;
  ::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (illumina::interop::model::table::run_diagnostics_column_id)jarg3; 
  try {
    result = (::uint64_t)((illumina::interop::model::table::run_diagnostics_table const *)arg1)->operator ()(arg2,arg3);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = reinterpret_cast<jlong>(bigint);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  illumina::interop::model::table::run_diagnostics_table::column_vector_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  result = (illumina::interop::model::table::run_diagnostics_table::column_vector_t *) &((illumina::interop::model::table::run_diagnostics_table const *)arg1)->columns();
  *(illumina::interop::model::table::run_diagnostics_table::column_vector_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  result = (bool)((illumina::interop::model::table::run_diagnostics_table const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1column_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t arg2 ;
  illumina::interop::model::table::run_diagnostics_column *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = (illumina::interop::model::table::run_diagnostics_column *) &(arg1)->column_at(arg2);
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return 0;
    }
  }
  
  *(illumina::interop::model::table::run_diagnostics_column **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1total_1column_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->total_column_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1table_1row_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  result = ((illumina::interop::model::table::run_diagnostics_table const *)arg1)->row_count();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1run_1diagnostics_1table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  illumina::interop::model::table::run_diagnostics_table *arg1 = (illumina::interop::model::table::run_diagnostics_table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)new std::vector< illumina::interop::model::table::run_diagnostics_column >();
  *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_new_1run_1diagnostics_1column_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type arg1 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type)jarg1; 
  result = (std::vector< illumina::interop::model::table::run_diagnostics_column > *)new std::vector< illumina::interop::model::table::run_diagnostics_column >(arg1);
  *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::run_diagnostics_column > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  result = ((std::vector< illumina::interop::model::table::run_diagnostics_column > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  arg2 = (std::vector< illumina::interop::model::table::run_diagnostics_column >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  result = (bool)((std::vector< illumina::interop::model::table::run_diagnostics_column > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  arg2 = *(std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type *) &std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_run_1diagnostics_1column_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  int arg2 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_illumina_interop_model_table_run_diagnostics_column_Sg__set(arg1,arg2,(illumina::interop::model::table::run_diagnostics_column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_delete_1run_1diagnostics_1column_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = (std::vector< illumina::interop::model::table::run_diagnostics_column > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1run_1diagnostics_1table_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlongArray jarg4, jlong jarg5) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg2 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg3 = 0 ;
  ::uint64_t *arg4 = (::uint64_t *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & reference is null");
    return ;
  } 
  arg3 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t const & reference is null");
    return ;
  } 
  
  arg4 = reinterpret_cast<unsigned long*>(jenv->GetLongArrayElements(reinterpret_cast<jlongArray>(jarg4), 0));
  
  arg5 = (size_t)jarg5; 
  illumina::interop::logic::table::populate_run_diagnostics_table_data((illumina::interop::model::metrics::run_metrics const &)*arg1,(std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg2,(std::map< unsigned long,unsigned long > const &)*arg3,arg4,arg5);
  
  jenv->ReleaseLongArrayElements(reinterpret_cast<jlongArray>(jarg4), reinterpret_cast<jlong*>(arg4), 0);
  arg4 = NULL;
  
  
  if (arg4)
  {
    jenv->ReleaseLongArrayElements(reinterpret_cast<jlongArray>(jarg4), reinterpret_cast<jlong*>(arg4), JNI_ABORT);
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1run_1diagnostics_1table_1rows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::logic::table::row_offset_map_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics const & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::logic::table::row_offset_map_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::row_offset_map_t & reference is null");
    return ;
  } 
  illumina::interop::logic::table::count_run_diagnostics_table_rows((illumina::interop::model::metrics::run_metrics const &)*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_count_1table_1columns_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column > const & reference is null");
    return 0;
  } 
  result = illumina::interop::logic::table::count_table_columns((std::vector< illumina::interop::model::table::run_diagnostics_column > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1run_1diagnostics_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  illumina::interop::model::table::run_diagnostics_table *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(illumina::interop::model::table::run_diagnostics_table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::table::run_diagnostics_table & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_list_1run_1diagnostics_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  illumina::interop::logic::table::run_diagnostics_description_vector_t *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(illumina::interop::logic::table::run_diagnostics_description_vector_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::logic::table::run_diagnostics_description_vector_t & reference is null");
    return ;
  } 
  illumina::interop::logic::table::list_run_diagnostics_metrics(*arg1);
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1run_1diagnostics_1table_1columns_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bool > const & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table_columns(*arg1,(std::vector< bool > const &)*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_populate_1column_1offsets_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::populate_column_offsets(*arg1);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_com_illumina_interop_interop_1tableJNI_create_1run_1diagnostics_1table_1columns_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  illumina::interop::model::metrics::run_metrics *arg1 = 0 ;
  std::vector< illumina::interop::model::table::run_diagnostics_column > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(illumina::interop::model::metrics::run_metrics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "illumina::interop::model::metrics::run_metrics & reference is null");
    return ;
  } 
  arg2 = *(std::vector< illumina::interop::model::table::run_diagnostics_column > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< illumina::interop::model::table::run_diagnostics_column > & reference is null");
    return ;
  } 
  try {
    illumina::interop::logic::table::create_run_diagnostics_table_columns(*arg1,*arg2);
  }
  catch(illumina::interop::model::invalid_column_type &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_column_type");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::index_out_of_bounds_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/index_out_of_bounds_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  catch(illumina::interop::model::invalid_channel_exception &_e) {
    {
      // the following namespace thing is hacky
      jclass excep = jenv->FindClass("com/illumina/interop/invalid_channel_exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_illumina_interop_interop_1tableJNI_invalid_1column_1type_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(illumina::interop::util::base_exception **)&baseptr = *(illumina::interop::model::invalid_column_type **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

