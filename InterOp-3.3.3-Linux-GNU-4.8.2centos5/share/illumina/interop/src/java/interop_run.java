/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class interop_run implements interop_runConstants {
  public static String library_version() {
    return interop_runJNI.library_version();
  }

  public static cycle_range subtract(cycle_range lhs, long first_cycle_of_read) {
    return new cycle_range(interop_runJNI.subtract(cycle_range.getCPtr(lhs), lhs, first_cycle_of_read), true);
  }

  public static void list_metric_type(string_vector vec, long skip) {
    interop_runJNI.list_metric_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_metric_type(string_vector vec) {
    interop_runJNI.list_metric_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static metric_type parse_metric_type(String name) {
    return metric_type.swigToEnum(interop_runJNI.parse_metric_type(name));
  }

  public static String to_string(metric_type value) {
    return interop_runJNI.to_string__SWIG_1(value.swigValue());
  }

  public static void list_metric_group(string_vector vec, long skip) {
    interop_runJNI.list_metric_group__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_metric_group(string_vector vec) {
    interop_runJNI.list_metric_group__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static metric_group parse_metric_group(String name) {
    return metric_group.swigToEnum(interop_runJNI.parse_metric_group(name));
  }

  public static String to_string(metric_group value) {
    return interop_runJNI.to_string__SWIG_2(value.swigValue());
  }

  public static void list_tile_naming_method(string_vector vec, long skip) {
    interop_runJNI.list_tile_naming_method__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_tile_naming_method(string_vector vec) {
    interop_runJNI.list_tile_naming_method__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static tile_naming_method parse_tile_naming_method(String name) {
    return tile_naming_method.swigToEnum(interop_runJNI.parse_tile_naming_method(name));
  }

  public static String to_string(tile_naming_method value) {
    return interop_runJNI.to_string__SWIG_3(value.swigValue());
  }

  public static void list_dna_bases(string_vector vec, long skip) {
    interop_runJNI.list_dna_bases__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_dna_bases(string_vector vec) {
    interop_runJNI.list_dna_bases__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static dna_bases parse_dna_bases(String name) {
    return dna_bases.swigToEnum(interop_runJNI.parse_dna_bases(name));
  }

  public static String to_string(dna_bases value) {
    return interop_runJNI.to_string__SWIG_4(value.swigValue());
  }

  public static void list_surface_type(string_vector vec, long skip) {
    interop_runJNI.list_surface_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_surface_type(string_vector vec) {
    interop_runJNI.list_surface_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static surface_type parse_surface_type(String name) {
    return surface_type.swigToEnum(interop_runJNI.parse_surface_type(name));
  }

  public static String to_string(surface_type value) {
    return interop_runJNI.to_string__SWIG_5(value.swigValue());
  }

  public static void list_instrument_type(string_vector vec, long skip) {
    interop_runJNI.list_instrument_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_instrument_type(string_vector vec) {
    interop_runJNI.list_instrument_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static instrument_type parse_instrument_type(String name) {
    return instrument_type.swigToEnum(interop_runJNI.parse_instrument_type(name));
  }

  public static String to_string(instrument_type value) {
    return interop_runJNI.to_string__SWIG_6(value.swigValue());
  }

  public static void list_metric_base_type(string_vector vec, long skip) {
    interop_runJNI.list_metric_base_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_metric_base_type(string_vector vec) {
    interop_runJNI.list_metric_base_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static metric_base_type parse_metric_base_type(String name) {
    return metric_base_type.swigToEnum(interop_runJNI.parse_metric_base_type(name));
  }

  public static String to_string(metric_base_type value) {
    return interop_runJNI.to_string__SWIG_7(value.swigValue());
  }

  public static void list_plot_colors(string_vector vec, long skip) {
    interop_runJNI.list_plot_colors__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_plot_colors(string_vector vec) {
    interop_runJNI.list_plot_colors__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static plot_colors parse_plot_colors(String name) {
    return plot_colors.swigToEnum(interop_runJNI.parse_plot_colors(name));
  }

  public static String to_string(plot_colors value) {
    return interop_runJNI.to_string__SWIG_8(value.swigValue());
  }

  public static void list_bar_plot_options(string_vector vec, long skip) {
    interop_runJNI.list_bar_plot_options__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_bar_plot_options(string_vector vec) {
    interop_runJNI.list_bar_plot_options__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static bar_plot_options parse_bar_plot_options(String name) {
    return bar_plot_options.swigToEnum(interop_runJNI.parse_bar_plot_options(name));
  }

  public static String to_string(bar_plot_options value) {
    return interop_runJNI.to_string__SWIG_9(value.swigValue());
  }

  public static void list_metric_data(string_vector vec, long skip) {
    interop_runJNI.list_metric_data__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_metric_data(string_vector vec) {
    interop_runJNI.list_metric_data__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static metric_data parse_metric_data(String name) {
    return metric_data.swigToEnum(interop_runJNI.parse_metric_data(name));
  }

  public static String to_string(metric_data value) {
    return interop_runJNI.to_string__SWIG_10(value.swigValue());
  }

  public static void list_metric_feature_type(string_vector vec, long skip) {
    interop_runJNI.list_metric_feature_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_metric_feature_type(string_vector vec) {
    interop_runJNI.list_metric_feature_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static metric_feature_type parse_metric_feature_type(String name) {
    return metric_feature_type.swigToEnum(interop_runJNI.parse_metric_feature_type(name));
  }

  public static String to_string(metric_feature_type value) {
    return interop_runJNI.to_string__SWIG_11(value.swigValue());
  }

  public static void list_sub_tile_offset_type(string_vector vec, long skip) {
    interop_runJNI.list_sub_tile_offset_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_sub_tile_offset_type(string_vector vec) {
    interop_runJNI.list_sub_tile_offset_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static sub_tile_offset_type parse_sub_tile_offset_type(String name) {
    return sub_tile_offset_type.swigToEnum(interop_runJNI.parse_sub_tile_offset_type(name));
  }

  public static String to_string(sub_tile_offset_type value) {
    return interop_runJNI.to_string__SWIG_12(value.swigValue());
  }

  public static void list_sub_tile_region_name(string_vector vec, long skip) {
    interop_runJNI.list_sub_tile_region_name__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_sub_tile_region_name(string_vector vec) {
    interop_runJNI.list_sub_tile_region_name__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static sub_tile_region_name parse_sub_tile_region_name(String name) {
    return sub_tile_region_name.swigToEnum(interop_runJNI.parse_sub_tile_region_name(name));
  }

  public static String to_string(sub_tile_region_name value) {
    return interop_runJNI.to_string__SWIG_13(value.swigValue());
  }

  public static void list_affine_transform_type(string_vector vec, long skip) {
    interop_runJNI.list_affine_transform_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_affine_transform_type(string_vector vec) {
    interop_runJNI.list_affine_transform_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static affine_transform_type parse_affine_transform_type(String name) {
    return affine_transform_type.swigToEnum(interop_runJNI.parse_affine_transform_type(name));
  }

  public static String to_string(affine_transform_type value) {
    return interop_runJNI.to_string__SWIG_14(value.swigValue());
  }

  public static void list_event_type(string_vector vec, long skip) {
    interop_runJNI.list_event_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_event_type(string_vector vec) {
    interop_runJNI.list_event_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static event_type parse_event_type(String name) {
    return event_type.swigToEnum(interop_runJNI.parse_event_type(name));
  }

  public static String to_string(event_type value) {
    return interop_runJNI.to_string__SWIG_15(value.swigValue());
  }

  public static void list_distortion_type(string_vector vec, long skip) {
    interop_runJNI.list_distortion_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_distortion_type(string_vector vec) {
    interop_runJNI.list_distortion_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static distortion_type parse_distortion_type(String name) {
    return distortion_type.swigToEnum(interop_runJNI.parse_distortion_type(name));
  }

  public static String to_string(distortion_type value) {
    return interop_runJNI.to_string__SWIG_16(value.swigValue());
  }

  public static void list_distortion_curve_type(string_vector vec, long skip) {
    interop_runJNI.list_distortion_curve_type__SWIG_0(string_vector.getCPtr(vec), vec, skip);
  }

  public static void list_distortion_curve_type(string_vector vec) {
    interop_runJNI.list_distortion_curve_type__SWIG_1(string_vector.getCPtr(vec), vec);
  }

  public static distortion_curve_type parse_distortion_curve_type(String name) {
    return distortion_curve_type.swigToEnum(interop_runJNI.parse_distortion_curve_type(name));
  }

  public static String to_string(distortion_curve_type value) {
    return interop_runJNI.to_string__SWIG_17(value.swigValue());
  }

}
