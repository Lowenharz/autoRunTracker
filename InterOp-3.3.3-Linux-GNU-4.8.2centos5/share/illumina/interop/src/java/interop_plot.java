/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.illumina.interop;

public class interop_plot {
  public static void plot_by_cycle(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data, boolean skip_empty) throws index_out_of_bounds_exception, invalid_metric_type, invalid_channel_exception, invalid_filter_option, invalid_read_exception {
    interop_plotJNI.plot_by_cycle__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data, skip_empty);
  }

  public static void plot_by_cycle(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_channel_exception, invalid_filter_option, invalid_read_exception {
    interop_plotJNI.plot_by_cycle__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void plot_by_cycle(run_metrics metrics, String metric_name, filter_options options, candle_stick_plot_data data, boolean skip_empty) throws index_out_of_bounds_exception, invalid_filter_option, invalid_channel_exception, invalid_metric_type {
    interop_plotJNI.plot_by_cycle__SWIG_2(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data, skip_empty);
  }

  public static void plot_by_cycle(run_metrics metrics, String metric_name, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_filter_option, invalid_channel_exception, invalid_metric_type {
    interop_plotJNI.plot_by_cycle__SWIG_3(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void list_by_cycle_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_accumulated) {
    interop_plotJNI.list_by_cycle_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_accumulated);
  }

  public static void list_by_cycle_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.list_by_cycle_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static void filter_by_cycle_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_accumulated) {
    interop_plotJNI.filter_by_cycle_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_accumulated);
  }

  public static void filter_by_cycle_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.filter_by_cycle_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static void plot_by_lane(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data, boolean skip_empty) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_by_lane__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data, skip_empty);
  }

  public static void plot_by_lane(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_by_lane__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void plot_by_lane(run_metrics metrics, String metric_name, filter_options options, candle_stick_plot_data data, boolean skip_empty) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_by_lane__SWIG_2(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data, skip_empty);
  }

  public static void plot_by_lane(run_metrics metrics, String metric_name, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_by_lane__SWIG_3(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void list_by_lane_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_pf) {
    interop_plotJNI.list_by_lane_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_pf);
  }

  public static void list_by_lane_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.list_by_lane_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static void filter_by_lane_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_pf) {
    interop_plotJNI.filter_by_lane_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_pf);
  }

  public static void filter_by_lane_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.filter_by_lane_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static void plot_qscore_histogram(run_metrics metrics, filter_options options, bar_plot_data data, long boundary) throws invalid_read_exception, index_out_of_bounds_exception, invalid_filter_option {
    interop_plotJNI.plot_qscore_histogram__SWIG_0(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, bar_plot_data.getCPtr(data), data, boundary);
  }

  public static void plot_qscore_histogram(run_metrics metrics, filter_options options, bar_plot_data data) throws invalid_read_exception, index_out_of_bounds_exception, invalid_filter_option {
    interop_plotJNI.plot_qscore_histogram__SWIG_1(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, bar_plot_data.getCPtr(data), data);
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data, float[] buffer, long buffer_size) throws index_out_of_bounds_exception, invalid_filter_option {
    interop_plotJNI.plot_qscore_heatmap__SWIG_0(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, heatmap_data.getCPtr(data), data, buffer, buffer_size);
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data, float[] buffer) throws index_out_of_bounds_exception, invalid_filter_option {
    interop_plotJNI.plot_qscore_heatmap__SWIG_1(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, heatmap_data.getCPtr(data), data, buffer);
  }

  public static void plot_qscore_heatmap(run_metrics metrics, filter_options options, heatmap_data data) throws index_out_of_bounds_exception, invalid_filter_option {
    interop_plotJNI.plot_qscore_heatmap__SWIG_2(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, heatmap_data.getCPtr(data), data);
  }

  public static long count_rows_for_heatmap(run_metrics metrics) {
    return interop_plotJNI.count_rows_for_heatmap(run_metrics.getCPtr(metrics), metrics);
  }

  public static long count_columns_for_heatmap(run_metrics metrics) {
    return interop_plotJNI.count_columns_for_heatmap(run_metrics.getCPtr(metrics), metrics);
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer, boolean skip_empty) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer, skip_empty);
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_2(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer);
  }

  public static void plot_flowcell_map(run_metrics metrics, metric_type type, filter_options options, flowcell_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_3(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data);
  }

  public static void plot_flowcell_map2(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size, boolean skip_empty) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map2__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size, skip_empty);
  }

  public static void plot_flowcell_map2(run_metrics metrics, metric_type type, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map2__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size);
  }

  public static void plot_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer, boolean skip_empty) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_4(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer, skip_empty);
  }

  public static void plot_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_5(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_6(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer);
  }

  public static void plot_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map__SWIG_7(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data);
  }

  public static void plot_flowcell_map2(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size, boolean skip_empty) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map2__SWIG_2(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size, skip_empty);
  }

  public static void plot_flowcell_map2(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_flowcell_map2__SWIG_3(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size);
  }

  public static void list_flowcell_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_accumulated) {
    interop_plotJNI.list_flowcell_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_accumulated);
  }

  public static void list_flowcell_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.list_flowcell_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static void filter_flowcell_metrics(metric_type_description_vector types, boolean show_iuo, boolean ignore_accumulated) {
    interop_plotJNI.filter_flowcell_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types, show_iuo, ignore_accumulated);
  }

  public static void filter_flowcell_metrics(metric_type_description_vector types, boolean show_iuo) {
    interop_plotJNI.filter_flowcell_metrics__SWIG_1(metric_type_description_vector.getCPtr(types), types, show_iuo);
  }

  public static long calculate_flowcell_buffer_size(run_metrics metrics, filter_options options) {
    return interop_plotJNI.calculate_flowcell_buffer_size(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options);
  }

  public static void plot_sample_qc(run_metrics metrics, long lane, bar_plot_data data) throws index_out_of_bounds_exception {
    interop_plotJNI.plot_sample_qc(run_metrics.getCPtr(metrics), metrics, lane, bar_plot_data.getCPtr(data), data);
  }

  public static void list_plot_metrics(metric_type_description_vector types) {
    interop_plotJNI.list_plot_metrics(metric_type_description_vector.getCPtr(types), types);
  }

  public static void list_available_plot_metrics(run_metrics metrics, metric_type_description_vector types) {
    interop_plotJNI.list_available_plot_metrics(run_metrics.getCPtr(metrics), metrics, metric_type_description_vector.getCPtr(types), types);
  }

  public static void find_first_valid(subtile_data data, base_metric found) throws index_out_of_bounds_exception {
    interop_plotJNI.find_first_valid__SWIG_0(subtile_data.getCPtr(data), data, base_metric.getCPtr(found), found);
  }

  public static void find_first_valid(subtile_data data, float[] buffer, int[] id_buffer, base_metric found) throws index_out_of_bounds_exception, invalid_parameter {
    interop_plotJNI.find_first_valid__SWIG_1(subtile_data.getCPtr(data), data, buffer, id_buffer, base_metric.getCPtr(found), found);
  }

  public static void select_tile_values(subtile_data data, long lane, long tile, float[] tile_data_buffer) throws index_out_of_bounds_exception {
    interop_plotJNI.select_tile_values__SWIG_0(subtile_data.getCPtr(data), data, lane, tile, tile_data_buffer);
  }

  public static void select_tile_values(subtile_data data, long lane, long tile, float[] buffer, int[] id_buffer, float[] tile_data_buffer) throws index_out_of_bounds_exception, invalid_parameter {
    interop_plotJNI.select_tile_values__SWIG_1(subtile_data.getCPtr(data), data, lane, tile, buffer, id_buffer, tile_data_buffer);
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data, buffer);
  }

  public static void plot_subtile_map(run_metrics metrics, metric_type type, filter_options options, subtile_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_2(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data);
  }

  public static void plot_subtile_map(run_metrics metrics, String metric_name, filter_options options, subtile_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_3(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_subtile_map(run_metrics metrics, String metric_name, filter_options options, subtile_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_4(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data, buffer);
  }

  public static void plot_subtile_map(run_metrics metrics, String metric_name, filter_options options, subtile_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_subtile_map__SWIG_5(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, subtile_data.getCPtr(data), data);
  }

  public static void list_subtile_metrics(metric_type_description_vector types) {
    interop_plotJNI.list_subtile_metrics__SWIG_0(metric_type_description_vector.getCPtr(types), types);
  }

  public static void list_subtile_metrics(run_metrics metrics, metric_type_description_vector types) {
    interop_plotJNI.list_subtile_metrics__SWIG_1(run_metrics.getCPtr(metrics), metrics, metric_type_description_vector.getCPtr(types), types);
  }

  public static long calculate_subtile_buffer_size(run_metrics metrics, metric_type type, filter_options options) throws invalid_metric_type {
    return interop_plotJNI.calculate_subtile_buffer_size(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options);
  }

  public static void plot_subtile_aggregate(run_metrics metrics, metric_type type, filter_options options, candle_stick_plot_data data_x, candle_stick_plot_data data_y) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_subtile_aggregate__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data_x), data_x, candle_stick_plot_data.getCPtr(data_y), data_y);
  }

  public static void plot_subtile_aggregate(run_metrics metrics, String metric_name, filter_options options, candle_stick_plot_data data_x, candle_stick_plot_data data_y) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_subtile_aggregate__SWIG_1(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data_x), data_x, candle_stick_plot_data.getCPtr(data_y), data_y);
  }

  public static void plot_distortion(run_metrics metrics, filter_options options, long distortion_curve_index, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_channel_exception, invalid_filter_option, invalid_read_exception {
    interop_plotJNI.plot_distortion(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, distortion_curve_index, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void plot_event_by_cycle(run_metrics metrics, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_event_by_cycle(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void list_interval_events(event_type_vector types) {
    interop_plotJNI.list_interval_events(event_type_vector.getCPtr(types), types);
  }

  public static void plot_event_by_event_type(run_metrics metrics, filter_options options, candle_stick_plot_data data, boolean save_outliers) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_event_by_event_type__SWIG_0(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data, save_outliers);
  }

  public static void plot_event_by_event_type(run_metrics metrics, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_event_by_event_type__SWIG_1(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void plot_run_diagnostics_by_cycle(run_metrics metrics, filter_options options, candle_stick_plot_data data) throws index_out_of_bounds_exception, invalid_metric_type, invalid_filter_option {
    interop_plotJNI.plot_run_diagnostics_by_cycle(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options, candle_stick_plot_data.getCPtr(data), data);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_1(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_2(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data);
  }

  public static void plot_run_diagnostics_flowcell_map2(run_metrics metrics, run_diagnostics_issue_type type, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map2__SWIG_0(run_metrics.getCPtr(metrics), metrics, type.swigValue(), filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, int[] tile_buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_3(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, tile_buffer);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_4(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer);
  }

  public static void plot_run_diagnostics_flowcell_map(run_metrics metrics, String metric_name, filter_options options, flowcell_data data) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map__SWIG_5(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data);
  }

  public static void plot_run_diagnostics_flowcell_map2(run_metrics metrics, String metric_name, filter_options options, flowcell_data data, float[] buffer, long buffer_size, int[] id_buffer, long id_buffer_size) throws invalid_filter_option, invalid_metric_type, index_out_of_bounds_exception {
    interop_plotJNI.plot_run_diagnostics_flowcell_map2__SWIG_1(run_metrics.getCPtr(metrics), metrics, metric_name, filter_options.getCPtr(options), options, flowcell_data.getCPtr(data), data, buffer, buffer_size, id_buffer, id_buffer_size);
  }

  public static long calculate_run_diagnostics_flowcell_buffer_size(run_metrics metrics, filter_options options) {
    return interop_plotJNI.calculate_run_diagnostics_flowcell_buffer_size(run_metrics.getCPtr(metrics), metrics, filter_options.getCPtr(options), options);
  }

}
